<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://anyesu.github.io</id>
    <title>anyesu's Blog</title>
    <updated>2020-10-22T18:02:02.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://anyesu.github.io"/>
    <link rel="self" href="https://anyesu.github.io/atom.xml"/>
    <subtitle>这是 anyesu 的个人博客, 爱技术, 爱折腾</subtitle>
    <logo>https://anyesu.github.io/favicon.ico</logo>
    <icon>https://anyesu.github.io/favicon.ico</icon>
    <rights>Copyright © 2020 https://anyesu.github.io. All rights reserved.</rights>
    <entry>
        <title type="html"><![CDATA[使用 semantic-release 自动发版]]></title>
        <id>37</id>
        <link href="https://anyesu.github.io/blog/articles/37"/>
        <updated>2020-10-22T18:02:02.000Z</updated>
        <summary type="html"><![CDATA[前言 最近新项目准备做自动发版，就去研究了一下 semantic-release 。 什么是 semantic-release Fully automated version management and package publishing semantic-release automates the whole package release workflow including: deter]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>最近新项目准备做自动发版，就去研究了一下 <strong>semantic-release</strong> 。</p>
<h3>什么是 <a href="https://github.com/semantic-release/semantic-release">semantic-release</a></h3>
<hr>
<blockquote>
<h3>Fully automated version management and package publishing</h3>
<p><strong>semantic-release</strong> automates the whole package release workflow including: determining the next version number, generating the release notes and publishing the package.</p>
<p>This removes the immediate connection between human emotions and version numbers, strictly following the <a href="http://semver.org/" rel="nofollow">Semantic Versioning</a> specification.</p>
</blockquote>
<p>用人话说就是一个完全自动化的工具，可以帮助你做版本号管理、生成 <strong>changelog</strong> ，并且发布到包管理器 ( 比如 <a href="https://npmjs.com" rel="nofollow">npm</a> ) 。</p>
<h3>如何使用 ( <a href="https://semantic-release.gitbook.io" rel="nofollow">官方文档</a> )</h3>
<hr>
<blockquote>
<ol>
<li>
<p>Install <strong>semantic-release</strong> in your project</p>
</li>
<li>
<p>Configure your Continuous Integration service to <code>run semantic-release</code></p>
</li>
<li>
<p>Configure your Git repository and package manager repository <strong>authentication</strong> in your Continuous Integration service</p>
</li>
<li>
<p>Configure <strong>semantic-release</strong> <strong>options and plugins</strong></p>
</li>
</ol>
</blockquote>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">cd</span> your-module
npx semantic-release-cli setup

<span class="pl-c"><span class="pl-c">#</span> For Node modules projects</span>
npm install --save-dev semantic-release

<span class="pl-c"><span class="pl-c">#</span> Then in the CI environment</span>
npx semantic-release</pre></div>
<p>以上是官方文档的内容，操作真的是很简单，简单到不知道它是干嘛的，简单到后面步入一个个坑不知道怎么解决。我照着官方文档折腾了几个小时愣是没跑通，一直在 <strong>error</strong> 。要不是看在很多项目 ( 比如 <a href="https://github.com/octokit">octokit</a> ) 都在用它，我都想直接放弃了。</p>
<p>官方文档只是告诉你需要安装这么一个包，有哪些参数，剩下的都没细说，就算有也是藏在某个角落里生怕别人找到：</p>
<ol>
<li>
<p>是否需要新建 <strong>GitHub</strong> 仓库？</p>
</li>
<li>
<p>如何配置 <strong>GitHub</strong> 和 <strong>npm</strong> 的 <strong>token</strong> ?</p>
</li>
<li>
<p>何时触发 <strong>发布</strong> 操作的？手动执行命令？<strong>push</strong> ？</p>
</li>
<li>
<p>如何测试？一定要在 <strong>CI</strong> 环境中？</p>
</li>
</ol>
<h3>正确打开方式</h3>
<hr>
<blockquote>
<p>我特地建了一个新仓库 <a href="https://github.com/iewgggg/semantic-release-test">semantic-release-test</a> 来演示效果。感兴趣的朋友可以照着我的提交记录走一遍流程。</p>
</blockquote>
<ul>
<li>
<h4>本地新建一个项目，比如 <code>semantic-release-test</code></h4>
<p><strong>目录结构</strong></p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">.</span>
├─.github
│  └─workflows
│    └─release.yml
├─src
│  └─index.js
├─.env
├─.releaserc.js
├─package.json</pre></div>
<p><strong>package.json</strong></p>
<blockquote>
<p>替换为自己的包名和仓库地址</p>
</blockquote>
<div class="highlight highlight-source-json"><pre>{
  <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>@anyesu/semantic-release-test<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>version<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>0.0.0-development<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>semantic-release-test<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>main<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>src/index.js<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>scripts<span class="pl-pds">"</span></span>: {
    <span class="pl-s"><span class="pl-pds">"</span>build<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>echo build success.<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>semantic-release<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>dotenv -c -- semantic-release<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>semantic-release:local<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>dotenv -c -- semantic-release --no-ci<span class="pl-pds">"</span></span>
  },
  <span class="pl-s"><span class="pl-pds">"</span>publishConfig<span class="pl-pds">"</span></span>: {
    <span class="pl-s"><span class="pl-pds">"</span>registry<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>https://registry.npmjs.org/<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>access<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>public<span class="pl-pds">"</span></span>
  },
  <span class="pl-s"><span class="pl-pds">"</span>repository<span class="pl-pds">"</span></span>: {
    <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>git<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>url<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>https://github.com/iewgggg/semantic-release-test.git<span class="pl-pds">"</span></span>
  },
  <span class="pl-s"><span class="pl-pds">"</span>author<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>anyesu<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>license<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>MIT<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>bugs<span class="pl-pds">"</span></span>: {
    <span class="pl-s"><span class="pl-pds">"</span>url<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>https://github.com/iewgggg/semantic-release-test/issues<span class="pl-pds">"</span></span>
  },
  <span class="pl-s"><span class="pl-pds">"</span>homepage<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>https://github.com/iewgggg/semantic-release-test#readme<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>files<span class="pl-pds">"</span></span>: [
    <span class="pl-s"><span class="pl-pds">"</span>src<span class="pl-pds">"</span></span>
  ],
  <span class="pl-s"><span class="pl-pds">"</span>devDependencies<span class="pl-pds">"</span></span>: {
    <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>^9.0.0<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>conventional-changelog-cmyr-config<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>^1.2.3<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>dotenv-cli<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>^4.0.0<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>semantic-release<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>^17.2.1<span class="pl-pds">"</span></span>
  }
}</pre></div>
<p><strong>.releaserc.js</strong></p>
<blockquote>
<p><strong>semantic-release</strong> 的配置文件，具体配置项见 <a href="https://semantic-release.gitbook.io/semantic-release/usage/configuration" rel="nofollow">文档</a> 。</p>
</blockquote>
<div class="highlight highlight-source-js"><pre><span class="pl-smi">module</span><span class="pl-kos">.</span><span class="pl-c1">exports</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
  <span class="pl-c1">plugins</span>: <span class="pl-kos">[</span>
    <span class="pl-s">"@semantic-release/commit-analyzer"</span><span class="pl-kos">,</span>
    <span class="pl-kos">[</span>
      <span class="pl-s">"@semantic-release/release-notes-generator"</span><span class="pl-kos">,</span>
      <span class="pl-kos">{</span>
        <span class="pl-c1">config</span>: <span class="pl-s">"conventional-changelog-cmyr-config"</span><span class="pl-kos">,</span>
      <span class="pl-kos">}</span><span class="pl-kos">,</span>
    <span class="pl-kos">]</span><span class="pl-kos">,</span>
    <span class="pl-s">"@semantic-release/npm"</span><span class="pl-kos">,</span>
    <span class="pl-kos">[</span>
      <span class="pl-s">"@semantic-release/git"</span><span class="pl-kos">,</span>
      <span class="pl-kos">{</span>
        <span class="pl-c1">assets</span>: <span class="pl-kos">[</span><span class="pl-s">"package.json"</span><span class="pl-kos">]</span><span class="pl-kos">,</span>
      <span class="pl-kos">}</span><span class="pl-kos">,</span>
    <span class="pl-kos">]</span><span class="pl-kos">,</span>
    <span class="pl-s">"@semantic-release/github"</span><span class="pl-kos">,</span>
  <span class="pl-kos">]</span><span class="pl-kos">,</span>
<span class="pl-kos">}</span><span class="pl-kos">;</span></pre></div>
<p><strong>.env</strong></p>
<blockquote>
<p>环境变量配置文件，通过 <code>dotenv-cli</code> 在运行时读取</p>
<p><a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token">GITHUB_TOKEN</a></p>
<p><a href="https://docs.npmjs.com/creating-and-viewing-access-tokens" rel="nofollow">NPM_TOKEN</a> 如果是私有仓库或者不想发布到 <strong>npm</strong> 可以不填</p>
</blockquote>
<div class="highlight highlight-source-shell"><pre>GITHUB_TOKEN=<span class="pl-k">******</span>
NPM_TOKEN=<span class="pl-k">******</span></pre></div>
<p><strong>.github/workflows/release.yml</strong></p>
<blockquote>
<p><strong>CI</strong> - <a href="https://docs.github.com/en/free-pro-team@latest/actions">GitHub Actions</a> 的配置文件，可选。</p>
<p><strong>GitHub Actions</strong> 会自动创建名为 <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow">GITHUB_TOKEN</a> 的 <strong>secret</strong> ，不需要手动添加</p>
<p>只需要 <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository">添加</a> 额外的 <strong>NPM_TOKEN</strong></p>
</blockquote>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">name</span>: <span class="pl-s">Release</span>
<span class="pl-ent">on</span>:
  <span class="pl-ent">repository_dispatch</span>:
    <span class="pl-ent">types</span>: <span class="pl-s">[ semantic-release ]</span>
  <span class="pl-ent">push</span>:
    <span class="pl-ent">branches</span>:
      - <span class="pl-s">master</span>
      - <span class="pl-s">next</span>
      - <span class="pl-s">beta</span>
      - <span class="pl-s"><span class="pl-pds">"</span>*.x<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> maintenance releases such as 15.x</span>

<span class="pl-ent">jobs</span>:
  <span class="pl-ent">release</span>:
    <span class="pl-ent">name</span>: <span class="pl-s">release</span>
    <span class="pl-ent">runs-on</span>: <span class="pl-s">ubuntu-latest</span>
    <span class="pl-ent">steps</span>:
      - <span class="pl-ent">uses</span>: <span class="pl-s">actions/checkout@v2</span>
      - <span class="pl-ent">uses</span>: <span class="pl-s">actions/setup-node@v1</span>
        <span class="pl-ent">with</span>:
          <span class="pl-ent">node-version</span>: <span class="pl-c1">12</span>
      - <span class="pl-ent">run</span>: <span class="pl-s">npm i</span>
      - <span class="pl-ent">run</span>: <span class="pl-s">npm run build</span>
      - <span class="pl-ent">run</span>: <span class="pl-s">npx semantic-release</span>
        <span class="pl-ent">env</span>:
          <span class="pl-ent">GITHUB_TOKEN</span>: <span class="pl-s">${{ secrets.GITHUB_TOKEN }}</span>
          <span class="pl-ent">NPM_TOKEN</span>: <span class="pl-s">${{ secrets.NPM_TOKEN }}</span></pre></div>
</li>
<li>
<h4>初始化为 Git 项目，并提交初始化版本</h4>
<div class="highlight highlight-source-shell"><pre>git init
git add package.json .releaserc.js .github/workflows/release.yml
git commit -m <span class="pl-s"><span class="pl-pds">"</span>feat: :tada: Initial commit.<span class="pl-pds">"</span></span></pre></div>
</li>
<li>
<h4><a href="https://github.com/new">新建远程仓库</a> ( 比如 <a href="https://github.com/iewgggg/semantic-release-test">semantic-release-test</a> )</h4>
<blockquote>
<p>很重要，一定要有远程仓库</p>
</blockquote>
</li>
<li>
<h5>推送到 GitHub</h5>
<pre><code>git remote add origin https://{GITHUB_TOKEN}@github.com/{owner}/{repo}
git push -u origin master
</code></pre>
<p>如果按照上面步骤配置了 <strong>GitHub Actions</strong> ，那么打开 <strong>GitHub</strong> 中的项目可以看到已经成功生成了 <strong>release</strong> 。</p>
<p>同时还可以看到有一条新的提交记录</p>
<pre><code>chore(release): 1.0.0 [skip ci]
</code></pre>
</li>
<li>
<h4>本地测试</h4>
<p>安装项目</p>
<div class="highlight highlight-source-shell"><pre>git pull
npm i</pre></div>
<p>随便修改一个文件提交一条新记录</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">echo</span> <span class="pl-c1">test</span> <span class="pl-k">&gt;</span> test.txt

git add test.txt
git commit -m <span class="pl-s"><span class="pl-pds">"</span>fix: :apple: Fixing something on macOS.<span class="pl-pds">"</span></span></pre></div>
<p>测试效果</p>
<div class="highlight highlight-source-shell"><pre>npm run semantic-release</pre></div>
<details>
<summary>本地日志</summary>
<div class="highlight highlight-source-shell"><pre>[semantic-release] » i  Running semantic-release version 17.2.1
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>analyzeCommits<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/commit-analyzer<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>generateNotes<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/release-notes-generator<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>prepare<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>prepare<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>publish<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>publish<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>addChannel<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>addChannel<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>success<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>fail<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » ‼  This run was not triggered <span class="pl-k">in</span> a known CI environment, running <span class="pl-k">in</span> dry-run mode.
[semantic-release] » ‼  Run automated release from branch master on repository https://[secure]@github.com/iewgggg/semantic-release-test.git <span class="pl-k">in</span> dry-run mode
[semantic-release] » √  Allowed to push to the Git repository
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span>
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span>
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] [@semantic-release/github] » i  Verify GitHub authentication
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » i  Found git tag v1.0.0 associated with version 1.0.0 on branch master
[semantic-release] » i  Found 1 commits since last release
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>analyzeCommits<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/commit-analyzer<span class="pl-pds">"</span></span>
[semantic-release] [@semantic-release/commit-analyzer] » i  Analyzing commit: fix: :apple: Fixing something on macOS.
[semantic-release] [@semantic-release/commit-analyzer] » i  The release <span class="pl-c1">type</span> <span class="pl-k">for</span> the commit is patch
[semantic-release] [@semantic-release/commit-analyzer] » i  Analysis of 1 commits complete: patch release
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>analyzeCommits<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/commit-analyzer<span class="pl-pds">"</span></span>
[semantic-release] » i  The next release version is 1.0.1
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>generateNotes<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/release-notes-generator<span class="pl-pds">"</span></span>
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>generateNotes<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/release-notes-generator<span class="pl-pds">"</span></span>
[semantic-release] » ‼  Skip step <span class="pl-s"><span class="pl-pds">"</span>prepare<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span> <span class="pl-k">in</span> dry-run mode
[semantic-release] » ‼  Skip step <span class="pl-s"><span class="pl-pds">"</span>prepare<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span> <span class="pl-k">in</span> dry-run mode
[semantic-release] » ‼  Skip v1.0.1 tag creation <span class="pl-k">in</span> dry-run mode
[semantic-release] » ‼  Skip step <span class="pl-s"><span class="pl-pds">"</span>publish<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span> <span class="pl-k">in</span> dry-run mode
[semantic-release] » ‼  Skip step <span class="pl-s"><span class="pl-pds">"</span>publish<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span> <span class="pl-k">in</span> dry-run mode
[semantic-release] » ‼  Skip step <span class="pl-s"><span class="pl-pds">"</span>success<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span> <span class="pl-k">in</span> dry-run mode
[semantic-release] » √  Published release 1.0.1 on default channel
[semantic-release] » i  Release note <span class="pl-k">for</span> version 1.0.1:
<span class="pl-c"><span class="pl-c">#</span># 1.0.1 (https://github.com/iewgggg/semantic-release-test/compare/v1.0.0...v1.0.1) (2020-10-22)</span>

<span class="pl-c"><span class="pl-c">#</span>## � Bug Fixes</span>

    <span class="pl-k">*</span> �  Fixing something on macOS. (c83864b (https://github.com/iewgggg/semantic-release-test/commit/c83864b))</pre></div>
</details>
<p>已经可以看到根据 <strong>提交记录</strong> 生成的 <strong>changelog</strong> 的内容，由于不是在 <strong>CI</strong> 环境中运行的，所以实际并没有发布到 <strong>GitHub</strong> 和 <strong>npm</strong> 。</p>
<p>通过预览知道已经 OK 了，下面可以在本地进行发布</p>
<div class="highlight highlight-source-shell"><pre>npm run semantic-release:local</pre></div>
<details>
<summary>本地日志</summary>
<div class="highlight highlight-source-shell"><pre>[semantic-release] » i  Running semantic-release version 17.2.1
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>analyzeCommits<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/commit-analyzer<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>generateNotes<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/release-notes-generator<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>prepare<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>prepare<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>publish<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>publish<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>addChannel<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>addChannel<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>success<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » √  Loaded plugin <span class="pl-s"><span class="pl-pds">"</span>fail<span class="pl-pds">"</span></span> from <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » √  Run automated release from branch master on repository https://[secure]@github.com/iewgggg/semantic-release-test.git
[semantic-release] » √  Allowed to push to the Git repository
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span>
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span>
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] [@semantic-release/github] » i  Verify GitHub authentication
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>verifyConditions<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/github<span class="pl-pds">"</span></span>
[semantic-release] » i  Found git tag v1.0.0 associated with version 1.0.0 on branch master
[semantic-release] » i  Found 1 commits since last release
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>analyzeCommits<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/commit-analyzer<span class="pl-pds">"</span></span>
[semantic-release] [@semantic-release/commit-analyzer] » i  Analyzing commit: fix: :apple: Fixing something on macOS.
[semantic-release] [@semantic-release/commit-analyzer] » i  The release <span class="pl-c1">type</span> <span class="pl-k">for</span> the commit is patch
[semantic-release] [@semantic-release/commit-analyzer] » i  Analysis of 1 commits complete: patch release
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>analyzeCommits<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/commit-analyzer<span class="pl-pds">"</span></span>
[semantic-release] » i  The next release version is 1.0.1
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>generateNotes<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/release-notes-generator<span class="pl-pds">"</span></span>
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>generateNotes<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/release-notes-generator<span class="pl-pds">"</span></span>
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>prepare<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] [@semantic-release/npm] » i  Write version 1.0.1 to package.json <span class="pl-k">in</span> pathto<span class="pl-cce">\s</span>emantic-release-test
v1.0.1
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>prepare<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>prepare<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span>
[semantic-release] [@semantic-release/git] » i  Found 1 file(s) to commit
[semantic-release] [@semantic-release/git] » i  Prepared Git release: v1.0.1
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>prepare<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/git<span class="pl-pds">"</span></span>
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>generateNotes<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/release-notes-generator<span class="pl-pds">"</span></span>
[semantic-release] » √  Completed step <span class="pl-s"><span class="pl-pds">"</span>generateNotes<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/release-notes-generator<span class="pl-pds">"</span></span>
[semantic-release] » √  Created tag v1.0.1
[semantic-release] » i  Start step <span class="pl-s"><span class="pl-pds">"</span>publish<span class="pl-pds">"</span></span> of plugin <span class="pl-s"><span class="pl-pds">"</span>@semantic-release/npm<span class="pl-pds">"</span></span>
[semantic-release] [@semantic-release/npm] » i  Skip publishing to npm registry as package.json<span class="pl-s"><span class="pl-pds">'</span>s private property is true</span>
<span class="pl-s">[semantic-release] » √  Completed step "publish" of plugin "@semantic-release/npm"</span>
<span class="pl-s">[semantic-release] » i  Start step "publish" of plugin "@semantic-release/github"</span>
<span class="pl-s">[semantic-release] [@semantic-release/github] » i  Published GitHub release: https://github.com/iewgggg/semantic-release-test/releases/tag/v1.0.1</span>
<span class="pl-s">[semantic-release] » √  Completed step "publish" of plugin "@semantic-release/github"</span>
<span class="pl-s">[semantic-release] » i  Start step "success" of plugin "@semantic-release/github"</span>
<span class="pl-s">[semantic-release] » √  Completed step "success" of plugin "@semantic-release/github"</span>
<span class="pl-s">[semantic-release] » √  Published release 1.0.1 on default channel</span></pre></div>
</details>
<p>再打开 <strong>GitHub</strong> 中的项目可以看到 <strong>release v1.0.1</strong> 也生成了。</p>
<blockquote>
<p>Tip: 可以注意到两次 <strong>release</strong> 的作者是不一样的，因为使用了不同的 <strong>GITHUB_TOKEN</strong> 。</p>
</blockquote>
<p>此时虽然 <strong>GitHub Actions</strong> 中多了一个新的执行记录：</p>
<pre><code>chore(release): 1.0.1 [skip ci]
</code></pre>
<p>但不需要担心会重复发布，在日志中可以看到下面的内容：</p>
<pre><code>There are no relevant changes, so no new version is released.
</code></pre>
</li>
</ul>
<h3>原理分析</h3>
<hr>
<p>首先，我们结合 <code>semantic-release</code> 和 <code>semantic-release:local</code> 两个命令的日志看下它究竟做了什么</p>
<ol>
<li>
<p>加载插件。</p>
</li>
<li>
<p>判断是否在 <strong>CI</strong> 环境中，不是则跳过执行插件的一些生命周期。</p>
</li>
<li>
<p>检查远程仓库是否存在，以及合法的分支。</p>
</li>
<li>
<p>检查是否有仓库的写入权限。</p>
<p><strong>这一步比较坑爹，如果没有设置 GITHUB_TOKEN 报错竟然是版本落后？？？</strong></p>
<div class="highlight highlight-source-shell"><pre>Run automated release from branch master on repository https://github.com/iewgggg/semantic-release-test.git <span class="pl-k">in</span> dry-run mode
The <span class="pl-k">local</span> branch master is behind the remote one, therefore a new version won<span class="pl-s"><span class="pl-pds">'</span>t be published.</span></pre></div>
<p><strong>设置 GITHUB_TOKEN 后再看日志感受下区别</strong></p>
<div class="highlight highlight-source-shell"><pre>Run automated release from branch master on repository https://[secure]@github.com/iewgggg/semantic-release-test.git <span class="pl-k">in</span> dry-run mode
√  Allowed to push to the Git repository</pre></div>
<p>这个问题也是我 <strong>debug</strong> 源码后才发现的。</p>
</li>
<li>
<p>检查 <strong>NPM_TOKEN</strong> 是否存在，并写入到 <strong>temp</strong> 目录的 <strong>.npmrc</strong> 文件中。</p>
</li>
<li>
<p>检查当前分支是否存在符合 <a href="https://semver.org/" rel="nofollow">语义化版本</a> 的 <strong>tag</strong>，存在则为当前版本号。</p>
</li>
<li>
<p>对比 <strong>远程仓库</strong> 是否有新的提交记录，无则终止。</p>
</li>
<li>
<p>插件 <code>@semantic-release/commit-analyzer</code> 开始对 <strong>新的提交记录</strong> 逐条分析，筛选符合 <a href="https://semantic-release.gitbook.io/semantic-release/#commit-message-format" rel="nofollow">提交规范</a> 的记录， <strong>筛选结果</strong> 为空则终止。</p>
</li>
<li>
<p>如果存在 <strong>当前版本号</strong> ，则根据 <strong>筛选结果</strong> 确定升级类型 ( <strong>MAJOR / MINOR / PATCH</strong> ) 计算 <strong>新的版本号</strong> ，否则 <strong>新版本号</strong> 为 <code>1.0.0</code> 。</p>
</li>
<li>
<p>插件 <code>@semantic-release/release-notes-generator</code> 再对 <strong>新的提交记录</strong> 逐条分析生成 <strong>changelog</strong> 。</p>
</li>
<li>
<p>插件 <code>@semantic-release/npm</code> 将 <strong>新的版本号</strong> 重新写入到 <strong>package.json</strong> 文件中。</p>
</li>
<li>
<p>插件 <code>@semantic-release/git</code> 对修改后的 <strong>package.json</strong> 进行 <strong>提交</strong> 和 <strong>推送</strong> 。</p>
<blockquote>
<p>插件默认配置还会修改 <strong>CHANGELOG.md</strong> 文件，本文中配置为只修改 <strong>package.json</strong></p>
</blockquote>
</li>
<li>
<p>添加新版本号 <strong>tag</strong> 。</p>
</li>
<li>
<p><strong>npm</strong> <strong>打包</strong> 并 <strong>发布</strong> ，如果 <strong>package.json</strong> 设置了 <code>"private": true</code> 则跳过。</p>
</li>
<li>
<p>发布到 <strong>GitHub</strong> ，包括压缩包和 <strong>changelog</strong> 。</p>
</li>
</ol>
<p>整个流程比较清晰了，主要操作也是通过几个插件来完成，所以通过对插件的组合、配置来实现一些个性化的需求。</p>
<h3>缺点</h3>
<hr>
<ol>
<li>
<p><strong>semantic-release</strong> 强依赖于远程仓库的分支状态，所以在正式使用前测试会非常麻烦，反复测试需要反复重置远程仓库的状态，而且网络不好就更恶心了。</p>
</li>
<li>
<p><strong>release</strong> 中的 <strong>changelog</strong> 是发布一个版本生成一次的，这就意味着仓库迁移的话，历史记录就没有了，只剩下 <strong>tag</strong> 。</p>
<p>如果没有使用插件 <code>@semantic-release/git</code> 的话可以不断 <strong>reset HEAD</strong> 来恢复一个个版本，当然这也很麻烦。</p>
</li>
</ol>
<h3>FAQ</h3>
<hr>
<ul>
<li>
<p><strong>官方文档太烂怎么办？</strong></p>
<p>直接阅读源码 + debug ，以力破法。</p>
</li>
<li>
<p><strong>为何本地执行命令会卡住？</strong></p>
<p>因为分别需要连接到 <strong>GitHub</strong> 和 <strong>npm</strong> ，网络环境差就会卡住。</p>
</li>
<li>
<p><strong>如何不发布到 npm？</strong></p>
<ol>
<li>
<p>移除插件 <code>@semantic-release/npm</code> 即可，但这样 <strong>package.json</strong> 中的版本号得不到修改。</p>
</li>
<li>
<p>在 <strong>package.json</strong> 中设置 <code>"private": true</code> 。</p>
</li>
<li>
<p>插件 <code>@semantic-release/npm</code> 配置为 <code>npmPublish: false</code> 。</p>
</li>
</ol>
</li>
<li>
<p><strong>registry 设置为 <a href="https://registry.npm.taobao.org" rel="nofollow">https://registry.npm.taobao.org</a> 但需要发布到 npm？</strong></p>
<p>在 <strong>package.json</strong> 中设置</p>
<div class="highlight highlight-source-json"><pre><span class="pl-s"><span class="pl-pds">"</span>publishConfig<span class="pl-pds">"</span></span>: {
  <span class="pl-s"><span class="pl-pds">"</span>registry<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>https://registry.npmjs.org/<span class="pl-pds">"</span></span>
}</pre></div>
</li>
<li>
<p><strong>npm 发布报错？</strong></p>
<blockquote>
<p>npm ERR! 402 Payment Required - PUT <a href="https://registry.npmjs.org/" rel="nofollow">https://registry.npmjs.org/</a> - You must sign up for private packages</p>
</blockquote>
<p>第一次发布时会出现这个错误，因为 <strong>scoped packages</strong> 默认会被发布为 <strong>私有包</strong> ，需要将其发布为 <strong>公有包</strong> 。见 <a href="https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages" rel="nofollow">官方文档</a> 。</p>
<p>下面有三种方案</p>
<ol>
<li>
<p>修改 <strong>命令行</strong> 参数</p>
<div class="highlight highlight-source-shell"><pre>npm publish --access public</pre></div>
</li>
<li>
<p>在 <strong>.npmrc</strong> 中设置</p>
<div class="highlight highlight-source-shell"><pre>access=public</pre></div>
</li>
<li>
<p>在 <strong>package.json</strong> 中设置</p>
<div class="highlight highlight-source-json"><pre><span class="pl-s"><span class="pl-pds">"</span>publishConfig<span class="pl-pds">"</span></span>: {
  <span class="pl-s"><span class="pl-pds">"</span>access<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>public<span class="pl-pds">"</span></span>
}</pre></div>
</li>
</ol>
</li>
<li>
<p><strong>npm 开启双因素认证 ( Two Factor Authentication ) 后发布报错？</strong></p>
<blockquote>
<p>The npm token (<a href="https://github.com/semantic-release/npm/blob/master/README.md#npm-registry-authentication">https://github.com/semantic-release/npm/blob/master/README.md#npm-registry-authentication</a>) configured in the NPM_TOKEN environment variable must be a valid token (<a href="https://docs.npmjs.com/getting-started/working_with_tokens" rel="nofollow">https://docs.npmjs.com/getting-started/working_with_tokens</a>) allowing to publish to<br>
the registry <a href="https://registry.npmjs.org/" rel="nofollow">https://registry.npmjs.org/</a>.</p>
<p>If you are using Two-Factor Authentication, make configure the auth-only level (<a href="https://docs.npmjs.com/getting-started/using-two-factor-authentication#levels-of-authentication" rel="nofollow">https://docs.npmjs.com/getting-started/using-two-factor-authentication#levels-of-authentication</a>) is supported. semantic-release cannot publish with the default auth-and-writes level.</p>
</blockquote>
<ol>
<li>
<p><strong>双因素认证</strong> 需要设置为 <strong>auth-only</strong> 级别 ( <a href="https://docs.npmjs.com/about-two-factor-authentication" rel="nofollow">文档</a> ) 。</p>
</li>
<li>
<p><strong>Access Tokens</strong> 类型选择 <strong>Publish</strong> 而不是 <strong>Automation</strong> 。</p>
</li>
</ol>
</li>
<li>
<p><strong>如何同步更新 <code>package.json</code> 中的版本号？</strong></p>
<p>默认不更新版本号，可以添加插件 <code>@semantic-release/git</code> 来额外提交。</p>
</li>
<li>
<p><strong>如何在 <code>1.0.0</code> 之前发布 prerelease 版本，如：1.0.0-beta.10 ？</strong></p>
<ol>
<li>
<p>项目不包含 <strong>release.yml</strong> 时初始化后推送到 <strong>master</strong> 分支，这样确保 <strong>远程仓库</strong> 有一个 <strong>release 分支</strong> 并且不会自动发布。</p>
</li>
<li>
<p>切到 <strong>beta</strong> 分支提交 <strong>release.yml</strong> 后推送，自动发布为 <code>1.0.0-beta.1</code> 。</p>
</li>
</ol>
<p>这样就生成 <strong>beta</strong> 版本了，后续迭代继续在 <strong>beta</strong> 分支上进行，发布正式版只需将 <strong>beta</strong> 分支合并到 <strong>master</strong> 分支，然后所有 <strong>beta</strong> 版的 <strong>changelog</strong> 都会合并到 <code>1.0.0</code> 中。( <a href="https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/pre-releases.md">参考</a> )</p>
</li>
<li>
<p><strong>如何手动管理版本？</strong></p>
<p>可以使用 <a href="https://github.com/conventional-changelog/standard-version">standard-version</a> ，二者区别：</p>
<blockquote>
<p><code>standard-version</code> takes a different approach by handling versioning, changelog generation, and git tagging for you <strong>without</strong> automatic pushing (to GitHub) or publishing (to an npm registry). Use of <code>standard-version</code> only affects your local git repo - it doesn't affect remote resources at all. After you run <code>standard-version</code>, you can review your release state, correct mistakes and follow the release strategy that makes the most sense for your codebase.</p>
</blockquote>
<div class="highlight highlight-source-json"><pre><span class="pl-s"><span class="pl-pds">"</span>scripts<span class="pl-pds">"</span></span>: {
  <span class="pl-s"><span class="pl-pds">"</span>release:beta<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>standard-version --release-as major --prerelease beta<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>release:major<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>standard-version --release-as major<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>release:minor<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>standard-version --release-as minor<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>release:patch<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>standard-version --release-as patch<span class="pl-pds">"</span></span>
},
<span class="pl-s"><span class="pl-pds">"</span>devDependencies<span class="pl-pds">"</span></span>: {
  <span class="pl-s"><span class="pl-pds">"</span>standard-version<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>^9.0.0<span class="pl-pds">"</span></span>
}</pre></div>
</li>
<li>
<p><strong>如何手动发布？</strong></p>
<ol>
<li>
<p>本地执行 <code>npm run semantic-release:local</code> 。</p>
</li>
<li>
<p>通过 <strong>GitHub Actions Hook</strong> 调用，详见 <a href="https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/github-actions.md#trigger-semantic-release-on-demand">文档</a> 。</p>
<p>也可以添加按钮 - <a href="https://github-action-button.web.app/" rel="nofollow">https://github-action-button.web.app</a></p>
</li>
</ol>
</li>
<li>
<p><strong>如何修改 changelog 的格式？</strong></p>
<p>这部分功能底层依赖于 <a href="https://github.com/conventional-changelog/conventional-changelog">conventional-changelog</a> ，已经内置几种预设 ( <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular"><code>angular</code></a> , <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-atom"><code>atom</code></a> , <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-codemirror"><code>codemirror</code></a>, <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-ember"><code>ember</code></a> , <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-eslint"><code>eslint</code></a> , <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-express"><code>express</code></a> , <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-jquery"><code>jquery</code></a> , <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-jshint"><code>jshint</code></a> , <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-conventionalcommits"><code>conventionalcommits</code></a> ) 可供选择，我这里使用的是第三方配置 <a href="https://github.com/CaoMeiYouRen/conventional-changelog-cmyr-config">conventional-changelog-cmyr-config</a> ，需要更加个性化详见 <a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-writer">conventional-changelog-writer</a> 包配置项。</p>
<p>本来我想配置成 <a href="https://github.com/ant-design/ant-design/releases">antd</a> 那样的双语 <strong>changelog</strong> ( 再复制一份用 <strong>翻译 API</strong> 翻译一下，再手动微调 )，但还要 <strong>fork</strong> 发包，那就先算了吧。</p>
</li>
</ul>
<h3>IDEA 插件推荐</h3>
<hr>
<ol>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/9861-git-commit-template" rel="nofollow">Git Commit Template</a></p>
<p>通过表单的形式结构化输入 <strong>commit message</strong> 。</p>
<p>符合 <a href="https://github.com/angular/angular.js">AngularJS</a> 的 <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Git Commit Guidelines</a> 规范。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/10315-gitmoji" rel="nofollow">Gitmoji</a></p>
<p>根据输入的内容来选择 <strong>emoji 表情</strong> 的表达式。</p>
<p><a href="https://gitmoji.carloscuesta.me/" rel="nofollow">Reference commit rules</a> / <a href="https://gitmoji.surge.sh/" rel="nofollow">中文提交规则</a></p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/14610-gitmoji-unicode" rel="nofollow">Gitmoji-Unicode</a></p>
<p><strong>Gitmoji</strong> 插件的 <strong>fork</strong> 版本，可以直接显示 <strong>emoji 表情</strong> 而非表达式。</p>
</li>
</ol>
<p>两个插件都挺不错的，缺点就是写死了不可配置，再加上几年没维护了，用起来有点尴尬。</p>
<h3>最后</h3>
<hr>
<p>按照文中的配置，基本上满足我的需求了：</p>
<ol>
<li>
<p>自动化版本管理，推送代码或者合并 <strong>PR</strong> 即可发版。</p>
</li>
<li>
<p>自动生成 <strong>changelog</strong> ，不再需要单独去写。</p>
</li>
<li>
<p>自动发布到 <strong>npm</strong> ( <g-emoji class="g-emoji" alias="sweat_smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png">😅</g-emoji> 直接省去了学习 <strong>npm</strong> 发包的步骤 ) 。</p>
</li>
<li>
<p>发布后对应的 <strong>PR</strong> 和 <strong>issue</strong> 下会添加 <strong>发布通知</strong> 的评论，就不需要自己再手动通知了。</p>
</li>
</ol>
<hr>
<h4>转载请注明出处：<a href="https://anyesu.github.io/blog/articles/37" rel="nofollow">https://github.com/anyesu/blog/issues/37</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2020-10-22T18:02:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL 中 Docker 使用总结]]></title>
        <id>36</id>
        <link href="https://anyesu.github.io/blog/articles/36"/>
        <updated>2019-09-29T15:47:54.000Z</updated>
        <summary type="html"><![CDATA[前言 最近看一篇文章中提到 WSL 中已经支持 Docker 运行了，最初不以为意以为还是千篇一律的标题党 ( Docker Client + Docker Desktop for Windows ) ，后来尝试之后发现确实可行，本文在此记录一些遇到的问题。 关于版本 系统最低版本要求: 1803 ( 17134 ) 。 1803 下可用 Docker 版本: 17.03.0 ~ 17.09.0 ]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>最近看一篇文章中提到 <strong>WSL</strong> 中已经支持 <strong>Docker</strong> 运行了，最初不以为意以为还是千篇一律的标题党 ( <strong>Docker Client</strong> + <strong>Docker Desktop for Windows</strong> ) ，后来尝试之后发现确实可行，本文在此记录一些遇到的问题。</p>
<h3>关于版本</h3>
<hr>
<ul>
<li>
<p>系统最低版本要求: <strong>1803 ( <code>17134</code> )</strong> 。</p>
</li>
<li>
<p><strong>1803</strong> 下可用 <strong>Docker</strong> 版本: <code>17.03.0</code> ~ <code>17.09.0</code></p>
<p>使用高版本的 <strong>Docker</strong> 拉取镜像时会报下面的错误：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> docker pull hello-world</span>
Using default tag: latest
latest: Pulling from library/hello-world
1b930d010525: Extracting [<span class="pl-k">==================================================&gt;</span>]     977B/977B
failed to register layer: Error processing tar file(exit status 1): invalid argument</pre></div>
<p>原因见 <a href="https://www.reddit.com/r/bashonubuntuonwindows/comments/8cvr27/docker_is_running_natively_on_wsl/#t1_dxxn30d" rel="nofollow">这里</a> ，<a href="https://github.com/Microsoft/WSL/issues/2291#issuecomment-403273520" data-hovercard-type="issue" data-hovercard-url="/microsoft/WSL/issues/2291/hovercard">issue</a> 中说这个问题应该在 <a href="https://docs.microsoft.com/en-us/windows/wsl/release-notes#build-17666" rel="nofollow">17666</a> 版本已经修复了。</p>
</li>
<li>
<p><strong>1809</strong> 下可用 <strong>Docker</strong> 版本: <code>17.03.0</code> ~ <code>18.06.1</code></p>
<p>使用高版本的 <strong>Docker</strong> 创建容器时会报下面的错误：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> docker run -it hello-world</span>
docker: Error response from daemon: OCI runtime create failed: container_linux.go:345: starting container process caused <span class="pl-s"><span class="pl-pds">"</span>process_linux.go:303: getting the final child's pid from pipe caused <span class="pl-cce">\"</span>EOF<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>: unknown.</pre></div>
<p>对应的 <strong>dockerd</strong> 日志：</p>
<div class="highlight highlight-source-shell"><pre>ERRO[2019-07-09T02:00:58.717968000+08:00] stream copy error: reading from a closed fifo
ERRO[2019-07-09T02:01:00.342200600+08:00] f91be3566b127aa49acc2021701035b2fadfa709a313d3f255999471ae309924 cleanup: failed to delete container from containerd: no such container
ERRO[2019-07-09T02:01:00.451686200+08:00] Handler <span class="pl-k">for</span> POST /v1.39/containers/f91be3566b127aa49acc2021701035b2fadfa709a313d3f255999471ae309924/start returned error: OCI runtime create failed: container_linux.go:345: starting container process caused <span class="pl-s"><span class="pl-pds">"</span>process_linux.go:303: getting the final child's pid from pipe caused <span class="pl-cce">\"</span>EOF<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>: unknown</pre></div>
<p>安装低版本的就好了</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 安装指定版本</span>
<span class="pl-c"><span class="pl-c">#</span> 参考 https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-engine---community-1</span>
apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu</pre></div>
</li>
</ul>
<h3>最终方案 ( <a href="https://github.com/Microsoft/WSL/issues/2291#issuecomment-495166758" data-hovercard-type="issue" data-hovercard-url="/microsoft/WSL/issues/2291/hovercard">参考</a> )</h3>
<hr>
<ul>
<li>
<p>安装 <strong>Docker</strong></p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 安装依赖</span>
sudo apt -y install cgroupfs-mount libltdl7
<span class="pl-c"><span class="pl-c">#</span> 下载安装包</span>
wget -O /tmp/docker-ce.deb https://download.docker.com/linux/ubuntu/dists/xenial/pool/stable/amd64/docker-ce_17.09.0~ce-0~ubuntu_amd64.deb
<span class="pl-c"><span class="pl-c">#</span> 安装</span>
sudo dpkg -i /tmp/docker-ce.deb
<span class="pl-c"><span class="pl-c">#</span> 卸载</span>
<span class="pl-c"><span class="pl-c">#</span> apt remove -y docker-ce</span>
<span class="pl-c"><span class="pl-c">#</span> 新建 docker 用户组 ( 安装 docker 的时候默认应该会添加这个用户组 )</span>
<span class="pl-c"><span class="pl-c">#</span> sudo groupadd docker</span>
<span class="pl-c"><span class="pl-c">#</span> 将当前用户加入docker组</span>
sudo usermod -aG docker <span class="pl-smi">${USER}</span>
<span class="pl-c"><span class="pl-c">#</span> 刷新 docker 组成员 ( 免 sudo 执行 docker 命令 )</span>
newgrp - docker</pre></div>
</li>
<li>
<p>修改配置文件</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 修改 /etc/default/docker</span>
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">'</span>DOCKER_OPTS="-H=unix:///var/run/docker.sock -H=0.0.0.0:2375 --iptables=false"<span class="pl-pds">'</span></span> <span class="pl-k">&gt;&gt;</span> /etc/default/docker
<span class="pl-c"><span class="pl-c">#</span> 修改 docker.service</span>
sed -i <span class="pl-s"><span class="pl-pds">'</span>s#^ExecStart=.*#EnvironmentFile=-/etc/default/docker\nExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS#<span class="pl-pds">'</span></span> /lib/systemd/system/docker.service</pre></div>
</li>
<li>
<p>启动 <strong>Docker</strong> ( 使用 <strong>管理员权限</strong> 打开 <strong>CMD</strong> 或者 <strong>PowerShell</strong> 来运行 <strong>WSL</strong> )</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 加载 cgroupfs</span>
sudo cgroupfs-mount
<span class="pl-c"><span class="pl-c">#</span> 启动服务</span>
sudo service docker start
<span class="pl-c"><span class="pl-c">#</span> 配合计划任务，自行设置开机启动</span></pre></div>
<p>查看状态：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> docker version</span>
Client:
 Version:      17.09.0-ce
 API version:  1.32
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:42:18 2017
 OS/Arch:      linux/amd64

Server:
 Version:      17.09.0-ce
 API version:  1.32 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:40:56 2017
 OS/Arch:      linux/amd64
 Experimental: <span class="pl-c1">false</span>
 
<span class="pl-c"><span class="pl-c">#</span> docker info</span>
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 0
Server Version: 17.09.0-ce
Storage Driver: overlay2
 Backing Filesystem: <span class="pl-k">&lt;</span>unknown<span class="pl-k">&gt;</span>
 Supports d_type: <span class="pl-c1">true</span>
 Native Overlay Diff: <span class="pl-c1">true</span>
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: <span class="pl-k">local</span>
 Network: bridge host macvlan null overlay
 Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: 06b9cb35161009dcb7123345749fef02f7cea8e0
runc version: 3f2f8b84a77f73d38244dd690525642a72156c64
init version: 949e6fa
Kernel Version: 4.4.0-17134-Microsoft
Operating System: Ubuntu 16.04.2 LTS
OSType: linux
Architecture: x86_64
CPUs: 8
Total Memory: 15.89GiB
Name: DESKTOP-31U4I5S
ID: 35XV:BUEF:HFQE:DFHI:5HVO:Y40P:2E2V:DC3L:YBAK:JGKR:WD34:OYPZ
Docker Root Dir: /var/lib/docker
Debug Mode (client): <span class="pl-c1">false</span>
Debug Mode (server): <span class="pl-c1">false</span>
Registry: https://index.docker.io/v1/
Experimental: <span class="pl-c1">false</span>
Insecure Registries:
 127.0.0.0/8
Live Restore Enabled: <span class="pl-c1">false</span>

WARNING: No memory limit support
WARNING: No swap limit support
WARNING: No kernel memory limit support
WARNING: No oom <span class="pl-c1">kill</span> disable support
WARNING: No cpu cfs quota support
WARNING: No cpu cfs period support
WARNING: No cpu shares support
WARNING: No cpuset support</pre></div>
<p>启动容器看下效果：</p>
<div class="highlight highlight-source-shell"><pre>docker run -it --rm hello-world
docker run -it --rm --name nginx --network host nginx
curl 127.0.0.1</pre></div>
</li>
</ul>
<h3>启动服务遇到的问题</h3>
<hr>
<ul>
<li>
<p>最初，直接启动 <strong>dockerd</strong> 会报下面的错误：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> dockerd</span>
INFO[2019-07-05T16:46:00.707322400+08:00] libcontainerd: new containerd process, pid: 1573
WARN[0000] containerd: low RLIMIT_NOFILE changing to max  current=1024 max=65536
INFO[2019-07-05T16:46:01.739948500+08:00] [graphdriver] using prior storage driver: overlay2
INFO[2019-07-05T16:46:01.782012800+08:00] Graph migration to content-addressability took 0.00 seconds
WARN[2019-07-05T16:46:01.782616800+08:00] Your kernel does not support cgroup memory limit
WARN[2019-07-05T16:46:01.782894700+08:00] Unable to find cpu cgroup <span class="pl-k">in</span> mounts
WARN[2019-07-05T16:46:01.783166700+08:00] Unable to find blkio cgroup <span class="pl-k">in</span> mounts
WARN[2019-07-05T16:46:01.783375800+08:00] Unable to find cpuset cgroup <span class="pl-k">in</span> mounts
WARN[2019-07-05T16:46:01.783676600+08:00] mountpoint <span class="pl-k">for</span> pids not found
Error starting daemon: Devices cgroup isn<span class="pl-s"><span class="pl-pds">'</span>t mounted</span></pre></div>
<p>解决办法：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 安装并挂载 cgroup</span>
sudo apt -y install cgroupfs-mount
sudo cgroupfs-mount</pre></div>
</li>
<li>
<p>再启动还会报错：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 使用非管理员权限运行</span>
Error starting daemon: Error initializing network controller: error obtaining controller instance: failed to create NAT chain: iptables failed: iptables -t nat -N DOCKER: iptables v1.6.0: can<span class="pl-s"><span class="pl-pds">'</span>t initialize iptables table `nat<span class="pl-pds">'</span></span>: Table does not exist (do you need to insmod<span class="pl-k">?</span>)
Perhaps iptables or your kernel needs to be upgraded.
 (exit status 3)
 
<span class="pl-c"><span class="pl-c">#</span> 使用管理员权限运行</span>
Error starting daemon: Error initializing network controller: Error creating default <span class="pl-s"><span class="pl-pds">"</span>bridge<span class="pl-pds">"</span></span> network: Failed to Setup IP tables: Unable to <span class="pl-c1">enable</span> NAT rule:  (iptables failed: iptables --wait -t nat -I POSTROUTING -s 172.19.0.0/16 <span class="pl-k">!</span> -o docker0 -j MASQUERADE: iptables: Invalid argument. Run <span class="pl-s"><span class="pl-pds">`</span>dmesg<span class="pl-s"><span class="pl-pds">'</span> for more information.</span></span>
<span class="pl-s"><span class="pl-s"> (exit status 1))</span></span></pre></div>
<p>原因是 <strong>iptables</strong> 功能缺失，禁用就好了 ( <a href="https://github.com/Microsoft/WSL/issues/2291#issuecomment-475894869" data-hovercard-type="issue" data-hovercard-url="/microsoft/WSL/issues/2291/hovercard">参考</a> ) 。</p>
<div class="highlight highlight-source-shell"><pre>dockerd --iptables=false</pre></div>
<p>其实，只有针对 <strong>172.17.0.0/16</strong> 网段执行时不会报错的，而且 <strong>MASQUERADE</strong> 规则是可以生效的 ( 容器可以访问外网 ) 。</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> iptables --wait -t nat -I POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</span>
<span class="pl-c"><span class="pl-c">#</span> iptables --wait -t nat -I POSTROUTING -s 172.19.0.0/16 ! -o docker0 -j MASQUERADE</span>
iptables: No chain/target/match by that name.</pre></div>
<p>所以，安装完 <strong>docker</strong> 后先不禁用 <strong>iptables</strong> 来启动一遍 <strong>dockerd</strong> ，让它自动生成 <strong>docker0</strong> 网络并自动配置 <strong>SNAT</strong> ，之后就禁用 <strong>iptables</strong> 启动 <strong>dockerd</strong> ，这样用到 <strong>docker-compose</strong> 或者创建其他网桥网络时就不会报错了，只不过其他网络无法访问外网 ( 这个问题后面来解决 ) 。</p>
</li>
<li>
<p>然后还会报错：</p>
<div class="highlight highlight-source-shell"><pre>Error starting daemon: Error initializing network controller: Error creating default <span class="pl-s"><span class="pl-pds">"</span>bridge<span class="pl-pds">"</span></span> network: permission denied</pre></div>
<p>原因是创建网桥的命令权限不足，比如第一次创建的 <strong>docker0</strong> 和 之后使用 <code>docker network create</code> 命令创建的自定义网络都需要 <strong>管理员权限</strong> 。</p>
<p><strong>解决办法</strong>: 以 <strong>管理员权限</strong> 打开 <strong>CMD</strong> 来运行 <strong>dockerd</strong> 。</p>
<p>顺带提一点，<strong>WSL</strong> 下有些缺失的功能可能已经实现了部分实验功能 ( <a href="https://github.com/microsoft/WSL/issues/767#issuecomment-392944625" data-hovercard-type="issue" data-hovercard-url="/microsoft/WSL/issues/767/hovercard">比如</a> ) ，在 <strong>管理员权限</strong> 下可以试试看。</p>
</li>
</ul>
<h3>网络配置</h3>
<hr>
<ul>
<li>
<p><strong>ping</strong> 容器</p>
<p><strong>Windows</strong> 防火墙添加入站规则 - <strong>ICMPv4</strong> 类型的协议 ( <a href="https://blog.csdn.net/wy_bk/article/details/85013933" rel="nofollow">参考</a> )</p>
</li>
<li>
<p>端口映射的问题</p>
<p>比如启动一个 <strong>Nginx</strong> 服务，做端口映射，在 <strong>Win10 1803</strong> 上会发现无法访问 <strong>127.0.0.1:3000</strong></p>
<div class="highlight highlight-source-shell"><pre>docker run -it --rm -p 3000:80 nginx</pre></div>
<p>接着在 <strong>Win10 1809</strong> 上试了是可以访问的，然而换成 <strong>Tomcat</strong> 容器后就又不行了，而且 <strong>宿主机</strong> 也无法通过 <strong>容器</strong> 的 <strong>内网 IP + 端口</strong> 来访问，怀疑是网桥或者路由表的配置有缺失。于是定制了一个安装各种网络工具包的镜像进行各种测试，发现把 <strong>Tomcat</strong> 的监听端口改为 <strong>80</strong> 就可以了。通过这个现象想起来可能是防火墙的原因，而 <strong>WSL</strong> 中 <strong>iptables</strong> 功能有缺失应该是不起作用的，那么问题应该是出在 <strong>Win10</strong> 的防火墙上。果然，在防火墙中添加 <strong>入站规则</strong> 放行容器中的监听端口 ( 比如 <strong>8080</strong> ) 就解决了，我猜应该是容器中使用了 <strong>Windows</strong> 下的防火墙做拦截，而 <strong>宿主机</strong> 却被当成了外来者。</p>
<p><strong>注意：</strong></p>
<ul>
<li>可以简单粗暴的把 <strong>Windows</strong> 下的防火墙先关掉测试。</li>
<li>如果不生效，可以考虑重启 <strong>容器</strong> 、<strong>Docker 服务</strong> 或者电脑。</li>
</ul>
</li>
<li>
<p>容器访问外网</p>
<p>上面也提到了 <strong>iptables</strong> 功能缺失，就做不了 <strong>源网络地址转换 ( SNAT / MASQUERADE )</strong> ，这就导致了容器不能访问外网 ( 容器之间也无法跨网路访问 ) 。</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 新建一个自定义网络</span>
docker network create --subnet 172.18.0.0/16 test_net</pre></div>
<p>目前有两种不是很完美的办法来临时解决：</p>
<ul>
<li>
<p>在宿主机搭建代理服务器，在容器中使用代理连接：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 注意: 使用 host 网络</span>
<span class="pl-c"><span class="pl-c">#</span> 另外，防火墙需要按上文方法设置，否则其他容器无法访问宿主机的 8888 端口</span>
docker run -d --name gost --restart always --network host ginuerzh/gost -L=:8888</pre></div>
<p>启动容器的时候配置环境变量 <code>http_proxy</code> 和 <code>https_proxy</code></p>
<div class="highlight highlight-source-shell"><pre>docker run -it --rm --network test_net --entrypoint sh -e http_proxy=http://172.18.0.1:8888 -e https_proxy=http://172.18.0.1:8888 appropriate/curl
curl https://baidu.com</pre></div>
<p>当然，也可以修改配置文件，对之后启动的所有容器生效 ( <a href="https://docs.docker.com/network/proxy/" rel="nofollow">参考</a> )</p>
<div class="highlight highlight-source-shell"><pre>cat <span class="pl-k">&gt;</span> <span class="pl-k">~</span>/.docker/config.json <span class="pl-s"><span class="pl-k">&lt;&lt;</span><span class="pl-k">EOF</span></span>
<span class="pl-s">{</span>
<span class="pl-s"> "proxies":</span>
<span class="pl-s"> {</span>
<span class="pl-s">   "default":</span>
<span class="pl-s">   {</span>
<span class="pl-s">     "httpProxy": "http://172.18.0.1:8888",</span>
<span class="pl-s">     "httpsProxy": "http://172.18.0.1:8888"</span>
<span class="pl-s">   }</span>
<span class="pl-s"> }</span>
<span class="pl-s">}</span>
<span class="pl-s"><span class="pl-k">EOF</span></span></pre></div>
<p>这种方式仅限于 <strong>HTTP</strong> 请求 ( 而且只能使用当前网络的网关 <strong>IP</strong> 来访问代理 ) ，换成低层次的 <strong>TCP</strong> 或者 <strong>UDP</strong> 通讯可能就不行了。</p>
</li>
<li>
<p>类似于 <strong>Windows</strong> 上开 <strong>WiFi 共享</strong> 的操作。</p>
<p><strong>Docker</strong> 创建网络时对应会在 <strong>Windows</strong> 下创建网卡 ( 比如 <strong>IP</strong> 为 <strong>172.18.0.1</strong> ) ，只要把无线网卡或者有线网卡的网络共享给这个新建的网卡，容器就可以通过本地网卡来访问外网了。</p>
<p>具体步骤：</p>
<div class="highlight highlight-source-shell"><pre>1. 在指定网络下启动一个容器 ( 先启动容器再共享网络很重要，否则后面可能不会起作用 )
   docker run -it --rm --network test_net --entrypoint sh -v /etc/resolv.conf:/etc/resolv.conf appropriate/curl
2. Windows 下进入<span class="pl-s"><span class="pl-pds">"</span>控制面板\网络和 Internet\网络连接<span class="pl-pds">"</span></span>
3. 查找网桥 ( 172.18.0.1 ) 对应的网卡，比如 {357fbf18-4a4d-4e22-bf01-43b601b650bd}
4. 选中可用的本地网卡 ( 有线或者无线 ) 右键属性
5. 点击<span class="pl-s"><span class="pl-pds">"</span>共享<span class="pl-pds">"</span></span>选项卡
6. 勾选<span class="pl-s"><span class="pl-pds">"</span>允许其他网络用户通过此计算机的 Internet 连接来连接<span class="pl-pds">"</span></span>，并在下拉框选择上面找到的那个网卡
7. 测试 curl baidu.com</pre></div>
<p>这种方式比起前一种方式支持的网络更完善，缺点就是只能共享网络给一个网卡，而且无法访问其他网络的容器。</p>
<p>如果使用域名无法访问，可能是容器内 <strong>DNS</strong> 解析失败，换个 <strong>DNS</strong> 服务器 ( <strong>/etc/resolv.conf</strong> ) 。</p>
</li>
</ul>
</li>
</ul>
<p>另外，还遇到过一个不是必现的问题，网桥有时候会变成 <strong>169.254.158.185/16</strong> 这种很神奇的 <strong>IP</strong> ，暂时还没找到原因。如果遇到这个问题，可以关掉 <strong>Docker</strong> 后手动删除网桥，让它重新创建。</p>
<p><strong>其实，网络问题的排查无非就是几个点：端口监听，IP 分配、路由表、防火墙、DNS、NAT 。</strong></p>
<h3>其他问题</h3>
<hr>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <a href="https://www.daocloud.io/mirror#accelerator-doc" rel="nofollow">镜像加速器</a> 可能会不能正常使用 ( <code>1803</code> + <code>17.09.1+</code>  )</p>
<p>表现形式为 <strong>pull</strong> 镜像的时候先从 <strong>镜像站</strong> 下载一遍，再回 <strong>官方源站</strong> 下载一遍。</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> docker pull hello-world</span>
Using default tag: latest
latest: Pulling from library/hello-world
1b930d010525: Extracting [<span class="pl-k">==================================================&gt;</span>]     977B/977B
latest: Pulling from library/hello-world
1b930d010525: Extracting [<span class="pl-k">==================================================&gt;</span>]     977B/977B
failed to register layer: Error processing tar file(exit status 1): invalid argument</pre></div>
<p>暂无解决办法，如果 <strong>源站</strong> 下载过慢可以使用 <strong>HTTP 代理</strong> 或者 <strong>VPN</strong> 。</p>
</li>
<li class="task-list-item">
<p><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 关于 <strong>WSL</strong> 下 <strong>docker-compose</strong> 的用法和问题参考我的另一篇 <a href="https://www.jianshu.com/p/410ea6e0b13a" rel="nofollow">文章</a> 。</p>
</li>
<li class="task-list-item">
<p><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 不支持 <strong>docker exec</strong> 命令</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> docker exec -it nginx sh</span>
oci runtime error: <span class="pl-c1">exec</span> failed: container_linux.go:265: starting container process caused <span class="pl-s"><span class="pl-pds">"</span>could not create session key: function not implemented<span class="pl-pds">"</span></span></pre></div>
<p>解决办法: 使用 <a href="https://github.com/jpetazzo/nsenter">nsenter</a> 命令进入容器 ( <a href="https://www.jianshu.com/p/8ba9a1a17673" rel="nofollow">参考</a> )</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 设置容器名或者id</span>
NAME=nginx
<span class="pl-c"><span class="pl-c">#</span> 进入容器</span>
sudo nsenter -p -i -u -m -n -t <span class="pl-s"><span class="pl-pds">`</span>docker inspect -f {{.State.Pid}} <span class="pl-smi">${NAME}</span><span class="pl-pds">`</span></span> sh</pre></div>
<p>应该已经内置 <code>nsenter</code> 命令了，如果没有的话自行安装。</p>
<p>可以写一个函数来简化调用：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 添加函数</span>
cat <span class="pl-k">&gt;&gt;</span> <span class="pl-k">~</span>/.bashrc <span class="pl-s"><span class="pl-k">&lt;&lt;</span> "<span class="pl-k">EOF</span>"</span>
<span class="pl-s"></span>
<span class="pl-s">function docker-exec {</span>
<span class="pl-s">    name=$1</span>
<span class="pl-s">    shift</span>
<span class="pl-s">    nsenter -p -i -u -m -n -t `docker inspect -f {{.State.Pid}} ${name}` "$@"</span>
<span class="pl-s">}</span>
<span class="pl-s"><span class="pl-k">EOF</span></span>

<span class="pl-c"><span class="pl-c">#</span> 重新加载配置</span>
<span class="pl-c1">.</span> <span class="pl-k">~</span>/.bashrc</pre></div>
<p>再次调用就简单多了：</p>
<div class="highlight highlight-source-shell"><pre>docker-exec nginx sh</pre></div>
</li>
<li class="task-list-item">
<p><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> 容器内文件读写权限有问题</p>
<p>可能是文件系统的问题也可能是容器用户的权限问题</p>
<p>比如运行数据库之类的容器会提示权限不足的错误，比如：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> docker run -it --rm --network host neo4j</span>
Active database: graph.db
/var/lib/neo4j/bin/neo4j: line 283: cannot create temp file <span class="pl-k">for</span> here-document: Permission denied</pre></div>
<p>从错误信息看出是 <strong>tmp</strong> 目录没有权限，可以在启动容器的时候使用 <strong>挂载数据卷</strong> 的方式来解决：</p>
<div class="highlight highlight-source-shell"><pre>docker run -it --rm --network host -v /tmp:/tmp -v <span class="pl-k">~</span>/.neo4j/certificates:/var/lib/neo4j/certificates neo4j</pre></div>
<p><strong>当然，权限不足的目录可能不止这么一个，需要自己一个个去排查，还是比较麻烦的。</strong></p>
</li>
<li class="task-list-item">
<p><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> 非 <strong>docker0</strong> 网络下 <strong>--link</strong> 失效 ( 不会写入配置到 <strong>/etc/hosts</strong> 中 )</p>
</li>
</ul>
<h3>其他玩法</h3>
<hr>
<p>查资料的过程中发现了另一篇文章—— <a href="https://www.v2ex.com/t/559536" rel="nofollow">用 WSL 运行 Docker 镜像</a> ，虽然没有跑通文章中的例子，但是思路还是很有启发性的。从文章中用法来看，<strong>WSL</strong> 的架构和 <strong>Docker</strong> 还是比较类似的，<strong>WSL</strong> 提供基本的 <strong>内核</strong> ，商店中的各种 <strong>发行版</strong> 等价于 <strong>镜像</strong> 用来提供系统目录和软件包，而每个 <strong>WSL</strong> 实例则等价于 <strong>容器</strong> 。</p>
<p>如果 <strong>WSL</strong> 后续能够原生支持从 <strong>Docker Hub</strong> 下载镜像，同时支持类似于 <strong>Docker</strong> 一样的命令来管理 <strong>WSL</strong> 实例，岂不是一件很酷的事？</p>
<h3>参考文章</h3>
<hr>
<ul>
<li>
<p><a href="https://medium.com/faun/docker-running-seamlessly-in-windows-subsystem-linux-6ef8412377aa" rel="nofollow">Docker Running Seamlessly in Windows Subsystem Linux</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/LiangSW/p/9842295.html" rel="nofollow">wsl中使用原生docker</a></p>
</li>
<li>
<p><a href="https://github.com/Microsoft/WSL/issues/2291#issuecomment-383698720" data-hovercard-type="issue" data-hovercard-url="/microsoft/WSL/issues/2291/hovercard">WSL/issues/2291#issuecomment-383698720</a></p>
</li>
<li>
<p><a href="https://www.reddit.com/r/bashonubuntuonwindows/comments/8cvr27/docker_is_running_natively_on_wsl/" rel="nofollow">docker is running natively on wsl</a></p>
</li>
<li>
<p><a href="https://www.jianshu.com/nb/13876015" rel="nofollow">Docker 相关资料</a></p>
</li>
</ul>
<h3>写在最后</h3>
<hr>
<p>在 <strong>WSL</strong> 上成功运行 <strong>Docker</strong> 其实就几分钟的事，不过为了解决上面提到的一些问题又断断续续花了几天时间，重装了几十遍 <strong>WSL</strong>，也不断测试并修正了文中的例子，希望没有纰漏吧。</p>
<p>自从写完 <a href="https://www.jianshu.com/p/bc38ed12da1d" rel="nofollow">Windows10内置Linux子系统初体验</a> 一文已是两年过去了，见证了 <strong>WSL</strong> 从鸡肋到现在基本满足使用的过程，虽然还不是很完美，但它一直在不断完善，而我也会持续关注并更新下去。</p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/20ebdbf68744">https://www.jianshu.com/p/20ebdbf68744</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-29T15:47:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot 集成 Neo4j]]></title>
        <id>35</id>
        <link href="https://anyesu.github.io/blog/articles/35"/>
        <updated>2019-09-29T15:06:01.000Z</updated>
        <summary type="html"><![CDATA[文档未完成，参考 源码]]></summary>
        <content type="html"><![CDATA[<p>文档未完成，参考 <a href="https://github.com/anyesu/spring-boot-demo/tree/master/spring-boot-demo-neo4j">源码</a></p>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-29T15:06:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot 实体类巧用 JSON 类型字段]]></title>
        <id>34</id>
        <link href="https://anyesu.github.io/blog/articles/34"/>
        <updated>2019-09-29T15:03:16.000Z</updated>
        <summary type="html"><![CDATA[前言 在上一篇 文章 中已经介绍了 枚举 类型字段的使用，本文接着介绍 JSON 类型字段的使用。 关于 JSON 类型 ( 参考 ) Mysql 5.7 版本 起增加了对 JSON 类型的支持，表现形式类似于加了 JSON 格式校验的 longtext 。有了这个类型我们就可以存储一些非固定的数据结构来灵活应对多变的业务。 使用 拿订单业务举例，一个订单允许购买多件商品，通常会定义两张表，一张 ]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>在上一篇 <a href="https://www.jianshu.com/p/34212407037e" rel="nofollow">文章</a> 中已经介绍了 <strong>枚举</strong> 类型字段的使用，本文接着介绍 <strong>JSON</strong> 类型字段的使用。</p>
<h3>关于 JSON 类型 ( <a href="https://www.cnblogs.com/ooo0/p/9309277.html" rel="nofollow">参考</a> )</h3>
<hr>
<p><strong>Mysql 5.7 版本</strong> 起增加了对 <strong>JSON</strong> 类型的支持，表现形式类似于加了 <strong>JSON</strong> 格式校验的 <strong>longtext</strong> 。有了这个类型我们就可以存储一些非固定的数据结构来灵活应对多变的业务。</p>
<h3>使用</h3>
<hr>
<p>拿订单业务举例，一个订单允许购买多件商品，通常会定义两张表，一张 <strong>订单表</strong> 和一张 <strong>订单商品表</strong> ，然后进行关联查询。</p>
<ul>
<li>
<p>如果用了 <strong>JSON</strong> 类型就只需一张表了：</p>
<div class="highlight highlight-source-sql"><pre><span class="pl-k">DROP</span> <span class="pl-k">TABLE</span> IF EXISTS <span class="pl-s"><span class="pl-pds">`</span>order<span class="pl-pds">`</span></span>;
<span class="pl-k">CREATE</span> <span class="pl-k">TABLE</span> `<span class="pl-en">order</span>` (
  id <span class="pl-k">int</span>(<span class="pl-c1">11</span>) <span class="pl-k">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="pl-s"><span class="pl-pds">'</span>主键<span class="pl-pds">'</span></span>,
  orderNo <span class="pl-k">varchar</span>(<span class="pl-c1">40</span>) <span class="pl-k">NOT NULL</span> COMMENT <span class="pl-s"><span class="pl-pds">'</span>订单号<span class="pl-pds">'</span></span>,
  status <span class="pl-k">tinyint</span>(<span class="pl-c1">1</span>) <span class="pl-k">NOT NULL</span> COMMENT <span class="pl-s"><span class="pl-pds">'</span>订单状态<span class="pl-pds">'</span></span>,
  address json <span class="pl-k">NOT NULL</span> COMMENT <span class="pl-s"><span class="pl-pds">'</span>收货地址<span class="pl-pds">'</span></span>,
  orderGoods json <span class="pl-k">NOT NULL</span> COMMENT <span class="pl-s"><span class="pl-pds">'</span>订单商品<span class="pl-pds">'</span></span>,
  <span class="pl-k">PRIMARY KEY</span> (id)
) ENGINE<span class="pl-k">=</span>InnoDB DEFAULT CHARSET<span class="pl-k">=</span>utf8;</pre></div>
<p><strong>注意: 请结合实际情况设计表结构，此处是为了演示效果。</strong></p>
</li>
<li>
<p>对应实体类 :</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@Data</span>
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">Order</span> <span class="pl-k">implements</span> <span class="pl-e">Serializable</span> {

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 订单号</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-smi">String</span> orderNo;

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 订单状态</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-smi">Status</span> status;

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 收货地址</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-smi">Address</span> address;

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 订单商品</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-k">List&lt;<span class="pl-smi">OrderGoods</span>&gt;</span> orderGoods;

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 序列化时显示状态描述</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@return</span></span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getStatusDesc</span>() {
        <span class="pl-k">return</span> status <span class="pl-k">==</span> <span class="pl-c1">null</span> <span class="pl-k">?</span> <span class="pl-c1">null</span> <span class="pl-k">:</span> status<span class="pl-k">.</span>desc();
    }
    
}</pre></div>
</li>
<li>
<p>地址类：</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@Data</span>
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">Address</span> <span class="pl-k">implements</span> <span class="pl-e">Serializable</span> {

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 手机</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-smi">String</span> mobile;

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 收货人姓名</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-smi">String</span> receiver;

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 详细地址</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-smi">String</span> adr;
    
}</pre></div>
</li>
</ul>
<h3>DAO 层处理</h3>
<hr>
<p>由于使用 <strong>Mybatis</strong> 作为 <strong>ORM</strong> 框架，这里使用 <strong>Mybatis</strong> 提供的 <strong>TypeHandler</strong> 实现 <strong>枚举类型</strong> 的 <strong>序列化</strong> 和 <strong>反序列化</strong> 。</p>
<ul>
<li>
<p>实现一个自定义的通用的 <strong>TypeHandler</strong></p>
<div class="highlight highlight-source-java"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * JSON 类型-类型转换器</span>
<span class="pl-c"> * &lt;<span class="pl-ent">p</span>&gt;</span>
<span class="pl-c"> * 由于 Mybatis 对泛型嵌套做了处理，T 为泛型类型时会被转为 rawType，所以要注意以下两点：</span>
<span class="pl-c"> * &lt;<span class="pl-ent">p</span>&gt;</span>
<span class="pl-c"> * 1. 不要使用父类的 rawType 属性，使用本类的 type 属性来做类型转换</span>
<span class="pl-c"> * 2. 需要做类型转换的字段要指定 TypeHandler，而不能由 Mybatis 自动查找</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@author</span> anyesu</span>
<span class="pl-c"> * <span class="pl-k">@see</span> org.apache.ibatis.type.TypeReference#getSuperclassTypeParameter</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">@Slf4j</span>
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">JsonTypeHandler</span>&lt;T&gt; <span class="pl-k">extends</span> <span class="pl-e">BaseTypeHandler&lt;<span class="pl-smi">T</span>&gt;</span> {

    <span class="pl-k">private</span> <span class="pl-k">final</span> <span class="pl-smi">Type</span> type;

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 只能由子类调用</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">protected</span> <span class="pl-en">JsonTypeHandler</span>() {
        type <span class="pl-k">=</span> <span class="pl-smi">GenericsUtils</span><span class="pl-k">.</span>getSuperClassGenericType(getClass());
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 由 Mybatis 根据类型动态生成实例</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@param</span> type</span>
<span class="pl-c">     * <span class="pl-k">@see</span> org.apache.ibatis.type.TypeHandlerRegistry#getInstance(Class, Class)</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">public</span> <span class="pl-en">JsonTypeHandler</span>(<span class="pl-k">Class&lt;<span class="pl-smi">T</span>&gt;</span> <span class="pl-v">rawClass</span>) {
        <span class="pl-c1">this</span><span class="pl-k">.</span>type <span class="pl-k">=</span> rawClass;
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setNonNullParameter</span>(<span class="pl-smi">PreparedStatement</span> <span class="pl-v">ps</span>, <span class="pl-k">int</span> <span class="pl-v">i</span>, <span class="pl-smi">T</span> <span class="pl-v">parameter</span>, <span class="pl-smi">JdbcType</span> <span class="pl-v">jdbcType</span>) <span class="pl-k">throws</span> <span class="pl-smi">SQLException</span> {
        ps<span class="pl-k">.</span>setString(i, <span class="pl-c1">this</span><span class="pl-k">.</span>toJson(parameter));
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-smi">T</span> <span class="pl-en">getNullableResult</span>(<span class="pl-smi">ResultSet</span> <span class="pl-v">rs</span>, <span class="pl-smi">String</span> <span class="pl-v">columnName</span>) <span class="pl-k">throws</span> <span class="pl-smi">SQLException</span> {
        <span class="pl-k">return</span> <span class="pl-c1">this</span><span class="pl-k">.</span>toObject(rs<span class="pl-k">.</span>getString(columnName));
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-smi">T</span> <span class="pl-en">getNullableResult</span>(<span class="pl-smi">ResultSet</span> <span class="pl-v">rs</span>, <span class="pl-k">int</span> <span class="pl-v">columnIndex</span>) <span class="pl-k">throws</span> <span class="pl-smi">SQLException</span> {
        <span class="pl-k">return</span> <span class="pl-c1">this</span><span class="pl-k">.</span>toObject(rs<span class="pl-k">.</span>getString(columnIndex));
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-smi">T</span> <span class="pl-en">getNullableResult</span>(<span class="pl-smi">CallableStatement</span> <span class="pl-v">cs</span>, <span class="pl-k">int</span> <span class="pl-v">columnIndex</span>) <span class="pl-k">throws</span> <span class="pl-smi">SQLException</span> {
        <span class="pl-k">return</span> <span class="pl-c1">this</span><span class="pl-k">.</span>toObject(cs<span class="pl-k">.</span>getString(columnIndex));
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 序列化</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@param</span> object</span>
<span class="pl-c">     * <span class="pl-k">@return</span></span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-smi">String</span> <span class="pl-en">toJson</span>(<span class="pl-smi">T</span> <span class="pl-v">object</span>) {
        <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-k">.</span>toJSONString(object);
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 反序列化</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@param</span> content</span>
<span class="pl-c">     * <span class="pl-k">@return</span></span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-smi">T</span> <span class="pl-en">toObject</span>(<span class="pl-smi">String</span> <span class="pl-v">content</span>) {
        <span class="pl-smi">T</span> object <span class="pl-k">=</span> <span class="pl-c1">null</span>;

        <span class="pl-k">if</span> (content <span class="pl-k">!=</span> <span class="pl-c1">null</span> <span class="pl-k">&amp;&amp;</span> content<span class="pl-k">.</span>length() <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {
            <span class="pl-k">try</span> {
                object <span class="pl-k">=</span> <span class="pl-c1">JSON</span><span class="pl-k">.</span>parseObject(content, getType());
            } <span class="pl-k">catch</span> (<span class="pl-smi">Exception</span> e) {
                log<span class="pl-k">.</span>error(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, e);
            }
        }

        <span class="pl-k">return</span> object;
    }

    <span class="pl-k">public</span> <span class="pl-smi">Type</span> <span class="pl-en">getType</span>() {
        <span class="pl-k">return</span> type;
    }

}</pre></div>
</li>
<li>
<p>注册 <strong>JsonTypeHandler</strong></p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@Configuration</span>
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">MybatisTypeHandlerConfiguration</span> {

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 注册 Mybatis 类型转换器</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">@Autowired</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">registerTypeHandlers</span>() {
        jsonTypes()<span class="pl-k">.</span>forEach(<span class="pl-c1">this</span><span class="pl-k">::</span>registerJsonTypeHandler);
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 注册 JSON 类型的类型转换器</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@param</span> javaTypeClass Java 类型</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-en">registerJsonTypeHandler</span>(<span class="pl-k">Class&lt;?&gt;</span> <span class="pl-v">javaTypeClass</span>) {
        register(javaTypeClass, <span class="pl-smi">JsonTypeHandler</span><span class="pl-k">.</span>class);
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 注册类型转换器</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@param</span> javaTypeClass    Java 类型</span>
<span class="pl-c">     * <span class="pl-k">@param</span> typeHandlerClass 类型转换器类型</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-en">register</span>(<span class="pl-k">Class&lt;?&gt;</span> <span class="pl-v">javaTypeClass</span>, <span class="pl-k">Class&lt;?&gt;</span> <span class="pl-v">typeHandlerClass</span>) {
        <span class="pl-c1">this</span><span class="pl-k">.</span>typeHandlerRegistry<span class="pl-k">.</span>register(javaTypeClass, typeHandlerClass);
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 简单 JSON 类型</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@return</span></span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-k">List&lt;<span class="pl-k">Class&lt;?&gt;</span>&gt;</span> <span class="pl-en">jsonTypes</span>() {
        <span class="pl-c"><span class="pl-c">//</span> TODO 这里为了方便就硬编码记录类型，自行替换扫描的方式</span>
        <span class="pl-k">return</span> <span class="pl-smi">Arrays</span><span class="pl-k">.</span>asList(<span class="pl-smi">Address</span><span class="pl-k">.</span>class);
    }

}</pre></div>
</li>
</ul>
<p>上面的方式只是注册了 <strong>Address</strong> 类的类型转换器，对于 <strong>List</strong> 这种 <strong>泛型类型</strong> 则无法使用这种方式注册，需要使用下面的方法：</p>
<ul>
<li>
<p>实现 <strong>JsonTypeHandler</strong> 的子类</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">OrderGoodsListTypeHandler</span> <span class="pl-k">extends</span> <span class="pl-e">JsonTypeHandler&lt;<span class="pl-k">List&lt;<span class="pl-smi">OrderGoods</span>&gt;</span>&gt;</span> {
}</pre></div>
</li>
<li>
<p>然后修改 <strong>application.yml</strong> 让 <strong>Mybatis</strong> 去扫描注册自定义的 <strong>TypeHandler</strong> :</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">mybatis</span>:
  <span class="pl-ent">type-handlers-package</span>: <span class="pl-s">com.github.anyesu.common.typehandler</span></pre></div>
</li>
<li>
<p>然后在 <strong>Mapper</strong> 中显式指定 <strong>typeHandler</strong></p>
<div class="highlight highlight-source-sql"><pre><span class="pl-k">&lt;</span><span class="pl-k">update</span> id<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>updateByPrimaryKey<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span>
    <span class="pl-k">update</span> <span class="pl-s"><span class="pl-pds">`</span>order<span class="pl-pds">`</span></span>
    <span class="pl-k">set</span> orderNo <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span>{orderNo},</span>
        status <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span>{status},</span>
        address <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span>{address},</span>
        orderGoods <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span>{orderGoods, typeHandler=com.github.anyesu.common.typehandler.OrderGoodsListTypeHandler}</span>
    <span class="pl-k">where</span> id <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span>{id}</span>
<span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-k">update</span><span class="pl-k">&gt;</span></pre></div>
<p><strong>注意: 如果 orderGoods 字段不指定 typeHandler 会被识别为 Object 类型并使用 ObjectTypeHandler 来转换，因此会导致错误。</strong></p>
<p>另外，如果使用了 <strong>set 标签</strong>，<strong>orderGoods</strong> 能被为 <strong>List</strong> 类型，而 <strong>OrderGoodsListTypeHandler</strong> 被注册为 <strong>List</strong> 类型的类型转换器，所以能正常执行。( 最好还是显式指定 <strong>typeHandler</strong> )</p>
<div class="highlight highlight-source-sql"><pre><span class="pl-k">&lt;</span><span class="pl-k">update</span> id<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>updateByPrimaryKeySelective<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span>
    <span class="pl-k">update</span> <span class="pl-s"><span class="pl-pds">`</span>order<span class="pl-pds">`</span></span>
    <span class="pl-k">&lt;</span><span class="pl-k">set</span><span class="pl-k">&gt;</span>
        <span class="pl-k">&lt;</span>if test<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>orderNo != null<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span>
            orderNo <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span>{orderNo},</span>
        <span class="pl-k">&lt;</span><span class="pl-k">/</span>if<span class="pl-k">&gt;</span>
        <span class="pl-k">&lt;</span>if test<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>status != null<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span>
            status <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span>{status},</span>
        <span class="pl-k">&lt;</span><span class="pl-k">/</span>if<span class="pl-k">&gt;</span>
        <span class="pl-k">&lt;</span>if test<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>address != null<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span>
            address <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span>{address},</span>
        <span class="pl-k">&lt;</span><span class="pl-k">/</span>if<span class="pl-k">&gt;</span>
        <span class="pl-k">&lt;</span>!<span class="pl-c"><span class="pl-c">--</span> 包裹在 set 标签内被正确识别为 List 类型 --&gt;</span>
        <span class="pl-k">&lt;</span>!<span class="pl-c"><span class="pl-c">--</span> 最好还是显式指定类型转换器 --&gt;</span>
        <span class="pl-k">&lt;</span>if test<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>orderGoods != null<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span>
            orderGoods <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span>{orderGoods}</span>
        <span class="pl-k">&lt;</span><span class="pl-k">/</span>if<span class="pl-k">&gt;</span>
    <span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-k">set</span><span class="pl-k">&gt;</span>
    <span class="pl-k">where</span> id <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span>{id}</span>
<span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-k">update</span><span class="pl-k">&gt;</span></pre></div>
</li>
</ul>
<h3>源码</h3>
<hr>
<p>篇幅有限，上面代码并不完整，点击 <a href="https://github.com/anyesu/spring-boot-demo/tree/master/spring-boot-demo-customized-field-type">这里</a> 查看完整代码。</p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/7d24167ccf6d">https://www.jianshu.com/p/7d24167ccf6d</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-29T15:03:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot 实体类巧用枚举类型字段]]></title>
        <id>33</id>
        <link href="https://anyesu.github.io/blog/articles/33"/>
        <updated>2019-09-29T14:47:08.000Z</updated>
        <summary type="html"><![CDATA[前言 定义表结构的时候经常会碰到一类字段：状态 ( status 或者 state ) 、类型 ( type ) ，而通常的做法一般是： 数据库 中定义 tinyint 类型。 比如：status tinyint(1) NOT NULL COMMENT '订单状态 1-待支付;2-待发货;3-待收货;4-已收货;5-已完结;' Java 实体类 中定义 Short 类型。( 也见识过用 Byte ]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>定义表结构的时候经常会碰到一类字段：<strong>状态</strong> ( <strong>status</strong> 或者 <strong>state</strong> ) 、<strong>类型</strong> ( <strong>type</strong> ) ，而通常的做法一般是：</p>
<ul>
<li>
<p><strong>数据库</strong> 中定义 <strong>tinyint</strong> 类型。</p>
<p>比如：<strong>status tinyint(1) NOT NULL COMMENT '订单状态 1-待支付;2-待发货;3-待收货;4-已收货;5-已完结;'</strong></p>
</li>
<li>
<p><strong>Java 实体类</strong> 中定义 <strong>Short</strong> 类型。( 也见识过用 <strong>Byte</strong> 类型的，看着怪怪的 )</p>
<p>比如：<strong>private Short status</strong></p>
</li>
</ul>
<p>然后项目中可能会充斥着下面这样的代码：</p>
<div class="highlight highlight-source-java"><pre>order<span class="pl-k">.</span>setStatus((<span class="pl-k">short</span>) <span class="pl-c1">1</span>);

<span class="pl-k">if</span> (order<span class="pl-k">.</span>getStatus() <span class="pl-k">==</span> <span class="pl-c1">1</span>) {
    order<span class="pl-k">.</span>setStatus((<span class="pl-k">short</span>) <span class="pl-c1">2</span>);
}

<span class="pl-k">if</span> (order<span class="pl-k">.</span>getStatus() <span class="pl-k">==</span> <span class="pl-c1">4</span>) {
    order<span class="pl-k">.</span>setStatusName(<span class="pl-s"><span class="pl-pds">"</span>已收货<span class="pl-pds">"</span></span>);
}</pre></div>
<p>这都是些什么魔鬼数字啊，没有注释根本没法看，如果手滑可能状态就设错了，而且不好排查是在哪处赋值的。</p>
<p>改进方案是用 <strong>常量</strong> ，但是又会产生另一种效果：</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-k">final</span> <span class="pl-smi">Short</span> <span class="pl-c1">WAIT_PAY</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>;

<span class="pl-k">if</span> (<span class="pl-c1">WAIT_PAY</span><span class="pl-k">.</span>equals(order<span class="pl-k">.</span>getStatus())) {
    <span class="pl-c"><span class="pl-c">//</span> 混用了解下</span>
    order<span class="pl-k">.</span>setStatus((<span class="pl-k">short</span>) <span class="pl-c1">2</span>);
}</pre></div>
<p>这时候就该 <strong>枚举</strong> 出场了，<strong>枚举</strong> 的本质就是 <strong>类 + 常量</strong> ，可以使用 <strong>枚举</strong> 来定义 <strong>一组</strong> 相关的元数据 ( 值、描述及其他必要信息 ) ，使用 <strong>枚举</strong> 类型不仅减小了数据维护 ( 比如调整了值的定义 ) 的成本，还加强了代码的 <strong>约束力</strong> 。</p>
<p>下文就来介绍如何在项目中 "完美" 使用 <strong>枚举</strong> 类型。</p>
<h3>需要修改的地方</h3>
<hr>
<ul>
<li>
<p>解析 <strong>RequestParam</strong> 将值转为 <strong>枚举</strong> 类型。( 只做反序列化 )</p>
</li>
<li>
<p>解析 <strong>RequestBody</strong> 将相应字段值转为 <strong>枚举</strong> 类型，<strong>ResponseBody</strong> 将 <strong>枚举</strong> 字段转为 <strong>实际的值</strong> 。</p>
</li>
<li>
<p>保存到数据库的时候将 <strong>枚举</strong> 值转换为 <strong>实际的值</strong> ，从数据库读取数据的时候将 <strong>实际的值</strong> 转为 <strong>枚举</strong> 值。</p>
</li>
</ul>
<p>主要是这三处地方的改动，其他地方按需调整。</p>
<h3>准备工作</h3>
<hr>
<ul>
<li>
<p>表结构：</p>
<div class="highlight highlight-source-sql"><pre><span class="pl-k">DROP</span> <span class="pl-k">TABLE</span> IF EXISTS <span class="pl-s"><span class="pl-pds">`</span>order<span class="pl-pds">`</span></span>;
<span class="pl-k">CREATE</span> <span class="pl-k">TABLE</span> `<span class="pl-en">order</span>` (
  id <span class="pl-k">int</span>(<span class="pl-c1">11</span>) <span class="pl-k">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="pl-s"><span class="pl-pds">'</span>主键<span class="pl-pds">'</span></span>,
  orderNo <span class="pl-k">varchar</span>(<span class="pl-c1">40</span>) <span class="pl-k">NOT NULL</span> COMMENT <span class="pl-s"><span class="pl-pds">'</span>订单号<span class="pl-pds">'</span></span>,
  status <span class="pl-k">tinyint</span>(<span class="pl-c1">1</span>) <span class="pl-k">NOT NULL</span> COMMENT <span class="pl-s"><span class="pl-pds">'</span>订单状态<span class="pl-pds">'</span></span>,
  <span class="pl-k">PRIMARY KEY</span> (id)
) ENGINE<span class="pl-k">=</span>InnoDB DEFAULT CHARSET<span class="pl-k">=</span>utf8;</pre></div>
</li>
<li>
<p>实体类：</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@Data</span>
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">Order</span> <span class="pl-k">implements</span> <span class="pl-e">Serializable</span> {

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 主键</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-smi">Integer</span> id;

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 订单号</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-smi">String</span> orderNo;

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 订单状态</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-smi">Status</span> status;
    
}</pre></div>
</li>
<li>
<p>枚举类：</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@AllArgsConstructor</span>
<span class="pl-k">public</span> <span class="pl-k">enum</span> <span class="pl-en">Status</span> <span class="pl-k">implements</span> <span class="pl-e">EnumValue</span> {

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 已取消</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-c1">CANCEL</span>((<span class="pl-k">short</span>) <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>已取消<span class="pl-pds">"</span></span>),

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 待支付</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-c1">WAIT_PAY</span>((<span class="pl-k">short</span>) <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>待支付<span class="pl-pds">"</span></span>),

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 待发货</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-c1">WAIT_TRANSFER</span>((<span class="pl-k">short</span>) <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>待发货<span class="pl-pds">"</span></span>),

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 待收货</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-c1">WAIT_RECEIPT</span>((<span class="pl-k">short</span>) <span class="pl-c1">3</span>, <span class="pl-s"><span class="pl-pds">"</span>待收货<span class="pl-pds">"</span></span>),

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 已收货</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-c1">RECEIVE</span>((<span class="pl-k">short</span>) <span class="pl-c1">4</span>, <span class="pl-s"><span class="pl-pds">"</span>已收货<span class="pl-pds">"</span></span>),

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 已完结</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-c1">COMPLETE</span>((<span class="pl-k">short</span>) <span class="pl-c1">5</span>, <span class="pl-s"><span class="pl-pds">"</span>已完结<span class="pl-pds">"</span></span>);

    <span class="pl-k">private</span> <span class="pl-k">final</span> <span class="pl-smi">Short</span> value;

    <span class="pl-k">private</span> <span class="pl-k">final</span> <span class="pl-smi">String</span> desc;

    <span class="pl-k">public</span> <span class="pl-smi">Short</span> <span class="pl-en">value</span>() {
        <span class="pl-k">return</span> value;
    }

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">desc</span>() {
        <span class="pl-k">return</span> desc;
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-smi">Object</span> <span class="pl-en">toValue</span>() {
        <span class="pl-k">return</span> value;
    }

}</pre></div>
</li>
<li>
<p>定义接口 <strong>EnumValue</strong> 来标识自定义的 <strong>枚举</strong> 类型。</p>
<p>同时它还负责 <strong>序列化</strong> 和 <strong>反序列化</strong> 枚举类，这是本文的 <strong>关键</strong> 。</p>
<div class="highlight highlight-source-java"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 自定义枚举类型基础接口</span>
<span class="pl-c"> * &lt;<span class="pl-ent">p</span>&gt;</span>
<span class="pl-c"> * 用于扫描、序列化、反序列化实际枚举类</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@author</span> anyesu</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">public</span> <span class="pl-k">interface</span> <span class="pl-en">EnumValue</span> {

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 序列化</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@return</span> 不允许返回 null</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-smi">Object</span> <span class="pl-en">toValue</span>();

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 反序列化</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@param</span> enumType 实际枚举类型</span>
<span class="pl-c">     * <span class="pl-k">@param</span> value    当前值</span>
<span class="pl-c">     * <span class="pl-k">@param</span> &lt;T&gt;      枚举类型并且实现 {<span class="pl-k">@link</span> EnumValue} 接口</span>
<span class="pl-c">     * <span class="pl-k">@return</span> 枚举常量</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">static</span> <span class="pl-k">&lt;<span class="pl-smi">T</span> extends <span class="pl-k">Enum&lt;<span class="pl-smi">T</span>&gt;</span> &amp; <span class="pl-smi">EnumValue</span>&gt;</span> <span class="pl-smi">T</span> <span class="pl-en">valueOf</span>(<span class="pl-k">Class&lt;<span class="pl-smi">T</span>&gt;</span> <span class="pl-v">enumType</span>, <span class="pl-smi">Object</span> <span class="pl-v">value</span>) {
        <span class="pl-k">if</span> (enumType <span class="pl-k">==</span> <span class="pl-c1">null</span> <span class="pl-k">||</span> value <span class="pl-k">==</span> <span class="pl-c1">null</span>) {
            <span class="pl-k">return</span> <span class="pl-c1">null</span>;
        }

        <span class="pl-k">T</span>[] enumConstants <span class="pl-k">=</span> enumType<span class="pl-k">.</span>getEnumConstants();
        <span class="pl-k">for</span> (<span class="pl-smi">T</span> enumConstant <span class="pl-k">:</span> enumConstants) {
            <span class="pl-smi">Object</span> enumValue <span class="pl-k">=</span> enumConstant<span class="pl-k">.</span>toValue();
            <span class="pl-k">if</span> (<span class="pl-smi">Objects</span><span class="pl-k">.</span>equals(enumValue, value)
                    <span class="pl-k">||</span> <span class="pl-smi">Objects</span><span class="pl-k">.</span>equals(enumValue<span class="pl-k">.</span>toString(), value<span class="pl-k">.</span>toString())) {
                <span class="pl-k">return</span> enumConstant;
            }
        }

        <span class="pl-k">return</span> <span class="pl-c1">null</span>;
    }

}</pre></div>
</li>
<li>
<p>用法：</p>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">Order</span> order <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">Order</span>();

<span class="pl-c"><span class="pl-c">//</span> 设置订单状态</span>
order<span class="pl-k">.</span>setStatus(<span class="pl-smi">Status</span><span class="pl-c1"><span class="pl-k">.</span>COMPLETE</span>);

<span class="pl-c"><span class="pl-c">//</span> 打印订单状态描述</span>
<span class="pl-smi">System</span><span class="pl-k">.</span>out<span class="pl-k">.</span>println(order<span class="pl-k">.</span>getStatus()<span class="pl-k">.</span>desc());</pre></div>
</li>
</ul>
<h3>解析 RequestParam</h3>
<hr>
<p>这部分比较简单。</p>
<ul>
<li>
<p>实现一个自定义的 <strong>Spring  Converter</strong> 就可以实现 <strong>数字或者字符串类型</strong> 到 <strong>枚举类型</strong> 的转换。</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">final</span> <span class="pl-k">class</span> <span class="pl-en">StringToEnumConverterFactory</span> <span class="pl-k">implements</span> <span class="pl-e">ConverterFactory&lt;<span class="pl-smi">String</span>, <span class="pl-smi">EnumValue</span>&gt;</span> {

    <span class="pl-k">@Override</span>
    <span class="pl-k">@SuppressWarnings</span>(<span class="pl-s"><span class="pl-pds">"</span>unchecked<span class="pl-pds">"</span></span>)
    <span class="pl-k">public</span> <span class="pl-k">&lt;<span class="pl-smi">T</span> extends <span class="pl-smi">EnumValue</span>&gt;</span> <span class="pl-k">Converter&lt;<span class="pl-smi">String</span>, <span class="pl-smi">T</span>&gt;</span> <span class="pl-en">getConverter</span>(<span class="pl-k">Class&lt;<span class="pl-smi">T</span>&gt;</span> <span class="pl-v">targetType</span>) {
        <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-smi">StringToEnum</span>(targetType);
    }

    <span class="pl-k">private</span> <span class="pl-k">class</span> <span class="pl-en">StringToEnum</span>&lt;T <span class="pl-k">extends</span> <span class="pl-e">Enum&lt;<span class="pl-smi">T</span>&gt;</span> &amp; <span class="pl-e">EnumValue</span>&gt; <span class="pl-k">implements</span> <span class="pl-e">Converter&lt;<span class="pl-smi">String</span>, <span class="pl-smi">T</span>&gt;</span> {

        <span class="pl-k">private</span> <span class="pl-k">final</span> <span class="pl-k">Class&lt;<span class="pl-smi">T</span>&gt;</span> enumType;

        <span class="pl-en">StringToEnum</span>(<span class="pl-k">Class&lt;<span class="pl-smi">T</span>&gt;</span> <span class="pl-v">enumType</span>) {
            <span class="pl-c1">this</span><span class="pl-k">.</span>enumType <span class="pl-k">=</span> enumType;
        }

        <span class="pl-k">@Override</span>
        <span class="pl-k">public</span> <span class="pl-smi">T</span> <span class="pl-en">convert</span>(<span class="pl-smi">String</span> <span class="pl-v">source</span>) {
            source <span class="pl-k">=</span> source<span class="pl-k">.</span>trim();<span class="pl-c"><span class="pl-c">//</span> 去除首尾空白字符</span>
            <span class="pl-k">return</span> source<span class="pl-k">.</span>isEmpty() <span class="pl-k">?</span> <span class="pl-c1">null</span> <span class="pl-k">:</span> <span class="pl-smi">EnumValue</span><span class="pl-k">.</span>valueOf(<span class="pl-c1">this</span><span class="pl-k">.</span>enumType, source);
        }
    }

}</pre></div>
</li>
<li>
<p>然后在 <strong>WebMvcConfigurer</strong> 中注册它</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@Override</span>
<span class="pl-k">public</span> <span class="pl-k">void</span> addFormatters(<span class="pl-smi">FormatterRegistry</span> registry) {
    registry<span class="pl-k">.</span>addConverterFactory(<span class="pl-k">new</span> <span class="pl-smi">StringToEnumConverterFactory</span>());
}</pre></div>
<p><strong>Spring</strong> 本身已经集成了 <strong>StringToEnumConverterFactory</strong> 对 <strong>Enum</strong> 类型进行解析，不要和自己定义的 <strong>Converter</strong> 搞混了。</p>
</li>
<li>
<p>定义一个 <strong>RequestMapping</strong></p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@RestController</span>
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">TestController</span> {

    <span class="pl-k">@RequestMapping</span>(<span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>)
    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">test</span>(<span class="pl-k">@RequestParam</span>(<span class="pl-c1">required</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>) <span class="pl-smi">Status</span> <span class="pl-v">status</span>) {
        <span class="pl-k">return</span> status <span class="pl-k">==</span> <span class="pl-c1">null</span> <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">"</span>无值<span class="pl-pds">"</span></span> <span class="pl-k">:</span> status<span class="pl-k">.</span>desc();
    }
    
}</pre></div>
</li>
<li>
<p>访问看下效果：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> curl http://127.0.0.1:8080/test?status=2</span>
<span class="pl-s"><span class="pl-pds">"</span>待发货<span class="pl-pds">"</span></span></pre></div>
</li>
</ul>
<h3>处理 RequestBody 和 ResponseBody</h3>
<hr>
<p><strong>RequestBody</strong> 和 <strong>ResponseBody</strong> 的解析依赖于 <strong>HttpMessageConverter</strong>。因为我使用 <strong>FastJson</strong> 作为 <strong>序列化框架</strong>，所以只需要针对 <strong>FastJsonHttpMessageConverter</strong> 做配置。</p>
<ul>
<li>
<p>实现一个自定义的 <strong>序列化/反序列化器</strong> ( <a href="https://www.cnblogs.com/insaneXs/p/9515803.html" rel="nofollow">参考</a> ) :</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">EnumConverter</span> <span class="pl-k">implements</span> <span class="pl-e">ObjectSerializer</span>, <span class="pl-e">ObjectDeserializer</span> {

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * fastjson 序列化</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@param</span> serializer</span>
<span class="pl-c">     * <span class="pl-k">@param</span> object</span>
<span class="pl-c">     * <span class="pl-k">@param</span> fieldName</span>
<span class="pl-c">     * <span class="pl-k">@param</span> fieldType</span>
<span class="pl-c">     * <span class="pl-k">@param</span> features</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">write</span>(<span class="pl-smi">JSONSerializer</span> <span class="pl-v">serializer</span>, <span class="pl-smi">Object</span> <span class="pl-v">object</span>, <span class="pl-smi">Object</span> <span class="pl-v">fieldName</span>, <span class="pl-smi">Type</span> <span class="pl-v">fieldType</span>, <span class="pl-k">int</span> <span class="pl-v">features</span>) {
        serializer<span class="pl-k">.</span>write(((<span class="pl-smi">EnumValue</span>) object)<span class="pl-k">.</span>toValue());
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">int</span> <span class="pl-en">getFastMatchToken</span>() {
        <span class="pl-k">return</span> <span class="pl-smi">JSONToken</span><span class="pl-c1"><span class="pl-k">.</span>LITERAL_STRING</span>;
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * fastjson 反序列化</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@param</span> parser</span>
<span class="pl-c">     * <span class="pl-k">@param</span> type</span>
<span class="pl-c">     * <span class="pl-k">@param</span> fieldName</span>
<span class="pl-c">     * <span class="pl-k">@param</span> &lt;T&gt;</span>
<span class="pl-c">     * <span class="pl-k">@return</span></span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">@Override</span>
    <span class="pl-k">@SuppressWarnings</span>(<span class="pl-s"><span class="pl-pds">"</span>unchecked<span class="pl-pds">"</span></span>)
    <span class="pl-k">public</span> <span class="pl-k">&lt;<span class="pl-smi">T</span>&gt;</span> <span class="pl-smi">T</span> <span class="pl-en">deserialze</span>(<span class="pl-smi">DefaultJSONParser</span> <span class="pl-v">parser</span>, <span class="pl-smi">Type</span> <span class="pl-v">type</span>, <span class="pl-smi">Object</span> <span class="pl-v">fieldName</span>) {
        <span class="pl-smi">Class</span> enumType <span class="pl-k">=</span> (<span class="pl-smi">Class</span>) type;

        <span class="pl-c"><span class="pl-c">//</span> 类型校验：枚举类型并且实现 EnumValue 接口</span>
        <span class="pl-k">if</span> (<span class="pl-k">!</span>enumType<span class="pl-k">.</span>isEnum() <span class="pl-k">||</span> <span class="pl-k">!</span><span class="pl-smi">EnumValue</span><span class="pl-k">.</span>class<span class="pl-k">.</span>isAssignableFrom(enumType)) {
            <span class="pl-k">return</span> <span class="pl-c1">null</span>;
        }

        <span class="pl-k">final</span> <span class="pl-smi">JSONLexer</span> lexer <span class="pl-k">=</span> parser<span class="pl-k">.</span>lexer;
        <span class="pl-k">final</span> <span class="pl-k">int</span> token <span class="pl-k">=</span> lexer<span class="pl-k">.</span>token();
        <span class="pl-smi">Object</span> value <span class="pl-k">=</span> <span class="pl-c1">null</span>;
        <span class="pl-k">if</span> (token <span class="pl-k">==</span> <span class="pl-smi">JSONToken</span><span class="pl-c1"><span class="pl-k">.</span>LITERAL_INT</span>) {
            value <span class="pl-k">=</span> lexer<span class="pl-k">.</span>integerValue();
        } <span class="pl-k">else</span> <span class="pl-k">if</span> (token <span class="pl-k">==</span> <span class="pl-smi">JSONToken</span><span class="pl-c1"><span class="pl-k">.</span>LITERAL_STRING</span>) {
            value <span class="pl-k">=</span> lexer<span class="pl-k">.</span>stringVal();
        } <span class="pl-k">else</span> <span class="pl-k">if</span> (token <span class="pl-k">!=</span> <span class="pl-smi">JSONToken</span><span class="pl-c1"><span class="pl-k">.</span>NULL</span>) {
            value <span class="pl-k">=</span> parser<span class="pl-k">.</span>parse();
        }

        <span class="pl-k">return</span> (<span class="pl-smi">T</span>) <span class="pl-smi">EnumValue</span><span class="pl-k">.</span>valueOf(enumType, value);
    }
}</pre></div>
</li>
<li>
<p>在 <strong>WebMvcConfigurer</strong> 中注册 <strong>类型转换器</strong> 。</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@Bean</span>
<span class="pl-smi">FastJsonHttpMessageConverter</span> fastJsonHttpMessageConverter(<span class="pl-smi">FastJsonConfig</span> fastJsonConfig) {
    <span class="pl-smi">FastJsonHttpMessageConverter</span> converter <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">FastJsonHttpMessageConverter</span>();
    converter<span class="pl-k">.</span>setFastJsonConfig(fastJsonConfig);
    converter<span class="pl-k">.</span>setDefaultCharset(<span class="pl-smi">StandardCharsets</span><span class="pl-c1"><span class="pl-k">.</span>UTF_8</span>);
    converter<span class="pl-k">.</span>setSupportedMediaTypes(<span class="pl-smi">Collections</span><span class="pl-k">.</span>singletonList(<span class="pl-smi">MediaType</span><span class="pl-c1"><span class="pl-k">.</span>APPLICATION_JSON_UTF8</span>));
    <span class="pl-k">return</span> converter;
}

<span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * fastjson 配置</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@param</span> enumValues 自定义枚举类型 {<span class="pl-k">@link</span> MybatisTypeHandlerConfiguration#enumValues()}</span>
<span class="pl-c"> * <span class="pl-k">@return</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">@Bean</span>
<span class="pl-k">public</span> <span class="pl-smi">FastJsonConfig</span> fastjsonConfig(<span class="pl-k">@Qualifier</span>(<span class="pl-s"><span class="pl-pds">"</span>enumValues<span class="pl-pds">"</span></span>) <span class="pl-k">List&lt;<span class="pl-k">Class&lt;?&gt;</span>&gt;</span> enumValues) {
    <span class="pl-smi">FastJsonConfig</span> config <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">FastJsonConfig</span>();
    config<span class="pl-k">.</span>setSerializerFeatures(<span class="pl-smi">SerializerFeature</span><span class="pl-k">.</span><span class="pl-smi">WriteDateUseDateFormat</span>);

    <span class="pl-c"><span class="pl-c">//</span> TODO 这里只是为了测试, 最好都通过扫描来查找而不是硬编码</span>
    <span class="pl-c"><span class="pl-c">//</span> enumValues.add(Sex.class);</span>

    <span class="pl-k">if</span> (enumValues <span class="pl-k">!=</span> <span class="pl-c1">null</span> <span class="pl-k">&amp;&amp;</span> enumValues<span class="pl-k">.</span>size() <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {
        <span class="pl-c"><span class="pl-c">//</span> 枚举类型字段：序列化反序列化配置</span>
        <span class="pl-smi">EnumConverter</span> enumConverter <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">EnumConverter</span>();
        <span class="pl-smi">ParserConfig</span> parserConfig <span class="pl-k">=</span> config<span class="pl-k">.</span>getParserConfig();
        <span class="pl-smi">SerializeConfig</span> serializeConfig <span class="pl-k">=</span> config<span class="pl-k">.</span>getSerializeConfig();
        <span class="pl-k">for</span> (<span class="pl-k">Class&lt;?&gt;</span> clazz <span class="pl-k">:</span> enumValues) {
            parserConfig<span class="pl-k">.</span>putDeserializer(clazz, enumConverter);
            serializeConfig<span class="pl-k">.</span>put(clazz, enumConverter);
        }
    }

    <span class="pl-k">return</span> config;
}</pre></div>
<p>这里有两种方式：</p>
<ol>
<li>硬编码给所有 <strong>枚举类型</strong> 注册 <strong>类型转换器</strong> 。</li>
<li>扫描所有 <strong>枚举类型</strong> 并批量注册。( <strong>推荐</strong> )</li>
</ol>
</li>
</ul>
<h3>DAO 层处理</h3>
<hr>
<p>由于使用 <strong>Mybatis</strong> 作为 <strong>ORM</strong> 框架，这里使用 <strong>Mybatis</strong> 提供的 <strong>TypeHandler</strong> 实现 <strong>枚举类型</strong> 的 <strong>序列化</strong> 和 <strong>反序列化</strong> 。</p>
<ul>
<li>
<p>实现一个自定义的通用的 <strong>TypeHandler</strong></p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">EnumTypeHandler</span>&lt;T <span class="pl-k">extends</span> <span class="pl-e">Enum&lt;<span class="pl-smi">T</span>&gt;</span> &amp; <span class="pl-e">EnumValue</span>&gt; extends <span class="pl-e">BaseTypeHandler&lt;<span class="pl-smi">T</span>&gt;</span> {

    <span class="pl-k">private</span> <span class="pl-k">final</span> <span class="pl-k">Class&lt;<span class="pl-smi">T</span>&gt;</span> type;

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 只能由子类调用</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">@SuppressWarnings</span>(<span class="pl-s"><span class="pl-pds">"</span>unchecked<span class="pl-pds">"</span></span>)
    <span class="pl-k">protected</span> <span class="pl-en">EnumTypeHandler</span>() {
        type <span class="pl-k">=</span> <span class="pl-smi">GenericsUtils</span><span class="pl-k">.</span>getSuperClassGenericClass(getClass());
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 由 Mybatis 根据类型动态生成实例</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@param</span> type</span>
<span class="pl-c">     * <span class="pl-k">@see</span> org.apache.ibatis.type.TypeHandlerRegistry#getInstance(Class, Class)</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">public</span> <span class="pl-en">EnumTypeHandler</span>(<span class="pl-k">Class&lt;<span class="pl-smi">T</span>&gt;</span> <span class="pl-v">rawClass</span>) {
        <span class="pl-c1">this</span><span class="pl-k">.</span>type <span class="pl-k">=</span> rawClass;
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setNonNullParameter</span>(<span class="pl-smi">PreparedStatement</span> <span class="pl-v">ps</span>, <span class="pl-k">int</span> <span class="pl-v">i</span>, <span class="pl-smi">T</span> <span class="pl-v">parameter</span>, <span class="pl-smi">JdbcType</span> <span class="pl-v">jdbcType</span>) <span class="pl-k">throws</span> <span class="pl-smi">SQLException</span> {
        <span class="pl-smi">Object</span> value <span class="pl-k">=</span> parameter<span class="pl-k">.</span>toValue();
        <span class="pl-k">if</span> (jdbcType <span class="pl-k">==</span> <span class="pl-c1">null</span>) {
            ps<span class="pl-k">.</span>setObject(i, value);
        } <span class="pl-k">else</span> {
            ps<span class="pl-k">.</span>setObject(i, value, <span class="pl-smi">jdbcType<span class="pl-k">.</span>TYPE_CODE</span>);
        }
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-smi">T</span> <span class="pl-en">getNullableResult</span>(<span class="pl-smi">ResultSet</span> <span class="pl-v">rs</span>, <span class="pl-smi">String</span> <span class="pl-v">columnName</span>) <span class="pl-k">throws</span> <span class="pl-smi">SQLException</span> {
        <span class="pl-k">return</span> valueOf(rs<span class="pl-k">.</span>getString(columnName));
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-smi">T</span> <span class="pl-en">getNullableResult</span>(<span class="pl-smi">ResultSet</span> <span class="pl-v">rs</span>, <span class="pl-k">int</span> <span class="pl-v">columnIndex</span>) <span class="pl-k">throws</span> <span class="pl-smi">SQLException</span> {
        <span class="pl-k">return</span> valueOf(rs<span class="pl-k">.</span>getString(columnIndex));
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-smi">T</span> <span class="pl-en">getNullableResult</span>(<span class="pl-smi">CallableStatement</span> <span class="pl-v">cs</span>, <span class="pl-k">int</span> <span class="pl-v">columnIndex</span>) <span class="pl-k">throws</span> <span class="pl-smi">SQLException</span> {
        <span class="pl-k">return</span> valueOf(cs<span class="pl-k">.</span>getString(columnIndex));
    }

    <span class="pl-k">private</span> <span class="pl-smi">T</span> <span class="pl-en">valueOf</span>(<span class="pl-smi">String</span> <span class="pl-v">s</span>) {
        <span class="pl-k">return</span> s <span class="pl-k">==</span> <span class="pl-c1">null</span> <span class="pl-k">?</span> <span class="pl-c1">null</span> <span class="pl-k">:</span> <span class="pl-smi">EnumValue</span><span class="pl-k">.</span>valueOf(type, s);
    }
}</pre></div>
</li>
<li>
<p>注册 <strong>EnumTypeHandler</strong></p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@Configuration</span>
<span class="pl-k">@ConditionalOnClass</span>({<span class="pl-smi">SqlSessionFactory</span><span class="pl-k">.</span>class})
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">MybatisTypeHandlerConfiguration</span> {

    <span class="pl-k">private</span> <span class="pl-smi">TypeHandlerRegistry</span> typeHandlerRegistry;

    <span class="pl-k">private</span> <span class="pl-k">final</span> <span class="pl-smi">SpringClassScanner</span> springClassScanner;

    <span class="pl-k">public</span> <span class="pl-en">MybatisTypeHandlerConfiguration</span>(<span class="pl-smi">SqlSessionFactory</span> <span class="pl-v">sqlSessionFactory</span>, <span class="pl-smi">SpringClassScanner</span> <span class="pl-v">springClassScanner</span>) {
        <span class="pl-c1">this</span><span class="pl-k">.</span>typeHandlerRegistry <span class="pl-k">=</span> sqlSessionFactory<span class="pl-k">.</span>getConfiguration()<span class="pl-k">.</span>getTypeHandlerRegistry();
        <span class="pl-c1">this</span><span class="pl-k">.</span>springClassScanner <span class="pl-k">=</span> springClassScanner;
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 注册 Mybatis 类型转换器</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">@Autowired</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">registerTypeHandlers</span>() {
        enumValues()<span class="pl-k">.</span>forEach(<span class="pl-c1">this</span><span class="pl-k">::</span>registerEnumTypeHandler);
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 注册 枚举 类型的类型转换器</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@param</span> javaTypeClass Java 类型</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-en">registerEnumTypeHandler</span>(<span class="pl-k">Class&lt;?&gt;</span> <span class="pl-v">javaTypeClass</span>) {
        register(javaTypeClass, <span class="pl-smi">EnumTypeHandler</span><span class="pl-k">.</span>class);
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 注册类型转换器</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@param</span> javaTypeClass    Java 类型</span>
<span class="pl-c">     * <span class="pl-k">@param</span> typeHandlerClass 类型转换器类型</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-en">register</span>(<span class="pl-k">Class&lt;?&gt;</span> <span class="pl-v">javaTypeClass</span>, <span class="pl-k">Class&lt;?&gt;</span> <span class="pl-v">typeHandlerClass</span>) {
        <span class="pl-c1">this</span><span class="pl-k">.</span>typeHandlerRegistry<span class="pl-k">.</span>register(javaTypeClass, typeHandlerClass);
    }

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 扫描所有的 {<span class="pl-k">@link</span> EnumValue} 实现类</span>
<span class="pl-c">     * 注册到 Spring 中</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@return</span> 类集合</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">@Bean</span>
    <span class="pl-k">public</span> <span class="pl-k">List&lt;<span class="pl-k">Class&lt;?&gt;</span>&gt;</span> <span class="pl-en">enumValues</span>() {
        <span class="pl-c"><span class="pl-c">//</span> 过滤自定义枚举类</span>
        <span class="pl-k">Predicate&lt;<span class="pl-k">Class&lt;?&gt;</span>&gt;</span> filter <span class="pl-k">=</span> clazz <span class="pl-k">-</span><span class="pl-k">&gt;</span> clazz<span class="pl-k">.</span>isEnum() <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">EnumValue</span><span class="pl-k">.</span>class<span class="pl-k">.</span>isAssignableFrom(clazz);
        <span class="pl-k">return</span> springClassScanner<span class="pl-k">.</span>scanClass(<span class="pl-c1">ENTITY_PACKAGE</span>, filter);
    }

}</pre></div>
<p>上面是全自动的方式，也可以定义一个具体类型的 <strong>EnumTypeHandler</strong> :</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">StatusTypeHandler</span> <span class="pl-k">extends</span> <span class="pl-e">EnumTypeHandler&lt;<span class="pl-smi">Status</span>&gt;</span> {
}</pre></div>
</li>
<li>
<p>然后修改 <strong>application.yml</strong> 让 <strong>Mybatis</strong> 去扫描注册自定义的 <strong>TypeHandler</strong></p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">mybatis</span>:
  <span class="pl-ent">type-handlers-package</span>: <span class="pl-s">com.github.anyesu.common.typehandler</span></pre></div>
</li>
</ul>
<h3>源码</h3>
<hr>
<p>篇幅有限，上面代码并不完整，点击 <a href="https://github.com/anyesu/spring-boot-demo/tree/master/spring-boot-demo-customized-field-type">这里</a> 查看完整代码。</p>
<h3>结语</h3>
<hr>
<p>通过这个小小的优化，对于代码的简洁性和健壮性带来的效果还是不错的。</p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/34212407037e">https://www.jianshu.com/p/34212407037e</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-29T14:47:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[IntelliJ IDEA 使用 Docker 远程部署]]></title>
        <id>32</id>
        <link href="https://anyesu.github.io/blog/articles/32"/>
        <updated>2019-09-28T16:51:55.000Z</updated>
        <summary type="html"><![CDATA[前言 通常，部署流程主要为下面几个步骤： 提交代码 ( SVN 或者 Git ) 。 在 构建服务器 上拉取代码进行构建打包。 将软件包发送到 部署服务器，或者打包后上传到仓库，由 部署服务器 进行下载。 部署服务器 停止现有服务，使用新的软件包进行启动。 上面的步骤很是繁琐，而且全程需要人工盯着以进行后续步骤，如果需要经常部署的话无疑是很浪费时间的。有人会说可以用 Jenkins 这样的 CI ]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>通常，部署流程主要为下面几个步骤：</p>
<ul>
<li>
<p>提交代码 ( <strong>SVN</strong> 或者 <strong>Git</strong> ) 。</p>
</li>
<li>
<p>在 <strong>构建服务器</strong> 上拉取代码进行构建打包。</p>
</li>
<li>
<p>将软件包发送到 <strong>部署服务器</strong>，或者打包后上传到仓库，由 <strong>部署服务器</strong> 进行下载。</p>
</li>
<li>
<p><strong>部署服务器</strong> 停止现有服务，使用新的软件包进行启动。</p>
</li>
</ul>
<p>上面的步骤很是繁琐，而且全程需要人工盯着以进行后续步骤，如果需要经常部署的话无疑是很浪费时间的。有人会说可以用 <strong>Jenkins</strong> 这样的 <strong>CI</strong> 工具啊，这也是一种方法，但不是本文的目标。</p>
<h3>项目 Docker 化改造</h3>
<hr>
<p>既然要用 <a href="https://www.docker.com/" rel="nofollow">Docker</a> 进行部署，那就要对现有项目做一些简单的改造，如果项目结构之前已经比较规范了，那么改造起来也会比较简单。</p>
<p>先在项目 <strong>根目录</strong> ( 也可以放在一个 docker 文件夹下统一维护 ) 下添加几个文件：</p>
<table role="table">
<thead>
<tr>
<th>文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Dockerfile</strong></td>
<td>镜像配置文件，用于配置程序运行时依赖的环境，比如 <strong>Java</strong> 、 <strong>Tomcat</strong></td>
</tr>
<tr>
<td><strong>.dockerignore</strong></td>
<td>使用 <strong>Docker</strong> 构建镜像的时候会将 <strong>上下文目录</strong> 中的文件复制到 <strong>Docker Engine</strong> 中，如果每次都要复制一遍 <strong>源码</strong> 和 <strong>构建中间产物</strong> 就会很浪费时间，<strong>.dockerignore</strong> 的作用就是用于忽略指定的文件，加快镜像构建速度。</td>
</tr>
<tr>
<td><strong>docker-compose.yml</strong></td>
<td>用于多个服务的编排。项目如果依赖了 <strong>数据库</strong> 、<strong>缓存</strong> 、<strong>消息队列</strong> 等，可以在这里配置依赖关系，还可以进行动态 <strong>扩缩容</strong> 。</td>
</tr>
<tr>
<td><strong>.env</strong></td>
<td><strong>docker-compose.yml</strong> 中可以使用 <strong>环境变量</strong> 进行参数化配置，一些默认的 <strong>环境变量</strong> 可以保存在这个文件中，实际构建时可以配置 <strong>环境变量</strong> 对其进行覆盖。</td>
</tr>
</tbody>
</table>
<p>之后将项目中一些 <strong>写死</strong> 的 <strong>配置</strong> 改为通过 <strong>环境变量</strong> 读取，这样就可以通过 <strong>docker-compose.yml</strong> 导入 <strong>环境变量</strong> ，在不同环境下 ( <strong>开发</strong> 、 <strong>测试</strong> 、 <strong>线上</strong> 等 ) 不用改文件就可以部署了。具体配置参考下面的测试项目。</p>
<h3>准备工作</h3>
<hr>
<ul>
<li>
<p>安装 <a href="https://www.jetbrains.com/idea/" rel="nofollow">IntelliJ IDEA</a> ( 目前最新版本是 <code>2019.1</code> ) 。</p>
</li>
<li>
<p>安装 <a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" rel="nofollow">Docker Desktop for Windows</a> 。</p>
<blockquote>
<p>不推荐安装 <strong>Docker Desktop for Windows</strong> ，本文只是用于测试。<br>
最好在其他的 <strong>Linux</strong> 主机上运行 <strong>Docker</strong> 。</p>
</blockquote>
</li>
<li>
<p>下载最新版的 <a href="https://github.com/docker/compose/releases/latest">Docker Compose</a> - <strong>docker-compose-Windows-x86_64.exe</strong> 。</p>
<blockquote>
<p><strong>Docker Desktop for Windows</strong> 已经集成了 <strong>Docker Compose</strong> ，一般不需要单独下载。</p>
</blockquote>
</li>
<li>
<p>下载 <a href="https://github.com/anyesu/test">测试项目</a> 。</p>
</li>
<li>
<p>先阅读完本文。</p>
</li>
</ul>
<h3>使用方法</h3>
<hr>
<ul>
<li>
<p>打开测试项目 <strong>JetBrains-Docker-Example/Springboot-Example</strong> 。</p>
</li>
<li>
<p>设置 <strong>Project JDK</strong> 。</p>
</li>
<li>
<p>导入 <strong>pom.xml</strong> ( 右键 <strong>Add as Maven Project</strong> 或者直接拖拽到 <strong>Maven 工具栏</strong> 中 ) 。</p>
</li>
<li>
<p>添加 <strong>Docker Daemon</strong> 。</p>
<p>File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Docker -&gt; Add -&gt; 输入 <strong>Docker Daemon</strong> 的 URL</p>
<p><strong>Docker Daemon</strong> 的配置参考 <a href="https://www.jianshu.com/p/7ba1a93e6de4" rel="nofollow">这里</a> 。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/94f1d88359040a348c13d3b5353e20f97f038334710855728cb993cae9e0b514/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d353963363763623736623566643537342e706e67"><img src="https://camo.githubusercontent.com/94f1d88359040a348c13d3b5353e20f97f038334710855728cb993cae9e0b514/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d353963363763623736623566643537342e706e67" alt="添加 Docker Daemon" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-59c67cb76b5fd574.png" style="max-width:100%;"></a></p>
<blockquote>
<p>注意：如果要启用 TLS 安全连接，协议名需要填写 <strong>https</strong> 而不是命令行中使用的 <strong>tcp</strong> 。</p>
</blockquote>
</li>
<li>
<p>Add Run Configuration -&gt; New -&gt; Docker -&gt; Docker-compose</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/7bdd6e30c42020c8633af4ba22078ba0771e9ddbb2f521ab59b7333471a727d3/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613430643365376165316139336331332e706e67"><img src="https://camo.githubusercontent.com/7bdd6e30c42020c8633af4ba22078ba0771e9ddbb2f521ab59b7333471a727d3/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613430643365376165316139336331332e706e67" alt="添加 Run Configuration" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-a40d3e7ae1a93c13.png" style="max-width:100%;"></a></p>
</li>
<li>
<p>修改配置。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/63bc407b80d3b4b2d53654a81b3d7ab0efa01b40c5c466315bfd3d9b785a4483/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d376337316633626235346235393963342e706e67"><img src="https://camo.githubusercontent.com/63bc407b80d3b4b2d53654a81b3d7ab0efa01b40c5c466315bfd3d9b785a4483/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d376337316633626235346235393963342e706e67" alt="配置 Run Configuration" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-7c71f3bb54b599c4.png" style="max-width:100%;"></a></p>
<p>当然，也可以直接打开 <strong>docker-compose.yml</strong> ，点击左侧显示的 <strong>三角形按钮</strong> 自动生成运行配置。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/2187e830021cc8d594feb0071133e12f5b416a0e5728f11e0941bea21452f180/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d653461366434343839356339343038652e706e67"><img src="https://camo.githubusercontent.com/2187e830021cc8d594feb0071133e12f5b416a0e5728f11e0941bea21452f180/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d653461366434343839356339343038652e706e67" alt="通过 docker-compose.yml 运行" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-e4a6d44895c9408e.png" style="max-width:100%;"></a></p>
</li>
<li>
<p>运行配置，可以看到容器已经启动了，访问看下效果：<strong>127.0.0.1:3000</strong> 。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0d7e642f08f000e2ab802b111c1e09b24acaa6acca31234a3df504c5bdbe7588/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d323131656332343463616363373733392e706e67"><img src="https://camo.githubusercontent.com/0d7e642f08f000e2ab802b111c1e09b24acaa6acca31234a3df504c5bdbe7588/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d323131656332343463616363373733392e706e67" alt="docker 部署" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-211ec244cacc7739.png" style="max-width:100%;"></a></p>
<p>通过 <strong>Docker 插件</strong> 还可以可视化查看 <strong>容器</strong> 的 <strong>日志</strong> 、 <strong>环境变量</strong> 、 <strong>端口映射</strong> 、 <strong>数据卷</strong> 等配置信息，并且可以动态 <strong>修改配置</strong> 和 <strong>进入容器</strong> ，比起 <strong>敲命令</strong> 方便的不要太多。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d29a14ddc6d2c794a995312eec61ea810a90936a1e81f3894326d7ed9e0e126c/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d303830373934646437386562316563322e706e67"><img src="https://camo.githubusercontent.com/d29a14ddc6d2c794a995312eec61ea810a90936a1e81f3894326d7ed9e0e126c/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d303830373934646437386562316563322e706e67" alt="docker 插件" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-080794dd78eb1ec2.png" style="max-width:100%;"></a></p>
</li>
</ul>
<p>上面的步骤就是 <strong>Docker 插件</strong> 的常规用法，已经实现了 <strong>一键部署</strong> 效果，只是需要自己配置 <strong>Run Configuration</strong> 。</p>
<p><strong>下面看下另一种使用方式：</strong></p>
<ul>
<li>
<p>打开另一个测试项目 <strong>JetBrains-Docker-Example/Node-Example</strong> 。</p>
</li>
<li>
<p>先使用命令 <code>npm install</code> 安装依赖。</p>
<p>最好先在命令行执行再打开 <strong>IDEA</strong> ，不然可能把 <strong>IDEA</strong> 卡死。</p>
</li>
<li>
<p>打开 <strong>package.json</strong> ，部署命令已经在 <strong>Docker</strong> 写好了，点击命令左侧显示的 <strong>三角形按钮</strong> 直接执行就行了。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/c146319ef22de41a076b99241f76a5655d3f14165049b5c2c9d787a5398703e7/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d333234633066353464306435386663612e706e67"><img src="https://camo.githubusercontent.com/c146319ef22de41a076b99241f76a5655d3f14165049b5c2c9d787a5398703e7/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d333234633066353464306435386663612e706e67" alt="通过 package.json 运行" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-324c0f54d0d58fca.png" style="max-width:100%;"></a></p>
<p>如果需要部署到其他 <strong>远程 Docker Daemon</strong> ，可以修改 <strong>环境变量</strong> <code>DOCKER_HOST</code> 。</p>
</li>
<li>
<p>访问看下效果：<strong>127.0.0.1:8000</strong> 。</p>
</li>
</ul>
<p>这种方式也是 <strong>一键式</strong> 的，也比较适合在命令行中执行。</p>
<h3>Docker Desktop for Windows 的坑</h3>
<hr>
<ul>
<li>
<p>依赖于 <strong>Hyper-V</strong> 虚拟机，但是 <strong>Hyper-V</strong> 的兼容性不太好，容易出一些莫名其妙的问题，所以 <strong>不推荐安装</strong> 。</p>
</li>
<li>
<p>使用它 ( <code>2.0.0.3 (31259)</code> ) 自带的 <strong>docker-compose</strong> ( <a href="https://github.com/docker/compose/releases/tag/1.23.2">1.23.2</a> ) 在执行某些镜像构建操作的时候可能会出现下面的错误：</p>
<pre><code>Building api
[18576] Failed to execute script docker-compose
Traceback (most recent call last):
  File "docker-compose", line 6, in &lt;module&gt;
  File "compose\cli\main.py", line 71, in main
  File "compose\cli\main.py", line 127, in perform_command
  File "compose\cli\main.py", line 1080, in up
  File "compose\cli\main.py", line 1076, in up
  File "compose\project.py", line 475, in up
  File "compose\service.py", line 342, in ensure_image_exists
  File "compose\service.py", line 1082, in build
  File "site-packages\docker\api\build.py", line 150, in build
UnicodeDecodeError: 'gbk' codec can't decode byte 0x80 in position 10: illegal multibyte sequence
</code></pre>
<p>查看 <a href="https://github.com/docker/docker-py/blob/3.6.0/docker/api/build.py#L150">源码</a> 发现是因为 <strong>.dockerignore</strong> 文件中包含了中文导致乱码， <a href="https://github.com/docker/compose/releases/tag/1.19.0"><code>1.19.0</code></a> 及之前的版本没有这个问题。( 同样的版本，<strong>Linux</strong> 下没有这个问题 )</p>
</li>
<li>
<p>在 <strong>Windows</strong> 下使用旧版 <strong>docker-compose</strong> ( 比如 <code>1.19.0</code> ) 部署到 <strong>远程 Linux Docker Daemon</strong> 时，如果使用了 <strong>数据卷</strong> 会出现下面的错误：</p>
<pre><code>Creating api ... 
Creating api ... error
ERROR: for api  Cannot create container for service api: create \etc\localtime: "\\etc\\localtime" includes invalid characters for a local volume name, only "[a-zA-Z0-9][a-zA-Z0-9_.-]" are allowed. If you intended to pass a host directory, use absolute path

ERROR: for api  Cannot create container for service api: create \etc\localtime: "\\etc\\localtime" includes invalid characters for a local volume name, only "[a-zA-Z0-9][a-zA-Z0-9_.-]" are allowed. If you intended to pass a host directory, use absolute path
Encountered errors while bringing up the project.
</code></pre>
<p>使用 <code>docker-compose config</code> 命令可以看到 <strong>数据卷</strong> 源路径被改成了 <strong>Windows</strong> 下的 <strong>反斜杠</strong> 类型的路径格式 <code>\etc\localtime</code>。</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">services</span>:
  <span class="pl-ent">api</span>:
    <span class="pl-ent">build</span>:
      <span class="pl-ent">context</span>: <span class="pl-s">D:\github\test\JetBrains-Docker-Example\Springboot-Example</span>
    <span class="pl-ent">command</span>: <span class="pl-s">java -jar -Djava.security.egd=file:/dev/./urandom -server -XX:+DisableExplicitGC</span>
      <span class="pl-s">-Xms256m -Xmx256m -Dspring.profiles.active=docker /app.jar</span>
    <span class="pl-ent">container_name</span>: <span class="pl-s">api</span>
    <span class="pl-ent">hostname</span>: <span class="pl-s">api</span>
    <span class="pl-ent">ports</span>:
    - <span class="pl-s">3000:8080/tcp</span>
    <span class="pl-ent">privileged</span>: <span class="pl-c1">false</span>
    <span class="pl-ent">restart</span>: <span class="pl-s">always</span>
    <span class="pl-ent">volumes</span>:
    - <span class="pl-s">\etc\localtime:/etc/localtime:rw</span>
<span class="pl-ent">version</span>: <span class="pl-s"><span class="pl-pds">'</span>3.0<span class="pl-pds">'</span></span></pre></div>
<p>通过阅读 <a href="https://github.com/docker/compose/blob/1.19.0/compose/config/config.py#L818">源码</a> 找到了方法：使用 <strong>docker-compose</strong> 的 <a href="https://docs.docker.com/compose/reference/envvars/" rel="nofollow">内置环境变量</a> - <code>COMPOSE_CONVERT_WINDOWS_PATHS=1</code></p>
</li>
</ul>
<h3>其他方案</h3>
<hr>
<p>上面提到了 <strong>Docker Desktop for Windows</strong> 的一些问题，所以我不推荐去安装它，单独下载 <strong>docker-compose</strong> 就好了。考虑到 <strong>Windows</strong> 到 <strong>Linux</strong> 之间交互可能会存在的问题，我还有一种方案：</p>
<ul>
<li>
<p>安装 <a href="https://www.jianshu.com/p/bc38ed12da1d" rel="nofollow">WSL</a> 。</p>
</li>
<li>
<p>在 <strong>WSL</strong> 中安装 <strong>Docker</strong>，但是只具备 <strong>客户端</strong> 功能而无法运行 <strong>Docker Daemon</strong> 。</p>
<p><strong>2019-07-12 追加：</strong> 目前 <strong>WSL</strong> 已经能够运行 <strong>Docker Daemon</strong> 了，参考我另一篇 <a href="https://www.jianshu.com/p/20ebdbf68744" rel="nofollow">文章</a> 。</p>
</li>
<li>
<p>在 <strong>WSL</strong> 中安装 <strong>docker-compose</strong> 。</p>
</li>
<li>
<p>在 <strong>Windows</strong> 下编写脚本 <code>docker-compose.bat</code> 。</p>
<div class="highlight highlight-source-powershell"><pre><span class="pl-smi">@echo</span> off

echo current dir: <span class="pl-k">%</span>cd<span class="pl-k">%</span>

:: 使用延迟变量
setlocal enabledelayedexpansion

:: 遍历所有参数，如果是 compose 文件则转换路径格式
:: 使用 wslpath 将 Windows 路径转为 wsl 中的路径
<span class="pl-k">for</span> <span class="pl-k">%</span><span class="pl-k">%</span>i <span class="pl-k">in</span> ( <span class="pl-k">%</span><span class="pl-k">*</span> ) <span class="pl-k">do</span> (
    :: 当前参数
    set arg<span class="pl-k">=</span><span class="pl-k">%</span><span class="pl-k">%</span>i
    :: 使用下面这种方式中文路径不会乱码
    <span class="pl-k">if</span> <span class="pl-k">!</span>last_arg<span class="pl-k">!</span><span class="pl-k">==</span><span class="pl-k">-f</span> <span class="pl-k">if</span> <span class="pl-k">!</span>arg<span class="pl-k">!</span> neq <span class="pl-k">-f</span>  set <span class="pl-s"><span class="pl-pds">"</span>arg=`wslpath '!arg!'<span class="pl-cce">`"</span></span>
<span class="pl-s">    :: 追加到新的参数列表中</span>
<span class="pl-s">    set <span class="pl-pds">"</span></span>args<span class="pl-k">=</span><span class="pl-k">!</span>args<span class="pl-k">!</span> <span class="pl-k">!</span>arg<span class="pl-k">!</span><span class="pl-s"><span class="pl-pds">"</span></span>
<span class="pl-s">    :: 作为上一个参数保存</span>
<span class="pl-s">    set last_arg=%%i</span>
<span class="pl-s">)</span>
<span class="pl-s"></span>
<span class="pl-s">:: IDEA 部署到指定 Docker Daemon 的时候会设置下面的环境变量</span>
<span class="pl-s"></span>
<span class="pl-s">:: 设置环境变量 DOCKER_HOST 来指定 Docker Daemon 的 URL</span>
<span class="pl-s">if defined DOCKER_HOST set <span class="pl-pds">"</span></span>envs<span class="pl-k">=</span>export DOCKER_HOST<span class="pl-k">=%</span>DOCKER_HOST<span class="pl-k">%</span>;<span class="pl-s"><span class="pl-pds">"</span></span>
<span class="pl-s"></span>
<span class="pl-s">:: 设置环境变量 DOCKER_TLS_VERIFY 和 DOCKER_CERT_PATH 指定 TLS 配置</span>
<span class="pl-s">:: DOCKER_CERT_PATH 为空时，wslpath 命令的结果是 '.'，要做处理</span>
<span class="pl-s">if defined DOCKER_CERT_PATH set <span class="pl-pds">"</span></span>envs<span class="pl-k">=%</span>envs<span class="pl-k">%</span>export DOCKER_CERT_PATH<span class="pl-k">=</span><span class="pl-k">`</span>wslpath <span class="pl-s"><span class="pl-pds">'</span>%DOCKER_CERT_PATH%<span class="pl-pds">'</span></span><span class="pl-k">`</span>;<span class="pl-s"><span class="pl-pds">"</span></span>
<span class="pl-s">set <span class="pl-pds">"</span></span>envs<span class="pl-k">=%</span>envs<span class="pl-k">%</span>export DOCKER_TLS_VERIFY<span class="pl-k">=%</span>DOCKER_TLS_VERIFY<span class="pl-k">%</span>;<span class="pl-s"><span class="pl-pds">"</span></span>
<span class="pl-s"></span>
<span class="pl-s">:: 通过 WSL 调用 docker-compose</span>
<span class="pl-s">:: 如果 bash -c 命令参数中包含<span class="pl-smi">$则要转义</span>，否则在解析 bash -c 命令的时候就会对 shell 变量进行替换</span>
<span class="pl-s">:: 注意：.env 文件需要在当前命令的执行目录下</span>
<span class="pl-s">bash -c <span class="pl-pds">"</span></span><span class="pl-k">%</span>envs<span class="pl-k">%</span>env<span class="pl-k">|</span>grep DOCKER;set <span class="pl-k">-</span>x;docker<span class="pl-k">-</span>compose <span class="pl-k">%</span>args<span class="pl-k">%</span>;<span class="pl-s"><span class="pl-pds">"</span></span></pre></div>
<p><strong>IDEA</strong> 通过设置 <strong>环境变量</strong> : <strong>DOCKER_HOST</strong> 、<strong>DOCKER_TLS_VERIFY</strong> 、<strong>DOCKER_CERT_PATH</strong> 起到连接 <strong>远程 Docker Daemon</strong> 的目的。</p>
</li>
<li>
<p>修改 <strong>Docker Compose</strong> 的 <strong>可执行程序</strong> 为上面的脚本。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/e2e10831f0914855ec76f5c5c160670684a6d6343bed758a38bdad3b6bdb884b/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d386465376239663632323961633663372e706e67"><img src="https://camo.githubusercontent.com/e2e10831f0914855ec76f5c5c160670684a6d6343bed758a38bdad3b6bdb884b/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d386465376239663632323961633663372e706e67" alt="修改 docker 可执行程序" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-8de7b9f6229ac6c7.png" style="max-width:100%;"></a></p>
</li>
</ul>
<h3>结语</h3>
<hr>
<p>上面其实只是介绍一个很简单但又实用的功能，更多的是分享我在使用过程中遇到的一些问题，尤其是在写这篇文章的时候才发现自己之前有些认知是错误的，也是一种收获。</p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/410ea6e0b13a">https://www.jianshu.com/p/410ea6e0b13a</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-28T16:51:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chrome 插件整理]]></title>
        <id>31</id>
        <link href="https://anyesu.github.io/blog/articles/31"/>
        <updated>2019-09-26T13:34:11.000Z</updated>
        <summary type="html"><![CDATA[前言 记录一下自己使用的 Chrome 插件 。 注：下面的插件链接需要 科学上网 ，可以自行搜索插件名安装。 工具类 OneTab 可以理解是一个 临时的收藏夹 ，一键保存 当前窗口的标签页，用法很简单，自行体会。 找资料的过程中经常会遇到一些副产物 ( 有用的但是与当前目的相关性不大的资料 )，由于搜索引擎的尿性 ( 同样的关键字之后再也搜不出之前的结果 ) 就会把页面一直开着 ( 目前并没有]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>记录一下自己使用的 <a href="https://chrome.google.com/webstore/category/extensions" rel="nofollow">Chrome 插件</a> 。</p>
<p>注：下面的插件链接需要 <strong>科学上网</strong> ，可以自行搜索插件名安装。</p>
<h3>工具类</h3>
<hr>
<ul>
<li>
<p><a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall" rel="nofollow">OneTab</a></p>
<p>可以理解是一个 <strong>临时的收藏夹</strong> ，<strong>一键保存</strong> 当前窗口的标签页，用法很简单，自行体会。</p>
<p>找资料的过程中经常会遇到一些副产物 ( 有用的但是与当前目的相关性不大的资料 )，由于搜索引擎的尿性 ( 同样的关键字之后再也搜不出之前的结果 ) 就会把页面一直开着 ( 目前并没有时间去细看，也不会去收藏 ) ，久而久之开着上百个标签页就是很常见的事，这是很费内存的 ( <strong>几个 G</strong> ) ，有了这个插件就可以节省很多内存，同时浏览器也清净了不少。</p>
</li>
<li>
<p><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" rel="nofollow">Tampermonkey</a></p>
<p>油猴脚本。只要会前端就可以自行编写用户脚本对浏览的网页做修改 ( 美化、去广告等等 ) ，每个脚本都可以当作是轻量级的 <strong>插件</strong> 。下文会推荐一些我觉得实用的脚本。</p>
</li>
<li>
<p><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb" rel="nofollow">Vimium</a></p>
<p>使用快捷键控制浏览器。由于我习惯使用触摸板，只用到 <strong>快速关闭/还原标签页</strong> 的功能，其他功能没有深入使用过。</p>
</li>
<li>
<p><a href="https://chrome.google.com/webstore/detail/%E6%9C%89%E9%81%93%E8%AF%8D%E5%85%B8chrome%E5%88%92%E8%AF%8D%E6%8F%92%E4%BB%B6/eopjamdnofihpioajgfdikhhbobonhbb" rel="nofollow">有道词典 Chrome 划词插件</a></p>
<p>用过最好用的一款 <strong>划词翻译</strong> 插件。</p>
</li>
<li>
<p><a href="https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj" rel="nofollow">Awesome Screenshot: Screen Video Recorder</a></p>
<p>网页截图: 注释&amp;录屏 ( 不仅是浏览器截图 ) 。</p>
<p>顺带分享下 <strong>Chrome</strong> 原生支持的 <a href="https://sspai.com/post/42193" rel="nofollow">截图方法</a> 。</p>
</li>
</ul>
<h3>开发类</h3>
<hr>
<ul>
<li>
<p><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" rel="nofollow">React Developer Tools</a></p>
<p><strong>React</strong> 项目开发工具，可以看原始的 <strong>React Element 树</strong> ，类似于 <strong>DOM 树</strong>。</p>
</li>
<li>
<p><a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" rel="nofollow">Redux DevTools</a></p>
<p>如果在项目中使用 <a href="http://cn.redux.js.org/index.html" rel="nofollow">Redux</a> ，那么这个插件就很有用了，可以查看已执行的 <strong>action</strong> 和 <strong>state</strong> 值，这样就可以快速定位故障点而不用到处打印 <strong>log</strong> 了。具体用法见 <a href="https://github.com/zalmoxisus/redux-devtools-extension">插件官方文档</a> 。</p>
</li>
</ul>
<h3>阅读类</h3>
<hr>
<ul>
<li>
<p><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc" rel="nofollow">Octotree</a></p>
<p>为 <strong>GitHub 仓库</strong> 生成目录，可以快速定位文件而不用一级一级菜单盲点了。</p>
<p>类似的插件有 <a href="https://chrome.google.com/webstore/detail/sourcegraph/dgjhfomjieaadpoljlnidmbgkdffpack" rel="nofollow">Sourcegraph</a> 。</p>
</li>
<li>
<p><a href="https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll" rel="nofollow">简悦 - SimpRead</a></p>
<p>对浏览的网页提供阅读模式，可以更专注于内容的阅读。</p>
</li>
<li>
<p><a href="https://chrome.google.com/webstore/detail/smart-toc/lifgeihcfpkmmlfjbailfpfhbahhibba" rel="nofollow">Smart TOC</a></p>
<p>为网页生成目录菜单，适合长页面的跳转。</p>
</li>
</ul>
<h3>广告类</h3>
<hr>
<p>使用过几款所谓的去广告插件，但是都没什么用，所以还是跑题推荐下 <a href="http://www.ad-safe.com" rel="nofollow">ADSafe</a> ，官网下载的版本 ( <code>5.3.629.6500</code> ) 是没有用的。可以下载 <a href="http://pan.baidu.com/s/1pK7yvEj" rel="nofollow">历史版本</a> ，亲测 <code>5.3.209.1800</code> 还是可以用的。</p>
<h3>油猴脚本</h3>
<hr>
<p>可以在这个 <a href="https://greasyfork.org" rel="nofollow">网站</a> 搜索自己需要的脚本。</p>
<p>下面是我用过的脚本：</p>
<ul>
<li>
<p><a href="https://greasyfork.org/zh-CN/scripts/370811-%E5%B7%B2%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%80%E5%B9%B4-%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8-%E7%BD%91%E7%9B%98%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99-%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E8%87%AA%E5%8A%A8%E6%9F%A5%E8%AF%A2%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%88%86%E4%BA%AB%E9%93%BE%E6%8E%A5%E7%9A%84%E6%8F%90%E5%8F%96%E7%A0%81-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90%E6%92%AD%E6%94%BE-%E5%85%A8%E7%BD%91%E4%BB%98%E8%B4%B9%E9%9F%B3%E4%B9%90%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD-%E6%B7%98%E5%AE%9D-%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%A4%A7%E9%A2%9D%E8%B4%AD%E7%89%A9%E4%BC%98%E6%83%A0%E5%88%B8%E9%A2%86%E5%8F%96-%E6%94%AF%E6%8C%81%E5%8E%86%E5%8F%B2%E4%BB%B7%E6%A0%BC%E6%9F%A5%E8%AF%A2" rel="nofollow">百度网盘万能钥匙</a></p>
</li>
<li>
<p><a href="https://www.baiduyun.wiki/install.html" rel="nofollow">百度网盘直链下载助手</a></p>
<p><del>需要登录百度账号</del></p>
</li>
<li>
<p><a href="https://greasyfork.org/zh-CN/scripts/375311-%E7%AE%80%E4%B9%A6%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%B0%BE%E9%83%A8%E4%BC%98%E5%8C%96-%E5%8E%BB%E9%99%A4%E6%97%A0%E6%84%8F%E4%B9%89%E6%8E%A8%E8%8D%90" rel="nofollow">简书去广告，剪贴板尾部优化、去除无意义推荐</a></p>
</li>
<li>
<p><a href="https://greasyfork.org/zh-CN/scripts/367724-%E7%9F%A5%E4%B9%8E-%E7%AE%80%E4%B9%A6-csdn-%E5%AE%9E%E9%AA%8C%E6%A5%BC%E5%89%AA%E5%88%87%E6%9D%BF%E6%B6%88%E6%AF%92" rel="nofollow">知乎、简书、csdn、实验楼剪切板消毒</a></p>
</li>
<li>
<p><a href="https://greasyfork.org/zh-CN/scripts/372452-csdn%E8%87%AA%E5%8A%A8%E5%B1%95%E5%BC%80-%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%87%80%E5%8C%96%E5%89%AA%E8%B4%B4%E6%9D%BF-%E5%85%8D%E7%99%BB%E9%99%86" rel="nofollow">CSDN 自动展开+去广告+净化剪贴板+免登陆</a></p>
</li>
<li>
<p><a href="https://greasyfork.org/zh-CN/scripts/34479-%E7%9B%AE%E5%BD%95%E6%A0%91%E5%AF%BC%E8%88%AA" rel="nofollow">目录树导航</a></p>
</li>
<li>
<p><a href="https://greasyfork.org/zh-CN/scripts/377099-%E7%AE%80%E4%B9%A6%E5%A4%96%E9%93%BE%E5%8E%BB%E9%99%A4%E9%87%8D%E5%AE%9A%E5%90%91" rel="nofollow">简书外链去除重定向</a></p>
</li>
<li>
<p><a href="https://greasyfork.org/zh-CN/scripts/371815-%E7%AE%80%E4%B9%A6%E5%AF%BC%E5%87%BA%E6%96%87%E7%AB%A0" rel="nofollow">简书导出文章</a></p>
</li>
<li>
<p><a href="https://greasyfork.org/zh-CN/scripts/34952-%E5%85%A8%E7%BD%91vip%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%9C%8B-2019%E5%B9%B45%E6%9C%8824%E6%97%A5%E6%9B%B4%E6%96%B0-%E6%94%AF%E6%8C%81%E7%88%B1%E5%A5%87%E8%89%BA%E6%AD%A3%E7%A1%AE%E9%80%89%E9%9B%86" rel="nofollow">全网VIP会员视频免费看</a></p>
</li>
</ul>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/6fd2c88560a8">https://www.jianshu.com/p/6fd2c88560a8</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-26T13:34:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub 拉取指定子目录]]></title>
        <id>30</id>
        <link href="https://anyesu.github.io/blog/articles/30"/>
        <updated>2019-09-26T13:10:11.000Z</updated>
        <summary type="html"><![CDATA[前言 无意间发现 GitHub 竟然支持 SVN 的方式拉取代码，于是有了使用 SVN 客户端 拉取 项目子目录 代码的想法，本文做个记录。 关于拉取子目录的意图 一个项目大了之后通常会划分多个 子模块，还会加入一些 sample 项目 和 测试用例 等等，有些甚至会包含多种语言的代码，总而言之就是有很多互不相关的东西。对于使用者来说，有时候可能只用到其中一部分而其他都是无关的，拉取全部代码不仅会]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>无意间发现 <a href="https://github.com">GitHub</a> 竟然支持 <strong>SVN</strong> 的方式拉取代码，于是有了使用 <strong>SVN 客户端</strong> 拉取 <strong>项目子目录</strong> 代码的想法，本文做个记录。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/1a7b2b7ab0e9694c5ec676220b75a828ddd9c5d160d50fe25f079cf359156c47/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d366238343230633731396539303464362e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"><img src="https://camo.githubusercontent.com/1a7b2b7ab0e9694c5ec676220b75a828ddd9c5d160d50fe25f079cf359156c47/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d366238343230633731396539303464362e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt="github svn support" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-6b8420c719e904d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="max-width:100%;"></a></p>
<h3>关于拉取子目录的意图</h3>
<hr>
<p>一个项目大了之后通常会划分多个 <strong>子模块</strong>，还会加入一些 <strong>sample 项目</strong> 和 <strong>测试用例</strong> 等等，有些甚至会包含多种语言的代码，总而言之就是有很多互不相关的东西。对于使用者来说，有时候可能只用到其中一部分而其他都是无关的，拉取全部代码不仅会对阅读造成干扰，还会有时间和空间上的浪费。</p>
<h3>正文</h3>
<hr>
<p>用法参考 <a href="https://help.github.com/en/articles/support-for-subversion-clients">官方文档</a> ( 可切换为 <strong>简体中文</strong> ) 。<strong>SVN</strong> 方式的仓库地址和 <strong>浏览器地址栏</strong> 中看到的项目 <strong>URL</strong> 是一致的。</p>
<p>先 <strong>checkout</strong> 一个完整的项目：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> svn co 是 svn checkout 的缩写</span>
svn co https://github.com/anyesu/websocket</pre></div>
<p>看下目录结构</p>
<pre><code>websocket
├── branches
│   └── dev
├── tags
│   └── 0.0.1
└── trunk
    ├── LICENSE
    ├── README.md
    ├── pom.xml
    ├── websocket-chat
    ├── websocket-core
    ├── websocket-parent
    └── websocket-samples
</code></pre>
<ul>
<li>
<p><strong>trunk</strong> 代表主分支</p>
</li>
<li>
<p><strong>branches</strong> 下是其余的分支</p>
</li>
<li>
<p><strong>tags</strong> 下是所有的标签</p>
</li>
</ul>
<p>整个目录结构还是很清晰的，所以想拉取指定子目录的代码只要仓库路径跟上对应的子路径就好了。</p>
<p>比如要拉取 <a href="https://github.com/anyesu/websocket/tree/master/websocket-samples/Tomcat-Websocket">Tomcat-Websocket</a> 这个子项目：</p>
<div class="highlight highlight-source-shell"><pre>svn co https://github.com/anyesu/websocket/trunk/websocket-samples/Tomcat-Websocket</pre></div>
<p>查看提交记录可以看到只剩下当前目录相关的修改了，很干净。</p>
<p>又比如要拉取 <code>0.0.1</code> 这个版本的代码：</p>
<div class="highlight highlight-source-shell"><pre>svn co https://github.com/anyesu/websocket/tags/0.0.1 websocket-0.0.1</pre></div>
<p><strong>tag</strong> 和 <strong>branch</strong> 不一样，只有一条提交记录。</p>
<h3>其他用法</h3>
<hr>
<p>功能当然不仅仅是上面说的 <strong>checkout</strong>，而是支持 <strong>SVN</strong> 的大部分用法 ( <strong>好吧，我也不保证，自己试试吧</strong> ) ，其中就包括通过 <strong>版本库浏览器</strong> ，可以在线查看项目而不用拉代码到本地。</p>
<p><strong>IDEA</strong> 中 <strong>版本库浏览器</strong> 使用方法：</p>
<p><strong>菜单栏 VCS -&gt; Browse VCS Repository -&gt; Browse Subversion Repository -&gt; Add</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ea938e94abcda8f37094c204b0f5bf105e692b287d8f9b276c79f2e1d79bcd3b/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d623733366137626632633564383935612e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"><img src="https://camo.githubusercontent.com/ea938e94abcda8f37094c204b0f5bf105e692b287d8f9b276c79f2e1d79bcd3b/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d623733366137626632633564383935612e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt="svn browser" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-b736a7bf2c5d895a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d294f08b15a77bb66f562c76af45ba26f2680605498ec49b2631691a5a8f57a1/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d656632343135346135306663363263342e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"><img src="https://camo.githubusercontent.com/d294f08b15a77bb66f562c76af45ba26f2680605498ec49b2631691a5a8f57a1/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d656632343135346135306663363263342e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt="svn browser" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-ef24154a50fc62c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/b030acd1d6b9e53e9f4dd7566a57aead9edfc5c026e6a00cb88d5f1e66c8fa3b/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d663363646536363334366330323863362e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"><img src="https://camo.githubusercontent.com/b030acd1d6b9e53e9f4dd7566a57aead9edfc5c026e6a00cb88d5f1e66c8fa3b/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d663363646536363334366330323863362e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt="svn browser" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-f3cde66346c028c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="max-width:100%;"></a></p>
<h3>结语</h3>
<hr>
<p>上述方法 <strong>仅</strong> 适用于 <strong>GitHub</strong> ，目前还未发现其他 <strong>Git 托管平台</strong> 支持这种操作，可以参照 <a href="https://blog.csdn.net/xuyaqun/article/details/49275477" rel="nofollow">这里</a> 的方法解决。我猜，<strong>GitHub</strong> 上应该是实现 <strong>SVN 到 Git</strong> 的协议转换或者简单粗暴的建立了一个 <strong>SVN</strong> 的镜像仓库。</p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/20205df72001">https://www.jianshu.com/p/20205df72001</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-26T13:10:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lumia 950 XL 刷入 Windows 10 ARM 体验]]></title>
        <id>29</id>
        <link href="https://anyesu.github.io/blog/articles/29"/>
        <updated>2019-09-26T12:57:35.000Z</updated>
        <summary type="html"><![CDATA[前言 几个月来，关于 Windows 10 ARM 的消息一直在持续更新，还是没忍住决定尝试一波。虽然手上已经有一台 Lumia 950 了，还是淘了一台新的 Lumia 950 XL 用来做实验，在这里分享一些我的经验。 微软 Lumia 950 XL 老树新花，Windows 10 ARM 暗埋火种 IT 之家学院：微软 Lumia 950 XL 刷 Windows 10 ARM64 教程增补]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>几个月来，关于 <strong>Windows 10 ARM</strong> 的消息一直在持续更新，还是没忍住决定尝试一波。虽然手上已经有一台 <strong>Lumia 950</strong> 了，还是淘了一台新的 <strong>Lumia 950 XL</strong> 用来做实验，在这里分享一些我的经验。</p>
<ul>
<li>
<p><a href="https://www.ithome.com/0/407/645.htm" rel="nofollow">微软 Lumia 950 XL 老树新花，Windows 10 ARM 暗埋火种</a></p>
</li>
<li>
<p><a href="https://www.ithome.com/0/407/902.htm" rel="nofollow">IT 之家学院：微软 Lumia 950 XL 刷 Windows 10 ARM64 教程增补进阶版</a></p>
</li>
<li>
<p><a href="https://www.ithome.com/0/421/272.htm" rel="nofollow">神速度！刷了 Windows 10 ARM 的微软 Lumia 950 XL 正式支持 LTE 网络</a></p>
</li>
</ul>
<h3>环境</h3>
<hr>
<table role="table">
<thead>
<tr>
<th>设备</th>
<th>系统</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>PC</strong></td>
<td><strong>Windows 10 专业版 1809</strong></td>
</tr>
<tr>
<td><strong>Lumia 950 XL</strong></td>
<td><strong>Windows 10 Mobile 10586.13169</strong></td>
</tr>
</tbody>
</table>
<h3>注意事项</h3>
<hr>
<ul>
<li>
<p><strong>下面的操作可能会导致不可挽回的数据丢失甚至手机不可用，请做好数据备份。</strong></p>
</li>
<li>
<p><strong>请仔细阅读本文和 <a href="https://github.com/WOA-Project/WOA-Deployer-Lumia">官网文档</a> ，确保理解每一步操作的目的之后再谨慎操作。如果真的损坏了我也无能为力。</strong></p>
</li>
<li>
<p>原则上只适用于 <strong>Lumia 950</strong> 和 <strong>Lumia 950 XL</strong> ，考虑到性能问题，还是推荐 <strong>Lumia 950 XL</strong> 。为了避免未知的问题，不建议使用 <strong>主力机</strong> 和 不可靠的 <strong>二手机</strong> 。</p>
</li>
<li>
<p>下面所有操作中最耗时的就是联网下载，所以网络很重要。另外，发现半夜 <strong>0 点</strong> 以后网络会好很多。有条件的请自备 <strong>VPN</strong> ，其实主要还是取决于服务端的网络情况，<strong>空闲时间段</strong> 会好点。</p>
</li>
<li>
<p>在操作前请保持 <strong>充足的电量</strong> ，避免带来不必要的问题。</p>
<p>( 有些操作过程中 <strong>USB</strong> 可能不会供电 )</p>
</li>
<li>
<p>注意下面操作的顺序，不按顺序操作可能会导致一些未知的问题。</p>
</li>
</ul>
<h3>解锁手机启动引导程序 ( <a href="https://github.com/WOA-Project/guides/blob/master/BL-unlock.md">参考官方文档</a> )</h3>
<hr>
<h5>准备工作</h5>
<ul>
<li>
<p>下载 <a href="https://wpinternals.net/index.php/downloads" rel="nofollow">WPInternals</a> - 解锁工具。</p>
<p>目前最新版是 <code>2.8</code> 。</p>
</li>
<li>
<p>下载 <a href="https://support.microsoft.com/en-us/help/12379/windows-10-mobile-device-recovery-tool-faq" rel="nofollow">Windows Device Recovery Tools</a> - 刷机工具，用于安装电脑驱动和手机恢复。</p>
<p>目前最新版是 <code>3.14.7501</code> 。</p>
</li>
<li>
<p>一个良好的网络，因为之后需要下载约 <strong>3 GB</strong> 大小的数据。</p>
</li>
<li>
<p>检查手机的 <strong>Windows 10 Mobile</strong> 版本，如果版本号大于 <code>10.0.15254.547</code> 则无法进行解锁，只能等待新版本的 <strong>WPInternals</strong> 或者将手机刷回旧版本的系统。</p>
</li>
</ul>
<h5>操作步骤</h5>
<ul>
<li>
<p>安装 <strong>Windows Device Recovery Tools</strong> ( 会下载安装一些 <strong>后面需要用到的驱动</strong> ) ，安装后不需要打开。这个过程网络不好会很慢，请耐心等待 ( 在这个过程中可以同时去下载系统镜像 ) 。</p>
</li>
<li>
<p>手机移除 <strong>SD 卡</strong> ，并连接到电脑上。虽然不知道插卡会带来什么问题，还是照做比较好。</p>
</li>
<li>
<p>解压并打开 <strong>WPInternals</strong> ，选择 <strong>Platform - Download</strong> 菜单，在 <strong>Model</strong> 部分会列出手机的设备类型和相关编码 ( 输入框如果没有自动填写则需要自己手动填写，内容见 <strong>Phone - Info</strong> 菜单 ) 。点击 <strong>Search</strong> 按钮，下面会列出相关的文件，再点击 <strong>Download all</strong> 按钮进行下载。下载路径默认为 <strong>C:\ProgramData\WPinternals\Repository</strong> ，可自定义为其他目录，后面需要用到这些文件 ( <strong>三个</strong> ) 。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/95aaa07b74f956e6a8ff11f4363a4f7763ccf5b7818e27630a46abf974e9bf5d/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d383837316339346638663737323933612e706e67"><img src="https://camo.githubusercontent.com/95aaa07b74f956e6a8ff11f4363a4f7763ccf5b7818e27630a46abf974e9bf5d/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d383837316339346638663737323933612e706e67" alt="WPInternals" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-8871c94f8f77293a.png" style="max-width:100%;"></a></p>
</li>
<li>
<p>上一步的文件下载完毕就可以开始解锁了：选择 <strong>Unlock - Unlock bootloader</strong> 菜单，点击 <strong>OK</strong> 按钮，手机将重启切换到 <strong>刷机模式</strong> ( 深蓝色背景只显示一个 <strong>循环图标</strong> 的界面 ) 。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6d43eb7bc5355d1b3559fb5462d2ce6c5c945c8caafb2218e119b6a892190348/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d386264343432323065366132613461352e706e67"><img src="https://camo.githubusercontent.com/6d43eb7bc5355d1b3559fb5462d2ce6c5c945c8caafb2218e119b6a892190348/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d386264343432323065366132613461352e706e67" alt="WPInternals-unlock" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-8bd44220e6a2a4a5.png" style="max-width:100%;"></a></p>
</li>
<li>
<p><strong>WPinternals</strong> 在随后显示的页面中选择上一步的下载文件路径 ( 如果之前没有修改下载目录则不用动了 ) ，点击 <strong>Unlock</strong> 按钮开始解锁。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/81812ab2487790b5c99f3f4e88b8dd65597466be99de2158921483783096d935/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d303132326464623531376537343662382e706e67"><img src="https://camo.githubusercontent.com/81812ab2487790b5c99f3f4e88b8dd65597466be99de2158921483783096d935/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d303132326464623531376537343662382e706e67" alt="WPInternals-unlock" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-0122ddb517e746b8.png" style="max-width:100%;"></a></p>
<p>这个步骤会反复重启写入数据，手机屏幕显示红色背景。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/58088e02b25b332d43b7b50955716a2d6404a6d1007eb7143c5cf31bfbfaf717/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613230316435396562393239386563322e706e67"><img src="https://camo.githubusercontent.com/58088e02b25b332d43b7b50955716a2d6404a6d1007eb7143c5cf31bfbfaf717/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613230316435396562393239386563322e706e67" alt="WPInternals-unlock" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-a201d59eb9298ec2.png" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/8339ee1d9750621b666302e93fd04578f6ecadc5303dcb3baad6deff8ce89a0f/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d336461356134376164643732643638642e706e67"><img src="https://camo.githubusercontent.com/8339ee1d9750621b666302e93fd04578f6ecadc5303dcb3baad6deff8ce89a0f/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d336461356134376164643732643638642e706e67" alt="WPInternals-unlock" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-3da5a47add72d68d.png" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/435693e60f6754ab6fe6de3dfab0c5cb35a5ee24e2a8718d86f87808ebf22b04/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d306238333761303734306537356638662e706e67"><img src="https://camo.githubusercontent.com/435693e60f6754ab6fe6de3dfab0c5cb35a5ee24e2a8718d86f87808ebf22b04/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d306238333761303734306537356638662e706e67" alt="WPInternals-unlock" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-0b837a0740e75f8f.png" style="max-width:100%;"></a></p>
<p>中间过程会出现下面的界面，需要 <strong>手动</strong> 重启手机 ( <strong>长按电源键 10 秒左右直到震动</strong> )  以继续。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ae5d0fe48f43fbcb7263db7dbfafe13c0777fcdcddd95e5ee454156226932ece/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d383265346335663533663166663738322e706e67"><img src="https://camo.githubusercontent.com/ae5d0fe48f43fbcb7263db7dbfafe13c0777fcdcddd95e5ee454156226932ece/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d383265346335663533663166663738322e706e67" alt="WPInternals-unlock" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-82e4c5f53f1ff782.png" style="max-width:100%;"></a></p>
<p>继续刷入数据。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d6d84c802b0f8a875c4936cdcd6d7a2a9326f57c117901ca9a08ae18c287ba84/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d633962616436353439656136386439652e706e67"><img src="https://camo.githubusercontent.com/d6d84c802b0f8a875c4936cdcd6d7a2a9326f57c117901ca9a08ae18c287ba84/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d633962616436353439656136386439652e706e67" alt="WPInternals-unlock" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-c9bad6549ea68d9e.png" style="max-width:100%;"></a></p>
<p>解锁成功，手机会自动重启。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/fbbd77d4324188766f321378ddcb869fc87de633385fd1b87475ef76ff5fe9fd/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d373963643033383732346633623461342e706e67"><img src="https://camo.githubusercontent.com/fbbd77d4324188766f321378ddcb869fc87de633385fd1b87475ef76ff5fe9fd/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d373963643033383732346633623461342e706e67" alt="WPInternals-unlock" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-79cd038724f3b4a4.png" style="max-width:100%;"></a></p>
<p><strong>上面步骤多次执行可能会遇到一些不一样的情况，请根据提示进行处理。</strong></p>
<p>想重新 <strong>锁定手机启动引导程序</strong> ，选择 <strong>Unlock - Restore bootloader</strong> 菜单， 类似于上面的解锁步骤。</p>
</li>
</ul>
<h3>下载 Windows 10 ARM64 系统镜像 ( <a href="https://github.com/WOA-Project/guides/blob/master/GettingWOA.md">参考官方文档</a> )</h3>
<hr>
<ul>
<li>
<p>进入这个网站：<a href="https://uup.rg-adguard.net" rel="nofollow">https://uup.rg-adguard.net</a> 。</p>
</li>
<li>
<p>选择镜像的版本，注意要 <strong>arm64</strong> 版本的。这里我选择最新的 <strong>1903 专业版 [arm64]</strong> 。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d7ff0eec60b9ed1adc2af6d00fcb2f263e81c1bab6923bad29130931054802e3/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d653363663531616466363331316364392e706e67"><img src="https://camo.githubusercontent.com/d7ff0eec60b9ed1adc2af6d00fcb2f263e81c1bab6923bad29130931054802e3/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d653363663531616466363331316364392e706e67" alt="镜像下载页面" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-e3cf51adf6311cd9.png" style="max-width:100%;"></a></p>
</li>
<li>
<p>选择右边的脚本链接，点击直接下载脚本。</p>
</li>
<li>
<p>双击运行下载好的脚本 ( <strong>creatingISO_xxx_arm64_professional.cmd</strong> ) ，会在脚本目录下下载并编译 <strong>ISO</strong> 文件。<strong>最好有 10 GB 以上的可用空间</strong> 。</p>
</li>
</ul>
<h3>安装 Windows 10 ARM64</h3>
<hr>
<ul>
<li>
<p>手机连接到电脑。</p>
</li>
<li>
<p>打开 <strong>WPinternals</strong> ，选择 <strong>Phone - Manual mode</strong> 菜单，点击 <strong>Switch to Mass-Storage-mode</strong> 按钮切换手机到 <strong>大容量存储模式</strong> ( 手机会一直黑屏 ) 。</p>
</li>
<li>
<p>加载上一步下载的系统镜像到虚拟光驱：右键镜像文件 ( .ISO ) -&gt; 打开方式 -&gt; Windows 资源管理器。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0d12626939ca505b7a4156f1a15995fef39109133ff3d7dfe82bb0b36fb23554/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d653635353061633830653264383864362e706e67"><img src="https://camo.githubusercontent.com/0d12626939ca505b7a4156f1a15995fef39109133ff3d7dfe82bb0b36fb23554/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d653635353061633830653264383864362e706e67" alt="系统镜像加载到虚拟光驱" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-e6550ac80e2d88d6.png" style="max-width:100%;"></a></p>
</li>
<li>
<p>下载最新版的 <a href="https://github.com/WOA-Project/WOA-Deployer-Lumia/releases">WOA Deployer for Lumia</a> 。</p>
<p>目前最新版是 <code>2.5.2</code> 。</p>
</li>
<li>
<p>解压 <strong>WOA.Deployer.zip</strong> ，进入文件夹打开 <strong>WoaDeployer.exe</strong> 。</p>
</li>
<li>
<p><strong>WIM file</strong> 项选择刚才的镜像虚拟光驱，进入 <strong>sources</strong> 目录，选择文件 <strong>install.wim</strong> 。</p>
</li>
<li>
<p>点击 <strong>Deploy</strong> 按钮开始部署。这个过程会去下载相关的手机固件和驱动，速度取决于网络情况。</p>
</li>
<li>
<p>安装好之后会出现下面的弹框，点击 <strong>CONTINUE</strong> 按钮以继续。之后杀毒软件可能会报警，请允许操作。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/70616f65b3d89073b37e05e9830b68848139250a0b2ed7d46e6dbb9fe4c27bcd/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d643464663362376565663362646664392e706e67"><img src="https://camo.githubusercontent.com/70616f65b3d89073b37e05e9830b68848139250a0b2ed7d46e6dbb9fe4c27bcd/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d643464663362376565663362646664392e706e67" alt="WoaDeployer" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-d4df3b7eef3bdfd9.png" style="max-width:100%;"></a></p>
</li>
<li>
<p>之后会进行 <strong>分区配置</strong> 、<strong>数据写入</strong> 和 <strong>驱动安装</strong> ，完毕会出现下面两个弹框，点击 <strong>CLOSE</strong> 即可。谨慎起见可以仔细阅读相关的内容。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/632b62fd774ca0df2453ed6383a7ec832a7a6297c86d2b92336301cf65a515cc/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d343535353936353430643564636533352e706e67"><img src="https://camo.githubusercontent.com/632b62fd774ca0df2453ed6383a7ec832a7a6297c86d2b92336301cf65a515cc/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d343535353936353430643564636533352e706e67" alt="WoaDeployer" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-455596540d5dce35.png" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d6d07dc36a6c5774f839f362cb71cca76ab8cccce42069923e5d1b634e2d6e9e/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d303239333638656436373437373436312e706e67"><img src="https://camo.githubusercontent.com/d6d07dc36a6c5774f839f362cb71cca76ab8cccce42069923e5d1b634e2d6e9e/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d303239333638656436373437373436312e706e67" alt="WoaDeployer" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-029368ed67477461.png" style="max-width:100%;"></a></p>
</li>
<li>
<p>重启手机 ( <strong>长按电源键 10 秒左右直到震动</strong> ) 。</p>
</li>
<li>
<p>这时手机出现了 <strong>PC</strong> 上的那种启动引导界面，选择默认的 <strong>Windows 10</strong> 项启动。</p>
<p>操作方式：<strong>音量键</strong> - 上下切换，<strong>拍照键</strong> - 确定。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ce3aef49e6d15f4da1726bba8dd0de1a77b2f105ea286448af6a6ead6a7b1ce5/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d616365656635363534623464363461382e706e67"><img src="https://camo.githubusercontent.com/ce3aef49e6d15f4da1726bba8dd0de1a77b2f105ea286448af6a6ead6a7b1ce5/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d616365656635363534623464363461382e706e67" alt="手机启动引导程序界面" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-aceef5654b4d64a8.png" style="max-width:100%;"></a></p>
</li>
<li>
<p>之后就是熟悉的 <strong>Windows 安装过程</strong> 了，不详细讲了，耐心等待即可。<strong>需要注意</strong>：中间会有几分钟的 <strong>黑屏</strong> 过程，请耐心等待，不要手贱重启手机 ( 会导致安装出错，就要重新安装了 ) 。</p>
</li>
<li>
<p>安装完毕会自动 <strong>重启</strong> 手机，重新进入 <strong>Windows 10</strong> ，开头会提示是否要安装驱动，选择 <strong>确定</strong> 就好，之后按照自己的需求进行配置。</p>
</li>
</ul>
<h3>设置 Win10 ARM 和 Win10 Mobile 双系统切换</h3>
<hr>
<p>通过上面的步骤我们已经成功安装了 <strong>Windows 10 ARM64</strong> ，这并不会覆盖默认的手机系统，只是屏蔽了而已，通过下面的步骤我们可以开启双系统切换。</p>
<ul>
<li>
<p>重启手机，启动引导界面选择 <strong>Developer - USB Mass Storage Mode</strong> ，切换到 <strong>大容量存储模式</strong> 。</p>
</li>
<li>
<p>打开 <strong>WOA Deployer for Lumia</strong></p>
</li>
<li>
<p>选择 <strong>Dual Boot</strong> 菜单</p>
</li>
<li>
<p>点击 <strong>Check Status</strong> 按钮检查状态。</p>
</li>
<li>
<p>点击 <strong>Enable Dual Boot</strong> 按钮，开启成功会弹框提示。</p>
</li>
<li>
<p>电脑移除手机，再重启手机，这时引导界面已经能看到 <strong>Windows 10 Phone</strong> 选项了。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/49bda9b476c933e25a29c490cf27a008d6892830e33cddf7f630798163c796e8/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d383539663630623131323962346431392e706e67"><img src="https://camo.githubusercontent.com/49bda9b476c933e25a29c490cf27a008d6892830e33cddf7f630798163c796e8/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d383539663630623131323962346431392e706e67" alt="手机启动引导程序界面-双系统" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-859f60b1129b4d19.png" style="max-width:100%;"></a></p>
</li>
</ul>
<h3>关于卸载 Windows 10 ARM64</h3>
<hr>
<p>目前没找到纯粹的卸载方法，只能选择重置手机。</p>
<ul>
<li>
<p><del>方案一</del></p>
<p>如果手机一切正常，进入 <strong>Windows 10 Phone</strong> 系统，使用自带的方式来 <strong>重置</strong> :</p>
<p><strong>设置 -&gt; 系统 -&gt; 关于 -&gt; 重置手机</strong></p>
<p>额，打脸了。这个方式重试了几遍都不行，也是无限重启的节奏。。</p>
</li>
<li>
<p>方案二</p>
<p>如果手机已经无法正常启动了，可以用这个方案 ( 手机正常也可以用这个方案 )</p>
<p>使用 <strong>Windows Device Recovery Tools</strong> 工具刷机，速度很快，具体步骤见下文。</p>
</li>
</ul>
<h3>关于手机恢复</h3>
<hr>
<p>按照官方文档的教程，本来已经一次性完美结束上面的步骤。后来为了写这篇教程，想反向操作 ( 重新锁定然后再解锁 ) 后重走一遍流程，结果一波瞎操作把手机弄挂了，还好可以通过 <strong>Windows Device Recovery Tools</strong> 刷机来恢复手机。<strong>所以，在这里再次提醒大家，操作需谨慎。</strong></p>
<p>恢复步骤很简单：</p>
<ul>
<li>
<p>打开 <strong>Windows Device Recovery Tools</strong> 。</p>
</li>
<li>
<p>正常情况下会自动识别，但是手机挂了就不行了，这时点击 <strong>未检测到我的手机</strong> ，选择 <strong>Lumia</strong>，等待连接。</p>
</li>
<li>
<p>连接手机并重启手机。像我的手机会无限重启，重启后被 <strong>Windows Device Recovery Tools</strong> 识别到就会自动切换 <strong>模式</strong> 而退出这种死循环。</p>
</li>
<li>
<p>连接上手机就会显示类似下面的内容</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6bf8e6d7cd5444d4983000adb18d2b15876319996304a538309f29f5fb4f4018/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613864636365316361353233643238332e706e67"><img src="https://camo.githubusercontent.com/6bf8e6d7cd5444d4983000adb18d2b15876319996304a538309f29f5fb4f4018/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613864636365316361353233643238332e706e67" alt="Windows Device Recovery Tools" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-a8dcce1ca523d283.png" style="max-width:100%;"></a></p>
</li>
<li>
<p>点击 <strong>安装软件</strong> 即可。之后会自动联网搜索可用的软件包并下载安装。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/a4989b041aab9c7c5241bba6f9614fbffffca9fb559406cc106b90b63a8c90e2/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d643165303037613162353137323832392e706e67"><img src="https://camo.githubusercontent.com/a4989b041aab9c7c5241bba6f9614fbffffca9fb559406cc106b90b63a8c90e2/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d643165303037613162353137323832392e706e67" alt="Windows Device Recovery Tools" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-d1e007a1b5172829.png" style="max-width:100%;"></a></p>
<p>软件包只有第一次不存在的时候才会去联网下载，之后就可以直接用下载好的软件包刷机即可，不用反复下载。</p>
<p>点击 <strong>Windows Device Recovery Tools</strong> 窗口右下角的 <strong>三个点</strong> 按钮可以展开底部菜单，点击里面的 <strong>设置</strong> 按钮，选择 <strong>软件包</strong> 菜单，设置自定义下载路径，方便之后备份和迁移。</p>
<p>值得一提的是，打开下载路径可以发现，里面有一个 <strong>.ffu</strong> 文件，它和 <strong>WPinternals</strong> 解锁步骤下载的文件是同一个，所以复制过来就好了，不用再下载了。</p>
</li>
<li>
<p>整个刷机过程 ( 手机显示 <strong>红色</strong> 背景色，最后可能会亮一下 <strong>绿色</strong> ) 大概 <strong>5 分钟</strong> 左右，成功后手机会自动重启并进入初始系统配置界面，按引导进行设置即可。</p>
<p><strong>有时候一次可能不成功，重新再刷一遍就好了。</strong></p>
</li>
</ul>
<p>刷机恢复的过程还是很简单的，但不代表就可以 <strong>随意</strong> 操作了，这只是个 <strong>备用方案</strong> ，最好还是期望 <strong>不要</strong> 用到它。如果出现 <strong>未知问题</strong> 或者 <strong>硬件损坏</strong>，那么 <strong>恢复工具</strong> 也无解了。所以还是那句话，要 <strong>谨慎操作</strong> 。</p>
<h3>使用感受</h3>
<hr>
<ul>
<li>
<p>开机启动非常慢。</p>
</li>
<li>
<p>整体还算流畅，触摸稍微有点卡，<strong>平板模式</strong> 下可以弹出屏幕键盘。</p>
</li>
<li>
<p>触摸不是很方便，买了一个 <strong>OTG 转接头 ( Type-C )</strong> ，打算连接 <strong>键鼠</strong> 进行操作。不过，发现目前还不支持 <strong>USB</strong> 。</p>
</li>
<li>
<p>手机 <strong>SIM</strong> 卡能识别，但是无法使用 <strong>移动数据</strong> 上网。据最新消息显示应该是已经支持 <strong>LTE</strong> 网络了，难道和我的 <strong>移动 4G</strong> 有关系？</p>
</li>
<li>
<p>声音只能开启或者关闭，不能调节大小。</p>
</li>
<li>
<p>不要使用 <strong>Boot Manager</strong> 提供的 <strong>重置模式</strong> 来重置手机，会导致无限重启。不相信的可以试试。</p>
</li>
</ul>
<h3>结语</h3>
<hr>
<p><strong>伪 · Surface Phone</strong> 已经出来了，<strong>真 · Surface Phone</strong> 还会远吗？</p>
<h5>未完待续...</h5>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/1a336b3053f4">https://www.jianshu.com/p/1a336b3053f4</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-26T12:57:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[IntelliJ IDEA 插件和经验分享]]></title>
        <id>28</id>
        <link href="https://anyesu.github.io/blog/articles/28"/>
        <updated>2019-09-25T14:22:54.000Z</updated>
        <summary type="html"><![CDATA[前言 工欲善其事必先利其器，用 IntelliJ IDEA 开发几年了，它带来工作效率上的提升是很显著的。本文分享一些好用的插件和经验。 插件 activate-power-mode 酷炫的代码编辑效果。玩玩就行了。 Alibaba Java Coding Guidelines 基于 Java 开发手册 的 Java 代码规约扫描插件 。对于不符合规范的代码会提示 推荐用法 或 快捷修复 ，有代码]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>工欲善其事必先利其器，用 <strong>IntelliJ IDEA</strong> 开发几年了，它带来工作效率上的提升是很显著的。本文分享一些好用的插件和经验。</p>
<h3>插件</h3>
<hr>
<ul>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/8330-activate-power-mode" rel="nofollow">activate-power-mode</a></p>
<p>酷炫的代码编辑效果。玩玩就行了。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines" rel="nofollow">Alibaba Java Coding Guidelines</a></p>
<p>基于 <a href="https://github.com/alibaba/p3c">Java 开发手册</a> 的 <strong>Java 代码规约扫描插件</strong> 。对于不符合规范的代码会提示 <strong>推荐用法</strong> 或 <strong>快捷修复</strong> ，有代码洁癖的小伙伴赶紧去用吧。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/4230-bashsupport" rel="nofollow">BashSupport</a></p>
<p>提供对 <strong>Bash</strong> 语言的支持，支持运行配置、语法高亮、改名重构、查看注释文档、语法检查、命令提示，最主要还是可以做 <strong>代码跳转</strong>。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/12321-battery-status" rel="nofollow">Battery Status</a></p>
<p>在 <strong>IDEA 状态栏</strong> 显示 <strong>电池状态</strong> 。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/7275-codeglance" rel="nofollow">CodeGlance</a></p>
<p>在滚动条边上显示代码文件内容缩略图，可以快速定位到指定位置。玩玩就行了。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/8580-cpu-usage-indicator" rel="nofollow">CPU Usage Indicator</a></p>
<p>在 <strong>IDEA 状态栏</strong> 显示 <strong>CPU 使用率</strong> 。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/10524-element" rel="nofollow">element</a></p>
<p>提供对 <a href="https://element.eleme.cn/" rel="nofollow">饿了么 Element UI 组件库</a> 的支持。前端开发有用。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/9525--env-files-support" rel="nofollow">.env files support</a></p>
<p>提供对 <strong>.env</strong> 文件的支持。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/7296-ejs" rel="nofollow">EJS</a></p>
<p>提供对 <a href="https://ejs.bootcss.com/" rel="nofollow">EJS 模板引擎</a> 的支持。前端开发有用。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/7494-eslint" rel="nofollow">ESLint</a></p>
<p>提供 <a href="https://cn.eslint.org/" rel="nofollow">ESLint</a> 的支持，用于前端代码的检查和快速修复。前端开发有用。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/7177-file-watchers" rel="nofollow">File Watchers</a></p>
<p>用于监听文件变化，可以用于 <a href="https://prettier.io/docs/en/webstorm.html#running-prettier-on-save-using-file-watcher" rel="nofollow">前端代码保存的时候自动格式化</a> 。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/7125-grep-console" rel="nofollow">Grep Console</a></p>
<p>主要用于日志输出颜色控制 ( 但是 error 日志打印只有首行有颜色 ) 。</p>
<p>配色清单 ( 只设置前景色，不设置背景色 ) ：</p>
<table role="table">
<thead>
<tr>
<th>日志级别</th>
<th>颜色</th>
</tr>
</thead>
<tbody>
<tr>
<td>.*VERBOSE.*</td>
<td>BBBBBB</td>
</tr>
<tr>
<td>.*DEBUG.*</td>
<td>0070BB</td>
</tr>
<tr>
<td>.*INFO.*</td>
<td>48BB31</td>
</tr>
<tr>
<td>.*WARN.*</td>
<td>BBBB23</td>
</tr>
<tr>
<td>.*ERROR.*</td>
<td>FF6464</td>
</tr>
<tr>
<td>.*ASSERT.*</td>
<td>8F0005</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/7495--ignore" rel="nofollow">.ignore</a></p>
<p>提供对 <strong>.ignore</strong> 文件的支持。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/9195-jb-sdk-bintray-downloader" rel="nofollow">JB SDK Bintray Downloader</a></p>
<p>用于切换 <strong>IDEA</strong> 自带的 <strong>JVM</strong> 。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/4441-jrebel-for-intellij" rel="nofollow">JRebel for IntelliJ</a></p>
<p><strong>Java 热部署插件</strong> ，大部分场景下修改了代码只要 <code>Ctrl + B</code> 编译下代码就即时生效了，无需频繁重启项目。比起 <strong>SpringBoot</strong> 的 <strong>devtools</strong> 好用多了。<strong>另外，不建议开启自动编译，很消耗性能。</strong></p>
<p><a href="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/jrebel-setup.html" rel="nofollow">安装教程</a>   <a href="https://www.hexianwei.com/2019/07/10/jrebel%E6%BF%80%E6%B4%BB/" rel="nofollow">破解教程</a></p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/6317-lombok" rel="nofollow">Lombok</a></p>
<p>提供对 <a href="https://projectlombok.org/features/all" rel="nofollow">Lombok</a> 的支持。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/7793-markdown-support" rel="nofollow">Markdown support</a></p>
<p>默认集成的 <strong>Markdown</strong> 插件，除了不支持 <strong>emoji</strong> 表情，其他都够用了。</p>
<p><strong>win10</strong> 下高分辨率设置了 <strong>显示缩放</strong> 会导致 <strong>Markdown 的预览效果页面</strong> 文字很模糊。</p>
<p>解决办法：使用 <strong>JB SDK Bintray Downloader</strong> 插件升级到最新的 <strong>JB SDK</strong>  ( <a href="https://blog.csdn.net/zdxxinlang/article/details/78391060" rel="nofollow">参考</a> ) ，或者使用自己下载的 <strong>JDK</strong> ( <a href="https://blog.csdn.net/zaemyn2015/article/details/84584458" rel="nofollow">参考</a> ) 。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/8006-material-theme-ui" rel="nofollow">Material Theme UI</a></p>
<p>主题插件，用于配置 <strong>IDEA</strong> 的 <strong>UI 组件</strong> 的显示效果。刚开始用可能会比较刺眼，一个月使用下来已经习惯了。</p>
<p>我的配置方案：</p>
<pre><code>File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; Material Theme
( 当然也可以直接点击状态栏的小图标直接进入 )

基础模版选择 Material Oceanic

Compact: 勾选 StatusBar / Table Cells / Dropdown Lists / Menus
Project View: Sidebar Height 设置为 22
Components: 取消勾选 Uppercase buttons

另外编辑区的背景色改成和主体背景色一样的 #263238
</code></pre>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/7179-maven-helper" rel="nofollow">Maven Helper</a></p>
<p>用于 <strong>Maven</strong> 依赖冲突检查 ( <a href="https://blog.csdn.net/keketrtr/article/details/52513671" rel="nofollow">参考</a> ) 。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/7293-mybatis-plugin" rel="nofollow">MyBatis plugin</a></p>
<p>提供对 <strong>MyBatis</strong> 的支持，支持 <strong>Mapper.java</strong> 和 <strong>Mapper.xml</strong> 之间相互的代码跳转，根据 <strong>Mapper.java</strong> 自动生成对应的 <strong>Mapper.xml</strong> 和 <strong>SQL</strong> 等功能。这个插件是收费的，破解方法参考 <a href="https://github.com/myoss/profile/blob/master/idea/plugin/MybatisPlugin/Mybatis-Plugin%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.txt">这里</a> ，破解版虽然能用，但是启动的时候还是会花几十秒联网校验，导致 <strong>IDEA</strong> 启动很慢。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/10119-mybatisx" rel="nofollow">MyBatisX</a></p>
<p><strong>MyBatis plugin</strong> 的免费替代品，功能相对少一点。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin" rel="nofollow">MyBatis Log Plugin</a></p>
<p>用于将 <strong>MyBatis</strong> 输出的日志转为实际执行的具体 <strong>SQL</strong> 。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/4415-nginx-support" rel="nofollow">nginx Support</a></p>
<p>提供对 <strong>Nginx</strong> 配置文件的支持，支持 <strong>语法高亮</strong> 和 <strong>语法提示</strong> 。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/10456-prettier" rel="nofollow">Prettier</a></p>
<p>提供对 <strong>Prettier</strong> 的支持 ( <a href="http://web.jobbole.com/94786/" rel="nofollow">参考</a> ) 。需要自己设置格式化快捷键或者配合上面的 <strong>File Watchers</strong> 使用。前端开发有用。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/10292-restfultoolkit" rel="nofollow">RestfulToolkit</a></p>
<p>通过快捷键 <code>Ctrl + \</code> 快速检索项目中定义的 <strong><a class="user-mention" data-hovercard-type="user" data-hovercard-url="/users/RequestMapping/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/RequestMapping">@RequestMapping</a></strong> ，支持模糊搜索。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation" rel="nofollow">String Manipulation</a></p>
<p>字符串格式转换工具，比如大小写，驼峰与下划线互转，自己试试就知道了。快捷键 <code>Alt + M</code> 。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/8579-translation" rel="nofollow">Translation</a></p>
<p>翻译插件，对于英语渣渣来说很有用，看源码不用再切出去百度了。我设置的翻译快捷键是 <code>Alt + Z</code> 。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/183-upperlowercapitalize" rel="nofollow">UpperLowerCapitalize</a></p>
<p>大小写切换插件， <code>Alt + P</code> 切换到全大写， <code>Alt + L</code> 切换到全小写。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/9442-vue-js" rel="nofollow">Vue.js</a></p>
<p>提供对 <a href="https://vuejs.org/" rel="nofollow">Vue.js</a> 的支持。前端开发有用。</p>
</li>
<li>
<p><a href="https://plugins.jetbrains.com/plugin/11269-who-did-it" rel="nofollow">who did it</a></p>
<p>目录树文件名后面像 <strong>Eclipse</strong> 一样显示 <strong>版本控制 ( Git / SVN )</strong> 的最后修改人/时间，没必要还是不要开了，有点卡。</p>
</li>
</ul>
<p>把 <a href="https://plugins.jetbrains.com/search?pr=idea&amp;pr_productId=idea&amp;orderBy=downloads&amp;correctionAllowed=false&amp;offset=0&amp;max=10" rel="nofollow">插件市场</a> 3000+ 的插件都大概浏览了一遍，稍微实用点的都列在上面了 ( <strong>按名称排序</strong> ) ，剩下还有一些 <strong>其他语言</strong> 、<strong>框架</strong> 相关的插件自己去搜一下吧。</p>
<h3>使用经验</h3>
<hr>
<ul>
<li>
<p><strong>关于激活</strong></p>
<p><del>注册码点击 <a href="http://idea.lanyus.com/" rel="nofollow">这里</a> 获取</del> ( 目前已暂停提供激活码 ) ，需要把下面的配置加入到 <strong>hosts</strong> 文件中。有条件的还是支持下正版吧。</p>
<pre><code>0.0.0.0 account.jetbrains.com
# 下面这个是官网，2019.1版本起，IDEA启动的时候会从官网校验注册码，所以需要屏蔽，需要访问官网时再注释掉配置
0.0.0.0 www.jetbrains.com
</code></pre>
</li>
<li>
<p><strong>关于升级</strong></p>
<p>建议一直保持最新版，官网的 <a href="https://www.jetbrains.com/idea/whatsnew/" rel="nofollow">更新日志</a> 写的很详细了，可以好好阅读下。如果不放心，可以迟几小个版本。更新前最好做好配置文件的备份 ( <strong>Windows</strong> 在 <code>%HOMEPATH%</code> 目录下，比如 <code>.IntelliJIdea2019.1</code> ) 。</p>
</li>
<li>
<p><strong>全局检索</strong></p>
<p><code>2018.3</code> 版本起，双击 <code>shift</code> 即可调出全新的 <strong>Search Everywhere</strong> ，合并了原先 <strong>类、文件、符号、Action</strong> 的搜索。</p>
</li>
<li>
<p><strong>运行一切</strong></p>
<p><code>2018.3</code> 版本起，双击 <code>Ctrl</code> 调出窗口，可以执行 <strong>运行配置</strong> 或者 <strong>终端命令</strong>。在这个窗口下按 <code>shift</code> 切换 <code>run/debug</code> 模式。</p>
</li>
<li>
<p><strong>关于配色方案</strong></p>
<p>我的 <strong>配色方案</strong> 用了几年了，还不错，不过找不到原始地址了。分享一个 <a href="http://www.easycolor.cc/" rel="nofollow">项目</a> ，自己选一个合适的 <strong>配色方案</strong> 吧，不刺眼不太暗的，眼睛看着舒服点的比较好。</p>
</li>
<li>
<p><strong>关于快捷键</strong></p>
<p>File -&gt; Settings -&gt; Keymap，我更习惯 <strong>eclipse</strong> 风格的快捷键。</p>
</li>
<li>
<p><strong>启动时不打开工程</strong></p>
<p>File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Startup/Shutdown 标签项 -&gt; 去掉 Reopen last project on startup 。</p>
</li>
<li>
<p><strong>备份个性化设置</strong></p>
<p>File -&gt; Export Settings 。</p>
</li>
<li>
<p><strong>Project 目录隐藏无关的配置文件</strong></p>
<p>File -&gt; Settings -&gt; Editor -&gt; File Types -&gt; Ignore files and folders 追加下面内容 ( 注意分号隔开 ) 。</p>
<pre><code>*.log;*.iml;.idea;.classpath;.project;.settings;
</code></pre>
</li>
<li>
<p><strong>打开之后自动启动项目</strong></p>
<p>File -&gt; Settings -&gt; Tools -&gt; Startup Tasks 自行添加运行配置。</p>
</li>
<li>
<p><strong>Version Control</strong></p>
<p>集成各种 <strong>版本控制</strong> 工具的客户端，也是我用过 <strong>Windows</strong> 平台下最好用的 <strong>Git</strong> 客户端 ，没有之一。</p>
</li>
<li>
<p><strong>Decompiler</strong></p>
<p>反编译 <strong>class</strong> 专用，谁用谁知道。要是整个 <strong>Jar 包</strong> 反编译还是用 <a href="https://github.com/java-decompiler/jd-gui">JD-GUI</a> 吧。</p>
</li>
<li>
<p><strong>Terminal</strong></p>
<p>轻量好用的终端工具，不仅支持本地命令执行，还能连接远程主机，可以 <code>Ctrl + C/V</code> 二连很重要。</p>
</li>
<li>
<p>搭配 <strong>Docker</strong> 使用</p>
<p>详见 <a href="https://www.jianshu.com/p/410ea6e0b13a" rel="nofollow">IntelliJ IDEA 使用 Docker 远程部署</a> 。</p>
</li>
<li>
<p><a href="https://blog.csdn.net/aaashen/article/details/46740817" rel="nofollow">不识别文件类型的解决方案</a></p>
</li>
<li>
<p><a href="https://jingyan.baidu.com/article/f96699bb040a63894e3c1bde.html" rel="nofollow">IntelliJ IDEA 如何查看或显示实时内存</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/mingjie1212/article/details/52281847" rel="nofollow">配置 Tomcat 远程调试</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/u014424628/article/details/49429393" rel="nofollow">IDEA 环境下设置 jvm 默认编码</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/lfm601508022/p/6529118.html" rel="nofollow">关于 IntelliJ IDEA 文档无法编辑的解决办法</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/wenston/p/5286150.html" rel="nofollow">支持 ES6 语法</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/lilovfly/article/details/77659541" rel="nofollow">idea 下字符串的长度太大</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/zhyh1986/article/details/46469173" rel="nofollow">设置忽略部分类编译错误</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/wangjun5159/article/details/71250367" rel="nofollow">版本控制下 修改文件后，父文件夹也标注修改</a> ( 项目级配置 )</p>
</li>
<li>
<p><a href="https://blog.csdn.net/xu_joy/article/details/54139070" rel="nofollow">行注释设置 ( 不显示在行首 )</a></p>
<p>可以勾上 <code>Add a space at comment start</code></p>
</li>
<li>
<p><a href="https://blog.csdn.net/chenhaifeng2016/article/details/54315472" rel="nofollow">使用 Docker</a></p>
</li>
<li>
<p><a href="https://jingyan.baidu.com/article/154b463108b81928cb8f417b.html" rel="nofollow">使用自带插件显示 java 类的字节码</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/huanxianglove/article/details/80743376" rel="nofollow">自动删除类中无用的 import 包</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/cgl125167016/article/details/78754246" rel="nofollow">文件代码模板的使用</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/yuanhang1996/article/details/86030070" rel="nofollow">文件模板变量</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/qq_35170213/article/details/82953837" rel="nofollow">idea 查看一个类的所有子类以及子类的子类并以层级关系显示</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/qq_27093465/article/details/52537364" rel="nofollow">IntelliJ IDEA 中如何设置同时打开多个文件且分行显示 --- 即如何设置 tabs</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/deng-cc/p/6927447.html" rel="nofollow">使用 IntelliJ IDEA 查看类的继承关系图形</a></p>
</li>
<li>
<p><a href="https://www.itcodemonkey.com/article/10886.html" rel="nofollow">2018.3 更新内容</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/qq_27093465/article/details/77449117" rel="nofollow">IntelliJ IDEA 使用教程（总目录篇）</a></p>
</li>
</ul>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/e3f83c4c2d7e">https://www.jianshu.com/p/e3f83c4c2d7e</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-25T14:22:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[树莓派快速入门配置]]></title>
        <id>27</id>
        <link href="https://anyesu.github.io/blog/articles/27"/>
        <updated>2019-09-23T17:02:26.000Z</updated>
        <summary type="html"><![CDATA[前言 最近刚入坑树莓派，在这里做个分享。 购物清单 设备 价格 说明 Raspberry Pi 3B+ ( 单独主板 ) ￥228 按网上的说法，E14 和 RS 除了产地没区别 树莓派 5V3A 电源 + 开关电源线 ￥29.7 大功率电源可以接更多设备，开关可以减少插拔 闪迪 32g 内存卡 class10 存储 sd卡 ￥28.50 已有十年前的 8G TF 卡和读卡器，为了保险起见还是买了]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>最近刚入坑树莓派，在这里做个分享。</p>
<h3>购物清单</h3>
<hr>
<table role="table">
<thead>
<tr>
<th>设备</th>
<th>价格</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Raspberry Pi 3B+ ( 单独主板 )</td>
<td>￥228</td>
<td>按网上的说法，E14 和 RS 除了产地没区别</td>
</tr>
<tr>
<td>树莓派 5V3A 电源 + 开关电源线</td>
<td>￥29.7</td>
<td>大功率电源可以接更多设备，开关可以减少插拔</td>
</tr>
<tr>
<td>闪迪 32g 内存卡 class10 存储 sd卡</td>
<td>￥28.50</td>
<td>已有十年前的 8G TF 卡和读卡器，为了保险起见还是买了张新卡</td>
</tr>
<tr>
<td>树莓派3B+ 彩虹层叠外壳 + 散热片 + 风扇</td>
<td>￥31</td>
<td>看中的是不一样的外观</td>
</tr>
</tbody>
</table>
<p><strong>其他已有的调试必备硬件：</strong></p>
<ul>
<li>
<p>显示器 + HDMI 线</p>
</li>
<li>
<p>USB 键鼠</p>
</li>
<li>
<p>TF 读卡器</p>
</li>
<li>
<p>网线 ( 非必须 )</p>
</li>
</ul>
<p>淘宝链接就不给了，自己去货比三家吧，都差不多。如果不清楚要买什么，还是推荐购买卖家提供的基础套件大礼包。对了，我买的主板 <strong>电源指示灯</strong> 是不亮的 ( 应该是硬件坏了 ) ，折腾完系统才发现这茬事，虽然能正常使用还是有点不爽。</p>
<h3>安装系统</h3>
<hr>
<h5>1. 下载镜像</h5>
<ul>
<li>
<p><a href="https://www.raspberrypi.org/downloads/raspbian/" rel="nofollow">Raspbian</a> ( 官方镜像 )</p>
</li>
<li>
<p><a href="https://www.raspberrypi.org/downloads/noobs/" rel="nofollow">NOOBS</a> ( 只要解压到 TF 卡根目录，无须烧录，<a href="https://blog.csdn.net/diandianxiyu_geek/article/details/78949393" rel="nofollow">参考</a> )</p>
</li>
<li>
<p><a href="https://ubuntu-mate.org/raspberry-pi/" rel="nofollow">Ubuntu MATE</a></p>
</li>
</ul>
<p>上面都是亲测可用的系统，下文以 <strong>2019-04-08-raspbian-stretch-full</strong> 举例。使用迅雷通过种子方式下载还是比较快的，下载后要 <strong>解压</strong> 。<strong>Ubuntu MATE</strong> 对于 <strong>WiFi</strong> 的兼容性不太好，家里旧的路由器只有小概率能连上。</p>
<h5>2. TF 卡格式化</h5>
<p>使用 <strong>SDFormatter</strong> 格式化 <strong>TF 卡</strong> ( 报错失败就重试 ) ，<a href="http://dl-t1.wmzhe.com/14/14937/PanasonicSDFormatter_ha.zip" rel="nofollow">点此下载</a></p>
<h5>3. 烧录系统</h5>
<p>使用 <a href="https://nchc.dl.sourceforge.net/project/win32diskimager/Archive/win32diskimager-1.0.0-install.exe" rel="nofollow">win32diskimager</a> 或者官网推荐的 <a href="https://www.balena.io/etcher/" rel="nofollow">Etcher</a> ，烧录速度取决于 <strong>TF 卡</strong> 的写入速度。烧录完成由于系统无法识别 <strong>TF 卡</strong>，会弹框提示 <strong>格式化</strong>，千万别手贱去点。<strong>重新</strong> 烧录系统前记得先 <strong>格式化 TF 卡</strong> 。</p>
<h3>系统配置</h3>
<hr>
<p>由于安装的系统默认都没有开启 <strong>SSH</strong> , 所以还得先用上显示器、键鼠和网线。</p>
<h5>1.  树莓派插入 TF 卡，连接显示器、网线、键鼠，再启动树莓派</h5>
<p>注意顺序，先通电再连显示器可能会无法识别显示器。</p>
<h5>2. 根据开机引导设置国家和密码，其他设置跳过，重启树莓派</h5>
<h5>3. 开启 SSH 和 <a href="http://shumeipai.nxez.com/2018/08/31/raspberry-pi-vnc-viewer-configuration-tutorial.html" rel="nofollow">VNC</a> ，现在可以摆脱显示器和键鼠，通过电脑远程连接了</h5>
<p>点击任务栏左上角的 <strong>草莓图标</strong> -&gt; <strong>首选项</strong> -&gt; <strong>Raspberry Pi Configuration</strong> -&gt; <strong>Interfaces 选项卡</strong> ，对应项选择 <strong>Enable</strong> ，点击 <strong>OK</strong> 保存。</p>
<h5>4. 修改为中科大的软件源</h5>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 1. 备份原来的数据源配置文件</span>
sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup
<span class="pl-c"><span class="pl-c">#</span> 2. 修改数据源配置文件</span>
sudo sh -c <span class="pl-s"><span class="pl-pds">'</span>echo "deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi" &gt; /etc/apt/sources.list<span class="pl-pds">'</span></span>
<span class="pl-c"><span class="pl-c">#</span> 3. 更新配置</span>
sudo apt-get update</pre></div>
<h5>5. 自带的 vi 编辑器有点问题，可以安装 vim 或者使用 nano 代替</h5>
<div class="highlight highlight-source-shell"><pre>sudo apt-get install -y vim</pre></div>
<h5>6. 设置 WiFi ( <a href="https://www.cnblogs.com/playboysnow/p/4987103.html" rel="nofollow">参考</a> )</h5>
<p>任务栏点击 <strong>WiFi</strong> 图标选择自己的网络即可。配置文件为 <strong>/etc/wpa_supplicant/wpa_supplicant.conf</strong> 中，可自己手动添加配置，如果 <strong>WiFi</strong> 禁用了广播 <strong>SSID</strong> ，还需要添加配置项 <code>scan_ssid=1</code> ( 重启树莓派后自动连接 )</p>
<h5>7. 安装 zsh</h5>
<p>这个看个人需求了，不需要的请略过此步骤。</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 安装 zsh</span>
sudo apt-get -y install zsh
<span class="pl-c"><span class="pl-c">#</span> 修改账户的默认 shell</span>
chsh -s <span class="pl-s"><span class="pl-pds">`</span>which zsh<span class="pl-pds">`</span></span>
<span class="pl-c"><span class="pl-c">#</span> 下载配置 ~/.zshrc</span>
curl -L https://raw.githubusercontent.com/skywind3000/vim/30b702725847bac4708de34664bb68454b54e0c0/etc/zshrc.zsh <span class="pl-k">&gt;</span> <span class="pl-k">~</span>/.zshrc

<span class="pl-c"><span class="pl-c">#</span> 修改主题, 参考：https://github.com/robbyrussell/oh-my-zsh/wiki/themes</span>
sed -i <span class="pl-s"><span class="pl-pds">'</span>s$# antigen theme fishy$antigen theme ys$<span class="pl-pds">'</span></span> <span class="pl-k">~</span>/.zshrc

<span class="pl-c"><span class="pl-c">#</span> zsh 按键补齐</span>
cat <span class="pl-k">&gt;&gt;</span> <span class="pl-k">~</span>/.zshrc <span class="pl-s"><span class="pl-k">&lt;&lt;</span><span class="pl-k">EOF</span></span>
<span class="pl-s"># key bindings</span>
<span class="pl-s">bindkey "\e[1~" beginning-of-line</span>
<span class="pl-s">bindkey "\e[4~" end-of-line</span>
<span class="pl-s">bindkey "\e[5~" beginning-of-history</span>
<span class="pl-s">bindkey "\e[6~" end-of-history</span>
<span class="pl-s"></span>
<span class="pl-s"># for rxvt</span>
<span class="pl-s">bindkey "\e[8~" end-of-line</span>
<span class="pl-s">bindkey "\e[7~" beginning-of-line</span>
<span class="pl-s"># for non RH/Debian xterm, can't hurt for RH/DEbian xterm</span>
<span class="pl-s">bindkey "\eOH" beginning-of-line</span>
<span class="pl-s">bindkey "\eOF" end-of-line</span>
<span class="pl-s"># for freebsd console</span>
<span class="pl-s">bindkey "\e[H" beginning-of-line</span>
<span class="pl-s">bindkey "\e[F" end-of-line</span>
<span class="pl-s"># completion in the middle of a line</span>
<span class="pl-s">bindkey '^i' expand-or-complete-prefix</span>
<span class="pl-s"></span>
<span class="pl-s"># Fix numeric keypad  </span>
<span class="pl-s"># 0 . Enter  </span>
<span class="pl-s">bindkey -s "^[Op" "0"</span>
<span class="pl-s">bindkey -s "^[On" "."</span>
<span class="pl-s">bindkey -s "^[OM" "^M"</span>
<span class="pl-s"># 1 2 3  </span>
<span class="pl-s">bindkey -s "^[Oq" "1"</span>
<span class="pl-s">bindkey -s "^[Or" "2"</span>
<span class="pl-s">bindkey -s "^[Os" "3"</span>
<span class="pl-s"># 4 5 6  </span>
<span class="pl-s">bindkey -s "^[Ot" "4"</span>
<span class="pl-s">bindkey -s "^[Ou" "5"</span>
<span class="pl-s">bindkey -s "^[Ov" "6"</span>
<span class="pl-s"># 7 8 9  </span>
<span class="pl-s">bindkey -s "^[Ow" "7"</span>
<span class="pl-s">bindkey -s "^[Ox" "8"</span>
<span class="pl-s">bindkey -s "^[Oy" "9"</span>
<span class="pl-s"># + - * /  </span>
<span class="pl-s">bindkey -s "^[Ol" "+"</span>
<span class="pl-s">bindkey -s "^[Om" "-"</span>
<span class="pl-s">bindkey -s "^[Oj" "*"</span>
<span class="pl-s">bindkey -s "^[Oo" "/"</span>
<span class="pl-s"><span class="pl-k">EOF</span></span>

<span class="pl-c"><span class="pl-c">#</span> 配置修改完重新执行 zsh</span>
zsh</pre></div>
<h3>备份系统</h3>
<hr>
<p>上面辛辛苦苦终于配置完系统了，还剩下一个问题：如果系统玩坏了或者买了新设备，难道又要花一堆时间重复上面的步骤？当然不必，我们可以针对配置好的系统进行备份，方便以后快速恢复。</p>
<p>备份前先清空下历史命令</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">echo</span> <span class="pl-k">&gt;</span> .bash_history
<span class="pl-c"><span class="pl-c">#</span> echo &gt; .zsh_history</span></pre></div>
<ul>
<li>
<p><strong>方案一</strong>：使用 <strong>Raspbian</strong> 系统自带的工具 <strong>SD Card Copier</strong></p>
<p>将另一张 <strong>TF 卡</strong> 通过读卡器插入树莓派的 <strong>USB 接口</strong>，点击任务栏左上角的 <strong>草莓图标</strong> -&gt; <strong>附件</strong> -&gt; <strong>SD Card Copier</strong> ，<strong>Copy From Device</strong> 选择 <code>/dev/mmcblk0</code> ，<strong>Copy To Device</strong> 选择 <code>/dev/sda</code> , 点击 <strong>Start</strong> 开始备份，时间约 10 ~ 30 分钟。这个方案比较简单快速，但需要一张额外的 <strong>TF 卡</strong>。</p>
</li>
<li>
<p><strong>方案二</strong>：使用 <strong>win32diskimager</strong></p>
<p>上文中烧录系统使用 <strong>win32diskimager</strong> 的写入功能，备份就是使用它的读取功能，将 <strong>TF 卡</strong> 中的数据备份到指定的文件中。新建一个txt文件，<strong>带后缀名</strong> 一起重命名为 <strong>backup.img</strong>，然后在 <strong>win32diskimager</strong> 中选择这个空文件，插入装好系统的 <strong>TF 卡</strong>，开始读取。备份结束就可以使用这个镜像来烧录系统了。这个方法也比较简单，但是比较浪费空间和时间，因为卡容量有多大，备份的镜像就有多大，所以还是尽量选容量小一点的卡 ( 8G ) 来备份。</p>
</li>
<li>
<p><strong>方案三</strong>：<del>在树莓派中借助别人写好的脚本导出备份到镜像中 ( <a href="https://www.jianshu.com/p/c6055f9545fd" rel="nofollow">参考</a> )</del></p>
<p>该方法能成功导出镜像，但是启动会卡在四个草莓的界面，所以该方法无效。</p>
</li>
</ul>
<h3>扩展阅读</h3>
<hr>
<p>上文中到一些概念没有细讲如：<strong>SSH</strong> 、<strong>VNC</strong> 、<strong>ZSH</strong>，还有一些 <strong>Linux</strong> 相关的使用，可以参考我的另一篇文章 - <a href="https://www.jianshu.com/p/bc38ed12da1d" rel="nofollow">Windows10内置Linux子系统初体验</a></p>
<h3>结语</h3>
<hr>
<p>经过上面的配置，树莓派已经正式成为了一台微型家用服务器了，如果止步于此的话还不如买一台云服务器玩玩呢。树莓派于我的意义在于丰富的硬件和传感器控制，再配合天猫精灵还有云服务器，打造属于自己的智能家居场景。</p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/742c2697a007">https://www.jianshu.com/p/742c2697a007</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-23T17:02:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[搬瓦工 SS 和 VPN 一键配置脚本]]></title>
        <id>26</id>
        <link href="https://anyesu.github.io/blog/articles/26"/>
        <updated>2019-09-23T16:30:36.000Z</updated>
        <summary type="html"><![CDATA[背景 工作需要，买了一台 搬瓦工 VPS 用于科学上网。但是，目前已经不支持在 VPS 管理面板直接 配置 SS 和 VPN 服务了，需要自己手动安装服务。 购买 VPS 购买教程见 这里 ，不再赘述了。需要提一点，之前 最低配 已经没库存了或者说是下架了，目前能购买的 最低配 是 300 RMB / 年。 配置操作系统 由于 CentOS 和 Docker 会产生一些莫名其妙的问题，所以我选择 ]]></summary>
        <content type="html"><![CDATA[<h3>背景</h3>
<hr>
<p>工作需要，买了一台 <strong>搬瓦工 VPS</strong> 用于科学上网。但是，目前已经不支持在 <strong>VPS</strong> 管理面板直接 <a href="http://blog.sina.com.cn/s/blog_19a25efa60102ymhb.html" rel="nofollow">配置</a> <strong>SS</strong> 和 <strong>VPN</strong> 服务了，需要自己手动安装服务。</p>
<h3>购买 VPS</h3>
<hr>
<p>购买教程见 <a href="https://www.banwago.com/922.html" rel="nofollow">这里</a> ，不再赘述了。需要提一点，之前 <a href="https://bwh8.net/cart.php?a=add&amp;pid=43" rel="nofollow">最低配</a> 已经没库存了或者说是下架了，目前能购买的 <a href="https://bwh8.net/cart.php?a=confproduct&amp;i=0" rel="nofollow">最低配</a> 是 <strong>300 RMB / 年</strong>。</p>
<h3>配置操作系统</h3>
<hr>
<p>由于 <strong>CentOS</strong> 和 <strong>Docker</strong> 会产生一些莫名其妙的问题，所以我选择 <strong>Ubuntu 18.04 x86_64</strong></p>
<p>安装完系统记得修改 <strong>root</strong> 密码，<strong>Ubuntu</strong> 记得执行下面的命令安装 <strong>curl</strong></p>
<div class="highlight highlight-source-shell"><pre>apt-get update
apt-get install -y curl</pre></div>
<h3>一键配置脚本</h3>
<hr>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 搬瓦工 SS 和 VPN 一键配置脚本</span>

<span class="pl-c"><span class="pl-c">#</span> 安装 docker</span>
curl -sSL https://get.docker.com <span class="pl-k">|</span> sh

<span class="pl-c"><span class="pl-c">#</span> 设置开机启动</span>
systemctl <span class="pl-c1">enable</span> docker.service
systemctl is-enabled docker.service

<span class="pl-c"><span class="pl-c">#</span> 启动 docker</span>
service docker start

<span class="pl-c"><span class="pl-c">#</span> 安装 docker-compose</span>
curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-compose-<span class="pl-s"><span class="pl-pds">`</span>uname -s<span class="pl-pds">`</span></span>-<span class="pl-s"><span class="pl-pds">`</span>uname -m<span class="pl-pds">`</span></span> <span class="pl-k">&gt;</span> /tmp/docker-compose
chmod +x /tmp/docker-compose
mv /tmp/docker-compose /usr/local/bin/docker-compose

mkdir -p /root/proxy
<span class="pl-c1">cd</span> /root/proxy

<span class="pl-c"><span class="pl-c">#</span> 写配置</span>
cat <span class="pl-k">&gt;</span> .env <span class="pl-s"><span class="pl-k">&lt;&lt;</span><span class="pl-k">EOF</span></span>
<span class="pl-s"># SS 密码</span>
<span class="pl-s">SHADOWSOCKS_PASSWORD=sspasswd</span>
<span class="pl-s"># vpn 帐号密码</span>
<span class="pl-s">USERS=vpn:vpn</span>
<span class="pl-s"># vpn 管理员密码</span>
<span class="pl-s">SPW=vpn123456</span>
<span class="pl-s"># vpn 预共享密钥</span>
<span class="pl-s">PSK=vpn</span>
<span class="pl-s"><span class="pl-k">EOF</span></span>

cat <span class="pl-k">&gt;</span> docker-compose.yml <span class="pl-s"><span class="pl-k">&lt;&lt;</span><span class="pl-k">EOF</span></span>
<span class="pl-s">version: '2'</span>
<span class="pl-s"></span>
<span class="pl-s">services:</span>
<span class="pl-s"></span>
<span class="pl-s">  # 创建 shadowsocks 服务器 ( 提供 shadowsocks 协议的代理 )</span>
<span class="pl-s">  ss:</span>
<span class="pl-s">    image: easypi/shadowsocks-libev:3.2.3</span>
<span class="pl-s">    container_name: ss</span>
<span class="pl-s">    ports:</span>
<span class="pl-s">    - "9001:8388/tcp"</span>
<span class="pl-s">    - "9001:8388/udp"</span>
<span class="pl-s">    environment:</span>
<span class="pl-s">    - METHOD=aes-256-cfb</span>
<span class="pl-s">    - PASSWORD=\$SHADOWSOCKS_PASSWORD</span>
<span class="pl-s">    restart: always</span>
<span class="pl-s"></span>
<span class="pl-s">  # 创建 vpn</span>
<span class="pl-s">  vpn:</span>
<span class="pl-s">    image: siomiz/softethervpn</span>
<span class="pl-s">    container_name: vpn</span>
<span class="pl-s">    privileged: true</span>
<span class="pl-s">    ports:</span>
<span class="pl-s">    - "5555:5555"</span>
<span class="pl-s">    - "500:500/udp"</span>
<span class="pl-s">    - "4500:4500/udp"</span>
<span class="pl-s">    - "1701:1701"</span>
<span class="pl-s">    - "1194:1194/udp"</span>
<span class="pl-s">    environment:</span>
<span class="pl-s">    - USERS=\$USERS</span>
<span class="pl-s">    - SPW=\$SPW</span>
<span class="pl-s">    - PSK=\$PSK</span>
<span class="pl-s">    restart: always</span>
<span class="pl-s">    cap_add:</span>
<span class="pl-s">    - NET_ADMIN</span>
<span class="pl-s"><span class="pl-k">EOF</span></span>

<span class="pl-c"><span class="pl-c">#</span> 启动</span>
docker-compose up -d</pre></div>
<p>复制粘贴上面的命令即可一键完成配置，配置完成后会 <code>/root/proxy</code> 目录下生成配置文件 <code>.env </code> ，在里面配置各帐号密码，修改完配置记得执行 <code>cd /root/proxy &amp;&amp; docker-compose up -d</code> 重启服务。</p>
<h3>2019 - 09 - 24 更新</h3>
<hr>
<p>最近 <strong>搬瓦工 VPS</strong> 的 IP 老是被墙，还是要另谋出路 —— <a href="https://justmysocks1.net/members/cart.php" rel="nofollow">Just My Socks</a> 。<strong>Just My Socks</strong> 是搬瓦工官方出品的 <strong>SS</strong> 服务，开箱即用，基于域名访问，有效解决 IP 被封的问题，参考 <a href="https://blog.sprov.xyz/2019/03/18/just-my-socks/" rel="nofollow">购买教程</a> 。</p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/ee2b53e8f6d6">https://www.jianshu.com/p/ee2b53e8f6d6</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-23T16:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ant Design Pro 使用之 表单组件再封装]]></title>
        <id>25</id>
        <link href="https://anyesu.github.io/blog/articles/25"/>
        <updated>2019-09-23T16:04:03.000Z</updated>
        <summary type="html"><![CDATA[背景 使用 Ant Design Pro 开发有一段时间了，表单作为后台系统常见的功能当然很有必要封装一下，减少代码重复量。虽说 antd 的表单组件已经很不错了，但是使用上还是太麻烦了 ( 我就是懒 ) ，所以我就基于一些小小的约定封装了它的上层业务组件，更方便调用： 常用表单场景主要分四类：搜索条件、详情页、弹出式窗口、其他混合型 表单布局主要分三类：水平排列、垂直排列、复杂混合型 弹窗类型分]]></summary>
        <content type="html"><![CDATA[<h3>背景</h3>
<hr>
<p>使用 <a href="https://pro.ant.design/index-cn" rel="nofollow">Ant Design Pro</a> 开发有一段时间了，表单作为后台系统常见的功能当然很有必要封装一下，减少代码重复量。虽说 <a href="https://pro.ant.design/index-cn" rel="nofollow">antd</a> 的表单组件已经很不错了，但是使用上还是太麻烦了 ( 我就是懒 ) ，所以我就基于一些小小的约定封装了它的上层业务组件，更方便调用：</p>
<ul>
<li>
<p>常用表单场景主要分四类：搜索条件、详情页、弹出式窗口、其他混合型</p>
</li>
<li>
<p>表单布局主要分三类：水平排列、垂直排列、复杂混合型</p>
</li>
<li>
<p>弹窗类型分两类：模态对话框、屏幕边缘滑出的浮层面板 ( 抽屉 )</p>
</li>
<li>
<p>封装尽可能不引入新的语法，兼容 antd 原有配置方式</p>
</li>
<li>
<p>调用尽可能简单，减少重复关键字的使用。(  比如：<code>getFieldDecorator</code> )</p>
</li>
</ul>
<h3>基础表单组件</h3>
<hr>
<ul>
<li>
<p>组件定义</p>
<div class="highlight highlight-source-js-jsx"><pre><span class="pl-k">import</span> <span class="pl-smi">React</span>, { <span class="pl-smi">Component</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>react<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> { <span class="pl-smi">Form</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>antd<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> <span class="pl-smi">PropTypes</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>prop-types<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> { <span class="pl-smi">renderFormItem</span>, <span class="pl-smi">fillFormItems</span>, <span class="pl-smi">submitForm</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>./extra<span class="pl-pds">'</span></span>;

<span class="pl-k">const</span> <span class="pl-smi">defaultFormLayout</span> <span class="pl-k">=</span> { <span class="pl-c1"><span class="pl-s">labelCol</span>:</span> { <span class="pl-c1"><span class="pl-s">span</span>:</span> <span class="pl-c1">5</span> }, <span class="pl-c1"><span class="pl-s">wrapperCol</span>:</span> { <span class="pl-c1"><span class="pl-s">span</span>:</span> <span class="pl-c1">15</span> } };

<span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 基础表单</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
@<span class="pl-ent">Form</span><span class="pl-k">.</span><span class="pl-en">create</span>({
  <span class="pl-c"><span class="pl-c">//</span> 表单项变化时调用</span>
  <span class="pl-s"><span class="pl-en">onValuesChange</span></span>({ <span class="pl-smi">onValuesChange</span>, <span class="pl-k">...</span><span class="pl-smi">restProps</span> }, <span class="pl-smi">changedValues</span>, <span class="pl-smi">allValues</span>) {
    <span class="pl-k">if</span> (<span class="pl-smi">onValuesChange</span>) <span class="pl-en">onValuesChange</span>(<span class="pl-smi">restProps</span>, <span class="pl-smi">changedValues</span>, <span class="pl-smi">allValues</span>);
  },
})
<span class="pl-k">class</span> <span class="pl-en">BaseForm</span> <span class="pl-k">extends</span> <span class="pl-smi">Component</span> {
  <span class="pl-k">static</span> <span class="pl-smi">propTypes</span> <span class="pl-k">=</span> {
    <span class="pl-c1"><span class="pl-s">layout</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">formLayout</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">object</span>,
    <span class="pl-c1"><span class="pl-s">hideRequiredMark</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">bool</span>,
    <span class="pl-c1"><span class="pl-s">dataSource</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">array</span>,
    <span class="pl-c1"><span class="pl-s">formValues</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">object</span>,
    <span class="pl-c1"><span class="pl-s">renderItem</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">func</span>,
    <span class="pl-c1"><span class="pl-s">onSubmit</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">func</span>,
    <span class="pl-c"><span class="pl-c">//</span> eslint-disable-next-line react/no-unused-prop-types</span>
    <span class="pl-c1"><span class="pl-s">onValuesChange</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">func</span>,
  };

  <span class="pl-k">static</span> <span class="pl-smi">defaultProps</span> <span class="pl-k">=</span> {
    <span class="pl-c1"><span class="pl-s">layout</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>horizontal<span class="pl-pds">'</span></span>,
    <span class="pl-c1"><span class="pl-s">formLayout</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">hideRequiredMark</span>:</span> <span class="pl-c1">false</span>,
    <span class="pl-c1"><span class="pl-s">dataSource</span>:</span> [],
    <span class="pl-c1"><span class="pl-s">formValues</span>:</span> {},
    <span class="pl-c1"><span class="pl-s">renderItem</span>:</span> <span class="pl-smi">renderFormItem</span>,
    <span class="pl-en"><span class="pl-s">onSubmit</span></span>: () <span class="pl-k">=&gt;</span> {},
    <span class="pl-c1"><span class="pl-s">onValuesChange</span>:</span> <span class="pl-c1">undefined</span>,
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 表单提交时触发</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @param e</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">onSubmit</span> <span class="pl-k">=</span> <span class="pl-smi">e</span> <span class="pl-k">=&gt;</span> {
    <span class="pl-k">if</span> (<span class="pl-smi">e</span>) <span class="pl-smi"><span class="pl-smi">e</span></span><span class="pl-k">.</span><span class="pl-en">preventDefault</span>(); <span class="pl-c"><span class="pl-c">//</span> 阻止默认行为</span>
    <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">submit</span>();
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 调用表单提交</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">submit</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> {
    <span class="pl-k">const</span> { <span class="pl-smi">form</span>, <span class="pl-smi">formValues</span>, <span class="pl-smi">onSubmit</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;
    <span class="pl-en">submitForm</span>(<span class="pl-smi">form</span>, <span class="pl-smi">formValues</span>, <span class="pl-smi">onSubmit</span>);
  };

  <span class="pl-en"><span class="pl-s">render</span></span>() {
    <span class="pl-k">const</span> {
      <span class="pl-smi">children</span>,
      <span class="pl-smi">layout</span>,
      <span class="pl-smi">formLayout</span> <span class="pl-k">=</span> <span class="pl-smi">layout</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>vertical<span class="pl-pds">'</span></span> <span class="pl-k">?</span> <span class="pl-c1">null</span> : <span class="pl-smi">defaultFormLayout</span>,
      <span class="pl-smi">hideRequiredMark</span>,
      <span class="pl-smi">renderItem</span>,
      <span class="pl-c1"><span class="pl-s">form</span>:</span> { <span class="pl-smi">getFieldDecorator</span> },
      <span class="pl-smi">formValues</span>,
      <span class="pl-smi">dataSource</span>,
    } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;
    <span class="pl-k">return</span> (
      &lt;<span class="pl-ent">Form</span> <span class="pl-e">layout</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">layout</span><span class="pl-pse">}</span> <span class="pl-e">onSubmit</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">onSubmit</span><span class="pl-pse">}</span> <span class="pl-e">hideRequiredMark</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">hideRequiredMark</span><span class="pl-pse">}</span>&gt;
        <span class="pl-pse">{</span><span class="pl-smi">children</span> <span class="pl-k">||</span>
          <span class="pl-en">fillFormItems</span>(<span class="pl-smi">dataSource</span>, <span class="pl-smi">formValues</span>)<span class="pl-k">.</span><span class="pl-en">map</span>(<span class="pl-smi">item</span> <span class="pl-k">=&gt;</span>
            <span class="pl-en">renderItem</span>(<span class="pl-smi">item</span>, <span class="pl-smi">getFieldDecorator</span>, <span class="pl-smi">formLayout</span>)
          )<span class="pl-pse">}</span>
      &lt;/<span class="pl-ent">Form</span>&gt;
    );
  }
}

<span class="pl-k">export</span> <span class="pl-k">*</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>./extra<span class="pl-pds">'</span></span>;
<span class="pl-k">export</span> <span class="pl-k">default</span> <span class="pl-smi">BaseForm</span>;</pre></div>
</li>
<li>
<p>调用示例</p>
<div class="highlight highlight-source-js-jsx"><pre>&lt;<span class="pl-ent">BaseForm</span>
  <span class="pl-e">hideRequiredMark</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">false</span><span class="pl-pse">}</span>
  <span class="pl-e">layout</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>vertical<span class="pl-pds">"</span></span>
  <span class="pl-e">formLayout</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">null</span><span class="pl-pse">}</span>
  <span class="pl-e">dataSource</span><span class="pl-k">=</span><span class="pl-pse">{</span>[
    { <span class="pl-c1"><span class="pl-s">label</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>key1<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">name</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>name1<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">required</span>:</span> <span class="pl-c1">true</span> },
    { <span class="pl-c1"><span class="pl-s">label</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>key2<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">name</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>name2<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">required</span>:</span> <span class="pl-c1">true</span> },
    { <span class="pl-c1"><span class="pl-s">label</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>key3<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">name</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>name3<span class="pl-pds">'</span></span> },
  ]<span class="pl-pse">}</span>
  <span class="pl-e">formValues</span><span class="pl-k">=</span><span class="pl-pse">{</span>{ <span class="pl-c1"><span class="pl-s">name2</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>default<span class="pl-pds">'</span></span> }<span class="pl-pse">}</span>
  <span class="pl-e">onSubmit</span><span class="pl-k">=</span><span class="pl-pse">{</span>() <span class="pl-k">=&gt;</span> {}<span class="pl-pse">}</span>
  <span class="pl-e">onValuesChange</span><span class="pl-k">=</span><span class="pl-pse">{</span>() <span class="pl-k">=&gt;</span> {}<span class="pl-pse">}</span>
  <span class="pl-e">wrappedComponentRef</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">form</span> <span class="pl-k">=&gt;</span> {
    <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">form</span> <span class="pl-k">=</span> <span class="pl-smi">form</span>;
  }<span class="pl-pse">}</span>
/&gt;</pre></div>
</li>
</ul>
<p>比起 <strong>antd</strong> 表单组件的调用应该简洁不少吧</p>
<h3>弹出式表单组件</h3>
<hr>
<ul>
<li>
<p>组件定义</p>
<div class="highlight highlight-source-js-jsx"><pre><span class="pl-k">import</span> <span class="pl-smi">React</span>, { <span class="pl-smi">PureComponent</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>react<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> <span class="pl-smi">ReactDOM</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>react-dom<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> <span class="pl-smi">PropTypes</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>prop-types<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> <span class="pl-smi">BaseComponent</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>../BaseComponent<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> <span class="pl-smi">BaseForm</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>../BaseForm<span class="pl-pds">'</span></span>;

<span class="pl-k">const</span> <span class="pl-smi">destroyFns</span> <span class="pl-k">=</span> []; <span class="pl-c"><span class="pl-c">//</span> 保存所有弹框的引用</span>

<span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 弹出式表单</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">class</span> <span class="pl-en">PopupForm</span> <span class="pl-k">extends</span> <span class="pl-smi">PureComponent</span> {
  <span class="pl-k">static</span> <span class="pl-smi">propTypes</span> <span class="pl-k">=</span> {
    <span class="pl-c1"><span class="pl-s">layout</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">formLayout</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">object</span>,
    <span class="pl-c1"><span class="pl-s">hideRequiredMark</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">bool</span>,
    <span class="pl-c1"><span class="pl-s">width</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-en">oneOfType</span>([<span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>, <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">number</span>]),
    <span class="pl-c1"><span class="pl-s">title</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">root</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">object</span>,
    <span class="pl-c1"><span class="pl-s">okText</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">cancelText</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">onValuesChange</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">func</span>,
    <span class="pl-c1"><span class="pl-s">closeOnSubmit</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">bool</span>,
    <span class="pl-c1"><span class="pl-s">onClose</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">func</span>,
  };

  <span class="pl-k">static</span> <span class="pl-smi">defaultProps</span> <span class="pl-k">=</span> {
    <span class="pl-c1"><span class="pl-s">layout</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>vertical<span class="pl-pds">'</span></span>,
    <span class="pl-c1"><span class="pl-s">formLayout</span>:</span> <span class="pl-c1">null</span>,
    <span class="pl-c1"><span class="pl-s">hideRequiredMark</span>:</span> <span class="pl-c1">false</span>,
    <span class="pl-c1"><span class="pl-s">width</span>:</span> <span class="pl-c1">720</span>,
    <span class="pl-c1"><span class="pl-s">title</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">root</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">okText</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>确定<span class="pl-pds">'</span></span>,
    <span class="pl-c1"><span class="pl-s">cancelText</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>取消<span class="pl-pds">'</span></span>,
    <span class="pl-c1"><span class="pl-s">onValuesChange</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">closeOnSubmit</span>:</span> <span class="pl-c1">true</span>,
    <span class="pl-c1"><span class="pl-s">onClose</span>:</span> <span class="pl-c1">undefined</span>,
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 显示通过getInstance创建的组件</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @param formValues 表单初始值</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-k">static</span> <span class="pl-en"><span class="pl-s">show</span></span>(<span class="pl-smi">formValues</span>) {
    <span class="pl-k">const</span> { <span class="pl-smi">instance</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span>;
    <span class="pl-k">if</span> (<span class="pl-smi">instance</span>) {
      <span class="pl-k">const</span> { <span class="pl-c1">root</span> } <span class="pl-k">=</span> <span class="pl-smi"><span class="pl-smi">instance</span></span><span class="pl-k">.</span><span class="pl-smi">props</span>;
      <span class="pl-k">if</span> (<span class="pl-c1">root</span> <span class="pl-k">instanceof</span> <span class="pl-smi">BaseComponent</span>) {
        <span class="pl-c1">root</span><span class="pl-k">.</span><span class="pl-en">showPopup</span>(<span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">name</span>, <span class="pl-c1">true</span>, <span class="pl-smi">formValues</span>);
      }
    }
  }

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 创建一个该类型表单组件的实例，配合show显示/关闭</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @param root  表单组件引用的父组件，用于统一管理表单组件的状态</span>
<span class="pl-c">   * @param props 组件属性</span>
<span class="pl-c">   * @returns {*}</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-k">static</span> <span class="pl-en"><span class="pl-s">getInstance</span></span>(<span class="pl-smi">root</span>, <span class="pl-smi">props</span>) {
    <span class="pl-k">if</span> (<span class="pl-c1">root</span> <span class="pl-k">instanceof</span> <span class="pl-smi">BaseComponent</span>) {
      <span class="pl-k">const</span> { <span class="pl-smi">forms</span> <span class="pl-k">=</span> {} } <span class="pl-k">=</span> <span class="pl-c1">root</span><span class="pl-k">.</span><span class="pl-smi">state</span> <span class="pl-k">||</span> {};
      <span class="pl-k">const</span> <span class="pl-smi">form</span> <span class="pl-k">=</span> <span class="pl-smi"><span class="pl-smi">forms</span></span>[<span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">getFormName</span>()] <span class="pl-k">||</span> {};
      <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">instance</span> <span class="pl-k">=</span> &lt;<span class="pl-ent">this</span> <span class="pl-e">root</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">root</span><span class="pl-pse">}</span> <span class="pl-pse">{</span><span class="pl-k">...</span><span class="pl-smi">form</span><span class="pl-pse">}</span> <span class="pl-pse">{</span><span class="pl-k">...</span><span class="pl-smi">props</span><span class="pl-pse">}</span> /&gt;;
      <span class="pl-k">return</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">instance</span>;
    }
    <span class="pl-k">return</span> <span class="pl-c1">null</span>;
  }

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 接口方式创建并显示一个表单组件，独立于App容器之外</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @param props      组件属性</span>
<span class="pl-c">   * @param decorators 要给组件附加的高阶组件</span>
<span class="pl-c">   * @returns {*}</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-k">static</span> <span class="pl-en"><span class="pl-s">open</span></span>(<span class="pl-smi">props</span>, <span class="pl-smi">decorators</span>) {
    <span class="pl-k">const</span> <span class="pl-smi">Com</span> <span class="pl-k">=</span> <span class="pl-smi">decorators</span> <span class="pl-k">?</span> []<span class="pl-k">.</span><span class="pl-en">concat</span>(<span class="pl-smi">decorators</span>)<span class="pl-k">.</span><span class="pl-en">reduce</span>((<span class="pl-smi">pre</span>, <span class="pl-smi">item</span>) <span class="pl-k">=&gt;</span> <span class="pl-en">item</span>(<span class="pl-smi">pre</span>), <span class="pl-c1">this</span>) : <span class="pl-c1">this</span>;
    <span class="pl-k">const</span> <span class="pl-smi">div</span> <span class="pl-k">=</span> <span class="pl-c1">document</span><span class="pl-k">.</span><span class="pl-en">createElement</span>(<span class="pl-s"><span class="pl-pds">'</span>div<span class="pl-pds">'</span></span>);
    <span class="pl-k">const</span> <span class="pl-en">close</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> {
      <span class="pl-k">const</span> <span class="pl-smi">unmountResult</span> <span class="pl-k">=</span> <span class="pl-smi">ReactDOM</span><span class="pl-k">.</span><span class="pl-en">unmountComponentAtNode</span>(<span class="pl-smi">div</span>);
      <span class="pl-k">if</span> (<span class="pl-smi">unmountResult</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi"><span class="pl-smi">div</span></span><span class="pl-k">.</span><span class="pl-smi">parentNode</span>) {
        <span class="pl-smi"><span class="pl-smi">div</span></span><span class="pl-k">.</span><span class="pl-smi">parentNode</span><span class="pl-k">.</span><span class="pl-en">removeChild</span>(<span class="pl-smi">div</span>);
      }
      <span class="pl-k">const</span> <span class="pl-smi">pos</span> <span class="pl-k">=</span> <span class="pl-smi"><span class="pl-smi">destroyFns</span></span><span class="pl-k">.</span><span class="pl-en">findIndex</span>(<span class="pl-smi">item</span> <span class="pl-k">=&gt;</span> <span class="pl-smi">item</span> <span class="pl-k">===</span> <span class="pl-smi">close</span>);
      <span class="pl-k">if</span> (<span class="pl-smi">pos</span> <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>) <span class="pl-smi"><span class="pl-smi">destroyFns</span></span><span class="pl-k">.</span><span class="pl-en">splice</span>(<span class="pl-smi">pos</span>, <span class="pl-c1">1</span>);
    };
    <span class="pl-c"><span class="pl-c">//</span> 使用DvaContainer作为新的根组件，保证子组件正常使用redux</span>
    <span class="pl-k">const</span> <span class="pl-smi">rootContainer</span> <span class="pl-k">=</span> <span class="pl-c1">window</span><span class="pl-k">.</span><span class="pl-smi">g_plugins</span><span class="pl-k">.</span><span class="pl-en">apply</span>(<span class="pl-s"><span class="pl-pds">'</span>rootContainer<span class="pl-pds">'</span></span>, {
      <span class="pl-c1"><span class="pl-s">initialValue</span>:</span> &lt;<span class="pl-ent">Com</span> <span class="pl-pse">{</span><span class="pl-k">...</span><span class="pl-smi">props</span><span class="pl-pse">}</span> <span class="pl-e">visible</span> <span class="pl-e">onClose</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">close</span><span class="pl-pse">}</span> /&gt;,
    });
    <span class="pl-smi">ReactDOM</span><span class="pl-k">.</span><span class="pl-en">render</span>(<span class="pl-smi">rootContainer</span>, <span class="pl-smi">div</span>);

    <span class="pl-smi"><span class="pl-smi">destroyFns</span></span><span class="pl-k">.</span><span class="pl-en">push</span>(<span class="pl-smi">close</span>);

    <span class="pl-c"><span class="pl-c">//</span> 返回一个对象，通过这个对象来显式关闭组件</span>
    <span class="pl-k">return</span> { <span class="pl-smi">close</span> };
  }

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 销毁全部弹框</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-k">static</span> <span class="pl-en"><span class="pl-s">destroyAll</span></span>() {
    <span class="pl-k">while</span> (<span class="pl-smi"><span class="pl-smi">destroyFns</span></span><span class="pl-k">.</span><span class="pl-smi">length</span>) {
      <span class="pl-k">const</span> <span class="pl-smi">close</span> <span class="pl-k">=</span> <span class="pl-smi"><span class="pl-smi">destroyFns</span></span><span class="pl-k">.</span><span class="pl-en">pop</span>();
      <span class="pl-k">if</span> (<span class="pl-smi">close</span>) <span class="pl-en">close</span>();
    }
  }

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 获取表单名称，用于父组件对表单组件的控制，默认取组件类名</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @returns {string}</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-k">static</span> <span class="pl-en"><span class="pl-s">getFormName</span></span>() {
    <span class="pl-k">return</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">name</span>;
  }

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 表单提交时触发</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @param fieldsValue</span>
<span class="pl-c">   * @param form</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">onSubmit</span> <span class="pl-k">=</span> (<span class="pl-smi">fieldsValue</span>, <span class="pl-smi">form</span>) <span class="pl-k">=&gt;</span> {
    <span class="pl-k">const</span> { <span class="pl-smi">onSubmit</span>, <span class="pl-smi">closeOnSubmit</span> <span class="pl-k">=</span> <span class="pl-c1">false</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;
    <span class="pl-k">if</span> (<span class="pl-smi">closeOnSubmit</span> <span class="pl-k">===</span> <span class="pl-c1">true</span>) {
      <span class="pl-c"><span class="pl-c">//</span> 表单提交时关闭当前组件</span>
      <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">close</span>();
    }
    <span class="pl-en">onSubmit</span>(<span class="pl-smi">fieldsValue</span>, <span class="pl-smi">form</span>);
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 点击Ok按钮时触发</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @param e</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">onOk</span> <span class="pl-k">=</span> <span class="pl-smi">e</span> <span class="pl-k">=&gt;</span> {
    <span class="pl-k">if</span> (<span class="pl-smi">e</span>) <span class="pl-smi"><span class="pl-smi">e</span></span><span class="pl-k">.</span><span class="pl-en">preventDefault</span>(); <span class="pl-c"><span class="pl-c">//</span> 阻止默认行为</span>
    <span class="pl-k">const</span> { <span class="pl-c1"><span class="pl-s">form</span>:</span> { <span class="pl-smi">submit</span> } <span class="pl-k">=</span> {} } <span class="pl-k">=</span> <span class="pl-c1">this</span>;
    <span class="pl-k">if</span> (<span class="pl-smi">submit</span>) {
      <span class="pl-c"><span class="pl-c">//</span> 通过子组件暴露的方法，显式提交表单</span>
      <span class="pl-en">submit</span>();
    }
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 点击Cancel按钮时触发</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @param e</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">onCancel</span> <span class="pl-k">=</span> <span class="pl-smi">e</span> <span class="pl-k">=&gt;</span> {
    <span class="pl-k">if</span> (<span class="pl-smi">e</span>) <span class="pl-smi"><span class="pl-smi">e</span></span><span class="pl-k">.</span><span class="pl-en">preventDefault</span>(); <span class="pl-c"><span class="pl-c">//</span> 阻止默认行为</span>
    <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">close</span>();
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 关闭当前组件</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">close</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> {
    <span class="pl-k">const</span> { <span class="pl-smi">onClose</span>, <span class="pl-c1">root</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;
    <span class="pl-k">const</span> <span class="pl-smi">formName</span> <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-c1">constructor</span><span class="pl-k">.</span><span class="pl-en">getFormName</span>();
    <span class="pl-k">if</span> (<span class="pl-smi">onClose</span>) {
      <span class="pl-en">onClose</span>(<span class="pl-smi">formName</span>);
    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">root</span> <span class="pl-k">instanceof</span> <span class="pl-smi">BaseComponent</span>) {
      <span class="pl-c"><span class="pl-c">//</span> 对应getInstance创建的组件，由父组件控制</span>
      <span class="pl-c1">root</span><span class="pl-k">.</span><span class="pl-en">showPopup</span>(<span class="pl-smi">formName</span>, <span class="pl-c1">false</span>);
    }
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 绘制表单，可覆盖</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @returns {*}</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">renderForm</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> {
    <span class="pl-k">const</span> {
      <span class="pl-smi">children</span>,
      <span class="pl-smi">layout</span>,
      <span class="pl-smi">formLayout</span>,
      <span class="pl-smi">hideRequiredMark</span>,
      <span class="pl-smi">onValuesChange</span>,
      <span class="pl-smi">formValues</span>,
      <span class="pl-k">...</span><span class="pl-smi">restProps</span>
    } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;

    <span class="pl-k">return</span> (
      &lt;<span class="pl-ent">BaseForm</span>
        <span class="pl-pse">{</span><span class="pl-k">...</span><span class="pl-smi">restProps</span><span class="pl-pse">}</span>
        <span class="pl-e">hideRequiredMark</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">hideRequiredMark</span><span class="pl-pse">}</span>
        <span class="pl-e">layout</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">layout</span><span class="pl-pse">}</span>
        <span class="pl-e">formLayout</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">formLayout</span><span class="pl-pse">}</span>
        <span class="pl-e">dataSource</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">getDataSource</span>()<span class="pl-pse">}</span>
        <span class="pl-e">formValues</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">formValues</span><span class="pl-pse">}</span>
        <span class="pl-e">onSubmit</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">onSubmit</span><span class="pl-pse">}</span>
        <span class="pl-e">onValuesChange</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">onValuesChange</span><span class="pl-pse">}</span>
        <span class="pl-e">wrappedComponentRef</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">form</span> <span class="pl-k">=&gt;</span> {
          <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">form</span> <span class="pl-k">=</span> <span class="pl-smi">form</span>;
        }<span class="pl-pse">}</span>
      /&gt;
    );
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 绘制组件主体内容，可覆盖</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @returns {PopupForm.props.children | *}</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">renderBody</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> {
    <span class="pl-k">const</span> { <span class="pl-smi">children</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;
    <span class="pl-k">return</span> <span class="pl-smi">children</span> <span class="pl-k">||</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">renderForm</span>();
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 表单字段数据源，可覆盖</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @returns {undefined}</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">getDataSource</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> <span class="pl-c1">undefined</span>;

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 组件显示标题，可覆盖</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @returns {string}</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">getTitle</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>;
}

<span class="pl-k">export</span> <span class="pl-k">default</span> <span class="pl-smi">PopupForm</span>;</pre></div>
</li>
<li>
<p>这个是 <strong>基础组件</strong> ，不能直接使用，具体的弹框 <strong>表现形式</strong> 由 <strong>子类</strong> 实现，主要为 <strong>模态框</strong> 和 <strong>抽屉</strong></p>
</li>
<li>
<p>调用方式和常规组件不一样，采用继承的方式实现具体的业务组件，通过组件的静态方法实现渲染和行为控制  ( 当然，要使用 <strong>JSX</strong> 也是可以的 )</p>
</li>
<li>
<p>API</p>
<table role="table">
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>getInstance</code></strong></td>
<td>创建一个该类型表单组件的实例，配合 <code>show</code> 方法控制 显示 / 关闭</td>
</tr>
<tr>
<td><strong><code>show</code></strong></td>
<td>显示通过 <code>getInstance</code> 创建的组件弹框</td>
</tr>
<tr>
<td><strong><code>open</code></strong></td>
<td>接口方式创建并显示一个表单组件，独立于 <strong>App 容器</strong>之外。<br>返回一个对象，通过这个对象引用来显式关闭组件</td>
</tr>
<tr>
<td><strong><code>destroyAll</code></strong></td>
<td>销毁所有通过 <code>open</code> 方法创建的组件弹框</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3>模态框式表单组件</h3>
<hr>
<ul>
<li>
<p>组件定义</p>
<div class="highlight highlight-source-js-jsx"><pre><span class="pl-k">import</span> <span class="pl-smi">React</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>react<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> { <span class="pl-smi">Modal</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>antd<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> <span class="pl-smi">PropTypes</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>prop-types<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> <span class="pl-smi">PopupForm</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>../PopupForm<span class="pl-pds">'</span></span>;

<span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 模态框式表单</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">class</span> <span class="pl-en">ModalForm</span> <span class="pl-k">extends</span> <span class="pl-smi">PopupForm</span> {
  <span class="pl-k">static</span> <span class="pl-smi">propTypes</span> <span class="pl-k">=</span> {
    <span class="pl-c1"><span class="pl-s">layout</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">formLayout</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">object</span>,
    <span class="pl-c1"><span class="pl-s">hideRequiredMark</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">bool</span>,
    <span class="pl-c1"><span class="pl-s">width</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-en">oneOfType</span>([<span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>, <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">number</span>]),
    <span class="pl-c1"><span class="pl-s">title</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">root</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">object</span>,
    <span class="pl-c1"><span class="pl-s">okText</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">cancelText</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">onValuesChange</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">func</span>,
    <span class="pl-c1"><span class="pl-s">closeOnSubmit</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">bool</span>,
  };

  <span class="pl-k">static</span> <span class="pl-smi">defaultProps</span> <span class="pl-k">=</span> {
    <span class="pl-c1"><span class="pl-s">layout</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>horizontal<span class="pl-pds">'</span></span>,
    <span class="pl-c1"><span class="pl-s">formLayout</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">hideRequiredMark</span>:</span> <span class="pl-c1">false</span>,
    <span class="pl-c1"><span class="pl-s">width</span>:</span> <span class="pl-c1">640</span>,
    <span class="pl-c1"><span class="pl-s">title</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">root</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">okText</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>确定<span class="pl-pds">'</span></span>,
    <span class="pl-c1"><span class="pl-s">cancelText</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>取消<span class="pl-pds">'</span></span>,
    <span class="pl-c1"><span class="pl-s">onValuesChange</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">closeOnSubmit</span>:</span> <span class="pl-c1">true</span>,
  };

  <span class="pl-en"><span class="pl-s">render</span></span>() {
    <span class="pl-k">const</span> { <span class="pl-smi">children</span>, <span class="pl-smi">title</span>, <span class="pl-smi">width</span>, <span class="pl-smi">visible</span>, <span class="pl-smi">okText</span>, <span class="pl-smi">cancelText</span>, <span class="pl-k">...</span><span class="pl-smi">restProps</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;

    <span class="pl-k">return</span> <span class="pl-smi">visible</span> <span class="pl-k">?</span> (
      &lt;<span class="pl-ent">Modal</span>
        <span class="pl-e">title</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">title</span> <span class="pl-k">||</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">getTitle</span>()<span class="pl-pse">}</span>
        <span class="pl-e">width</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">width</span><span class="pl-pse">}</span>
        <span class="pl-e">visible</span>
        <span class="pl-e">okText</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">okText</span><span class="pl-pse">}</span>
        <span class="pl-e">onOk</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">onOk</span><span class="pl-pse">}</span>
        <span class="pl-e">cancelText</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">cancelText</span><span class="pl-pse">}</span>
        <span class="pl-e">onCancel</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">onCancel</span><span class="pl-pse">}</span>
        <span class="pl-pse">{</span><span class="pl-k">...</span><span class="pl-smi">restProps</span><span class="pl-pse">}</span>
        <span class="pl-e">destroyOnClose</span>
      &gt;
        <span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">renderBody</span>()<span class="pl-pse">}</span>
      &lt;/<span class="pl-ent">Modal</span>&gt;
    ) : <span class="pl-c1">null</span>;
  }
}

<span class="pl-k">export</span> <span class="pl-k">default</span> <span class="pl-smi">ModalForm</span>;</pre></div>
</li>
<li>
<p>调用示例</p>
<div class="highlight highlight-source-js-jsx"><pre><span class="pl-k">class</span> <span class="pl-en">Demo1</span> <span class="pl-k">extends</span> <span class="pl-smi">ModalForm</span> {
  <span class="pl-smi">getTitle</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>模态框式表单<span class="pl-pds">'</span></span>;

  <span class="pl-smi">getDataSource</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> [
    { <span class="pl-c1"><span class="pl-s">label</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>key1<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">name</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>name1<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">required</span>:</span> <span class="pl-c1">true</span> },
    { <span class="pl-c1"><span class="pl-s">label</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>key2<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">name</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>name2<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">required</span>:</span> <span class="pl-c1">true</span> },
    { <span class="pl-c1"><span class="pl-s">label</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>key3<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">name</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>name3<span class="pl-pds">'</span></span> },
  ];
}

&lt;<span class="pl-ent">Button</span> <span class="pl-e">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>primary<span class="pl-pds">"</span></span> <span class="pl-e">onClick</span><span class="pl-k">=</span><span class="pl-pse">{</span>() <span class="pl-k">=&gt;</span> <span class="pl-smi">Demo1</span><span class="pl-k">.</span><span class="pl-en">open</span>({ <span class="pl-c1"><span class="pl-s">title</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>覆盖表单标题<span class="pl-pds">'</span></span> })<span class="pl-pse">}</span>&gt;
  新增
&lt;/<span class="pl-ent">Button</span>&gt;</pre></div>
</li>
</ul>
<h3>抽屉式表单组件</h3>
<hr>
<ul>
<li>
<p>组件定义</p>
<div class="highlight highlight-source-js-jsx"><pre><span class="pl-k">import</span> <span class="pl-smi">React</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>react<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> { <span class="pl-smi">Drawer</span>, <span class="pl-smi">Button</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>antd<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> <span class="pl-smi">PropTypes</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>prop-types<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> <span class="pl-smi">PopupForm</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>../PopupForm<span class="pl-pds">'</span></span>;

<span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 抽屉式表单</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">class</span> <span class="pl-en">DrawerForm</span> <span class="pl-k">extends</span> <span class="pl-smi">PopupForm</span> {
  <span class="pl-k">static</span> <span class="pl-smi">propTypes</span> <span class="pl-k">=</span> {
    <span class="pl-c1"><span class="pl-s">layout</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">formLayout</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">object</span>,
    <span class="pl-c1"><span class="pl-s">hideRequiredMark</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">bool</span>,
    <span class="pl-c1"><span class="pl-s">width</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-en">oneOfType</span>([<span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>, <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">number</span>]),
    <span class="pl-c1"><span class="pl-s">title</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">root</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">object</span>,
    <span class="pl-c1"><span class="pl-s">okText</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">cancelText</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">onValuesChange</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">func</span>,
    <span class="pl-c1"><span class="pl-s">closeOnSubmit</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">bool</span>,
    <span class="pl-c1"><span class="pl-s">closable</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">bool</span>,
  };

  <span class="pl-k">static</span> <span class="pl-smi">defaultProps</span> <span class="pl-k">=</span> {
    <span class="pl-c1"><span class="pl-s">layout</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>vertical<span class="pl-pds">'</span></span>,
    <span class="pl-c1"><span class="pl-s">formLayout</span>:</span> <span class="pl-c1">null</span>,
    <span class="pl-c1"><span class="pl-s">hideRequiredMark</span>:</span> <span class="pl-c1">false</span>,
    <span class="pl-c1"><span class="pl-s">width</span>:</span> <span class="pl-c1">720</span>,
    <span class="pl-c1"><span class="pl-s">title</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">root</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">okText</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>确定<span class="pl-pds">'</span></span>,
    <span class="pl-c1"><span class="pl-s">cancelText</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>取消<span class="pl-pds">'</span></span>,
    <span class="pl-c1"><span class="pl-s">onValuesChange</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">closeOnSubmit</span>:</span> <span class="pl-c1">false</span>,
    <span class="pl-c1"><span class="pl-s">closable</span>:</span> <span class="pl-c1">false</span>,
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 绘制组件按钮</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @returns {*}</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">renderFooter</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> {
    <span class="pl-k">const</span> { <span class="pl-smi">okText</span>, <span class="pl-smi">cancelText</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;
    <span class="pl-k">return</span> (
      &lt;<span class="pl-ent">div</span>
        <span class="pl-e">style</span><span class="pl-k">=</span><span class="pl-pse">{</span>{
          <span class="pl-c1"><span class="pl-s">position</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>absolute<span class="pl-pds">'</span></span>,
          <span class="pl-c1"><span class="pl-s">left</span>:</span> <span class="pl-c1">0</span>,
          <span class="pl-c1"><span class="pl-s">bottom</span>:</span> <span class="pl-c1">0</span>,
          <span class="pl-c1"><span class="pl-s">width</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>100%<span class="pl-pds">'</span></span>,
          <span class="pl-c1"><span class="pl-s">borderTop</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>1px solid #e9e9e9<span class="pl-pds">'</span></span>,
          <span class="pl-c1"><span class="pl-s">padding</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>10px 16px<span class="pl-pds">'</span></span>,
          <span class="pl-c1"><span class="pl-s">background</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>#fff<span class="pl-pds">'</span></span>,
          <span class="pl-c1"><span class="pl-s">textAlign</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>right<span class="pl-pds">'</span></span>,
        }<span class="pl-pse">}</span>
      &gt;
        <span class="pl-pse">{</span><span class="pl-smi">cancelText</span> <span class="pl-k">?</span> (
          &lt;<span class="pl-ent">Button</span> <span class="pl-e">onClick</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">onCancel</span><span class="pl-pse">}</span> <span class="pl-e">style</span><span class="pl-k">=</span><span class="pl-pse">{</span>{ <span class="pl-c1"><span class="pl-s">marginRight</span>:</span> <span class="pl-c1">8</span> }<span class="pl-pse">}</span>&gt;
            <span class="pl-pse">{</span><span class="pl-smi">cancelText</span><span class="pl-pse">}</span>
          &lt;/<span class="pl-ent">Button</span>&gt;
        ) <span class="pl-k">:</span> <span class="pl-c1">null</span><span class="pl-pse">}</span>
        <span class="pl-pse">{</span><span class="pl-smi">okText</span> <span class="pl-k">?</span> (
          &lt;<span class="pl-ent">Button</span> <span class="pl-e">onClick</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">onOk</span><span class="pl-pse">}</span> <span class="pl-e">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>primary<span class="pl-pds">"</span></span>&gt;
            <span class="pl-pse">{</span><span class="pl-smi">okText</span><span class="pl-pse">}</span>
          &lt;/<span class="pl-ent">Button</span>&gt;
        ) <span class="pl-k">:</span> <span class="pl-c1">null</span><span class="pl-pse">}</span>
      &lt;/<span class="pl-ent">div</span>&gt;
    );
  };

  <span class="pl-en"><span class="pl-s">render</span></span>() {
    <span class="pl-k">const</span> { <span class="pl-smi">children</span>, <span class="pl-smi">title</span>, <span class="pl-smi">width</span>, <span class="pl-smi">visible</span>, <span class="pl-smi">closable</span>, <span class="pl-smi">formLayout</span>, <span class="pl-k">...</span><span class="pl-smi">restProps</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;

    <span class="pl-k">return</span> <span class="pl-smi">visible</span> <span class="pl-k">?</span> (
      &lt;<span class="pl-ent">Drawer</span>
        <span class="pl-e">title</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">title</span> <span class="pl-k">||</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">getTitle</span>()<span class="pl-pse">}</span>
        <span class="pl-e">width</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">width</span><span class="pl-pse">}</span>
        <span class="pl-e">visible</span>
        <span class="pl-e">closable</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">closable</span><span class="pl-pse">}</span>
        <span class="pl-e">onClose</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">onCancel</span><span class="pl-pse">}</span>
        <span class="pl-pse">{</span><span class="pl-k">...</span><span class="pl-smi">restProps</span><span class="pl-pse">}</span>
        <span class="pl-e">destroyOnClose</span>
      &gt;
        &lt;<span class="pl-ent">div</span> <span class="pl-e">style</span><span class="pl-k">=</span><span class="pl-pse">{</span>{ <span class="pl-c1"><span class="pl-s">paddingBottom</span>:</span> <span class="pl-c1">75</span> }<span class="pl-pse">}</span>&gt;<span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">renderBody</span>()<span class="pl-pse">}</span>&lt;/<span class="pl-ent">div</span>&gt;
        <span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">renderFooter</span>()<span class="pl-pse">}</span>
      &lt;/<span class="pl-ent">Drawer</span>&gt;
    ) : <span class="pl-c1">null</span>;
  }
}

<span class="pl-k">export</span> <span class="pl-k">default</span> <span class="pl-smi">DrawerForm</span>;</pre></div>
</li>
<li>
<p>调用示例</p>
<div class="highlight highlight-source-js-jsx"><pre><span class="pl-k">class</span> <span class="pl-en">Demo1</span> <span class="pl-k">extends</span> <span class="pl-smi">DrawerForm</span> {
  <span class="pl-smi">getTitle</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>模态框式表单<span class="pl-pds">'</span></span>;

  <span class="pl-smi">getDataSource</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> [
    { <span class="pl-c1"><span class="pl-s">label</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>key1<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">name</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>name1<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">required</span>:</span> <span class="pl-c1">true</span> },
    { <span class="pl-c1"><span class="pl-s">label</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>key2<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">name</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>name2<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">required</span>:</span> <span class="pl-c1">true</span> },
    { <span class="pl-c1"><span class="pl-s">label</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>key3<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">name</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>name3<span class="pl-pds">'</span></span> },
  ];
}

&lt;<span class="pl-ent">Button</span> <span class="pl-e">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>primary<span class="pl-pds">"</span></span> <span class="pl-e">onClick</span><span class="pl-k">=</span><span class="pl-pse">{</span>() <span class="pl-k">=&gt;</span> <span class="pl-smi">Demo1</span><span class="pl-k">.</span><span class="pl-en">open</span>({ <span class="pl-c1"><span class="pl-s">title</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>覆盖表单标题<span class="pl-pds">'</span></span> })<span class="pl-pse">}</span>&gt;
  新增
&lt;/<span class="pl-ent">Button</span>&gt;</pre></div>
</li>
</ul>
<h3>搜索表单组件</h3>
<hr>
<ul>
<li>
<p>组件定义</p>
<div class="highlight highlight-source-js-jsx"><pre><span class="pl-k">import</span> <span class="pl-smi">React</span>, { <span class="pl-smi">Component</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>react<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> { <span class="pl-smi">Form</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>antd<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> <span class="pl-smi">PropTypes</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>prop-types<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> { <span class="pl-smi">submitForm</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>../BaseForm<span class="pl-pds">'</span></span>;

<span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 搜索表单</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
@<span class="pl-ent">Form</span><span class="pl-k">.</span><span class="pl-en">create</span>({
  <span class="pl-c"><span class="pl-c">//</span> 表单项变化时调用</span>
  <span class="pl-s"><span class="pl-en">onValuesChange</span></span>({ <span class="pl-smi">onValuesChange</span>, <span class="pl-k">...</span><span class="pl-smi">restProps</span> }, <span class="pl-smi">changedValues</span>, <span class="pl-smi">allValues</span>) {
    <span class="pl-k">if</span> (<span class="pl-smi">onValuesChange</span>) <span class="pl-en">onValuesChange</span>(<span class="pl-smi">restProps</span>, <span class="pl-smi">changedValues</span>, <span class="pl-smi">allValues</span>);
  },
})
<span class="pl-k">class</span> <span class="pl-en">SearchForm</span> <span class="pl-k">extends</span> <span class="pl-smi">Component</span> {
  <span class="pl-k">static</span> <span class="pl-smi">propTypes</span> <span class="pl-k">=</span> {
    <span class="pl-c1"><span class="pl-s">root</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">object</span>,
    <span class="pl-c1"><span class="pl-s">onSearch</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">func</span>,
    <span class="pl-c1"><span class="pl-s">layout</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">string</span>,
    <span class="pl-c1"><span class="pl-s">render</span>:</span> <span class="pl-smi">PropTypes</span><span class="pl-k">.</span><span class="pl-smi">func</span>,
  };

  <span class="pl-k">static</span> <span class="pl-smi">defaultProps</span> <span class="pl-k">=</span> {
    <span class="pl-c1"><span class="pl-s">root</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">onSearch</span>:</span> <span class="pl-c1">undefined</span>,
    <span class="pl-c1"><span class="pl-s">layout</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>inline<span class="pl-pds">'</span></span>,
    <span class="pl-c1"><span class="pl-s">render</span>:</span> <span class="pl-c1">undefined</span>,
  };

  <span class="pl-en"><span class="pl-s">constructor</span></span>(<span class="pl-smi">props</span>) {
    <span class="pl-c1">super</span>(<span class="pl-smi">props</span>);
    <span class="pl-k">const</span> { <span class="pl-c1">root</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;
    <span class="pl-k">if</span> (<span class="pl-c1">root</span>) <span class="pl-c1">root</span><span class="pl-k">.</span><span class="pl-smi">searchForm</span> <span class="pl-k">=</span> <span class="pl-c1">this</span>;
  }

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 调用搜索</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @param formValues</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">search</span> <span class="pl-k">=</span> <span class="pl-smi">formValues</span> <span class="pl-k">=&gt;</span> {
    <span class="pl-k">const</span> { <span class="pl-smi">onSearch</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;
    <span class="pl-k">if</span> (<span class="pl-smi">onSearch</span>) <span class="pl-en">onSearch</span>(<span class="pl-smi">formValues</span>);
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 重置表单并搜索</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">reset</span> <span class="pl-k">=</span> (<span class="pl-smi">searchOnReset</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>) <span class="pl-k">=&gt;</span> {
    <span class="pl-k">const</span> { <span class="pl-smi">form</span>, <span class="pl-smi">formValues</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;
    <span class="pl-smi"><span class="pl-smi">form</span></span><span class="pl-k">.</span><span class="pl-en">resetFields</span>();
    <span class="pl-k">if</span> (<span class="pl-smi">searchOnReset</span> <span class="pl-k">===</span> <span class="pl-c1">true</span>) <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-en">search</span>(<span class="pl-smi">formValues</span>);
  };

  <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">   * 表单提交时触发</span>
<span class="pl-c">   *</span>
<span class="pl-c">   * @param e</span>
<span class="pl-c">   <span class="pl-c">*/</span></span>
  <span class="pl-smi">onSubmit</span> <span class="pl-k">=</span> <span class="pl-smi">e</span> <span class="pl-k">=&gt;</span> {
    <span class="pl-k">if</span> (<span class="pl-smi">e</span>) <span class="pl-smi"><span class="pl-smi">e</span></span><span class="pl-k">.</span><span class="pl-en">preventDefault</span>();
    <span class="pl-k">const</span> { <span class="pl-smi">form</span>, <span class="pl-smi">formValues</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;
    <span class="pl-en">submitForm</span>(<span class="pl-smi">form</span>, <span class="pl-smi">formValues</span>, <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">search</span>);
  };

  <span class="pl-en"><span class="pl-s">render</span></span>() {
    <span class="pl-k">const</span> { <span class="pl-smi">render</span>, <span class="pl-smi">hideRequiredMark</span>, <span class="pl-smi">layout</span> } <span class="pl-k">=</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>;
    <span class="pl-k">return</span> (
      &lt;<span class="pl-ent">Form</span> <span class="pl-e">hideRequiredMark</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">hideRequiredMark</span><span class="pl-pse">}</span> <span class="pl-e">layout</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">layout</span><span class="pl-pse">}</span> <span class="pl-e">onSubmit</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">onSubmit</span><span class="pl-pse">}</span>&gt;
        <span class="pl-pse">{</span><span class="pl-smi">render</span> <span class="pl-k">?</span> <span class="pl-en">render</span>(<span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">props</span>) <span class="pl-k">:</span> <span class="pl-c1">null</span><span class="pl-pse">}</span>
      &lt;/<span class="pl-ent">Form</span>&gt;
    );
  }
}

<span class="pl-k">export</span> <span class="pl-k">default</span> <span class="pl-smi">SearchForm</span>;</pre></div>
</li>
<li>
<p>调用示例</p>
<div class="highlight highlight-source-js-jsx"><pre><span class="pl-k">import</span> <span class="pl-smi">React</span>, { <span class="pl-smi">Component</span>, <span class="pl-smi">Fragment</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>react<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> { <span class="pl-smi">Form</span>, <span class="pl-smi">Button</span>, <span class="pl-smi">Col</span>, <span class="pl-smi">Input</span>, <span class="pl-smi">Row</span>, <span class="pl-smi">message</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>antd<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> <span class="pl-smi">SearchForm</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>@/components/SearchForm<span class="pl-pds">'</span></span>;
<span class="pl-k">import</span> { <span class="pl-smi">renderFormItem</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>@/components/BaseForm<span class="pl-pds">'</span></span>;

<span class="pl-k">export</span> <span class="pl-k">default</span> <span class="pl-k">class</span> <span class="pl-en">Demo</span> <span class="pl-k">extends</span> <span class="pl-smi">Component</span> {
  <span class="pl-smi">search</span> <span class="pl-k">=</span> <span class="pl-smi">data</span> <span class="pl-k">=&gt;</span> <span class="pl-smi"><span class="pl-smi">message</span></span><span class="pl-k">.</span><span class="pl-en">success</span>(<span class="pl-k">`</span><span class="pl-s">搜索提交:</span><span class="pl-k">${</span><span class="pl-c1">JSON</span><span class="pl-k">.</span><span class="pl-en">stringify</span>(<span class="pl-smi">data</span>)<span class="pl-k">}</span><span class="pl-k">`</span>);

  <span class="pl-smi">renderSearchForm</span> <span class="pl-k">=</span> ({ <span class="pl-smi">form</span><span class="pl-k">:</span> { <span class="pl-smi">getFieldDecorator</span> } }) <span class="pl-k">=&gt;</span> (
    &lt;<span class="pl-ent">Fragment</span>&gt;
      &lt;<span class="pl-ent">Row</span>&gt;
        &lt;<span class="pl-ent">Button</span> <span class="pl-e">icon</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>plus<span class="pl-pds">"</span></span> <span class="pl-e">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>primary<span class="pl-pds">"</span></span>&gt;
          新增
        &lt;/<span class="pl-ent">Button</span>&gt;
      &lt;/<span class="pl-ent">Row</span>&gt;
      &lt;<span class="pl-ent">Row</span> <span class="pl-e">style</span><span class="pl-k">=</span><span class="pl-pse">{</span>{ <span class="pl-c1"><span class="pl-s">marginTop</span>:</span> <span class="pl-c1">16</span> }<span class="pl-pse">}</span>&gt;
        &lt;<span class="pl-ent">Col</span> <span class="pl-e">span</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">18</span><span class="pl-pse">}</span>&gt;
          &lt;<span class="pl-ent">Form.Item</span> <span class="pl-e">label</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>条件1<span class="pl-pds">"</span></span>&gt;
            <span class="pl-pse">{</span><span class="pl-en">getFieldDecorator</span>(<span class="pl-s"><span class="pl-pds">'</span>param1<span class="pl-pds">'</span></span>)(&lt;<span class="pl-ent">Input</span> <span class="pl-e">placeholder</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>请输入<span class="pl-pds">"</span></span> /&gt;)<span class="pl-pse">}</span>
          &lt;/<span class="pl-ent">Form.Item</span>&gt;
          <span class="pl-pse">{</span><span class="pl-en">renderFormItem</span>({ <span class="pl-c1"><span class="pl-s">label</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>条件2<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">name</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>param2<span class="pl-pds">'</span></span> }, <span class="pl-smi">getFieldDecorator</span>)<span class="pl-pse">}</span>
          <span class="pl-pse">{</span><span class="pl-en">renderFormItem</span>({ <span class="pl-c1"><span class="pl-s">label</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>条件3<span class="pl-pds">'</span></span>, <span class="pl-c1"><span class="pl-s">name</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>param3<span class="pl-pds">'</span></span> }, <span class="pl-smi">getFieldDecorator</span>)<span class="pl-pse">}</span>
        &lt;/<span class="pl-ent">Col</span>&gt;
        &lt;<span class="pl-ent">Col</span> <span class="pl-e">span</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">6</span><span class="pl-pse">}</span> <span class="pl-e">style</span><span class="pl-k">=</span><span class="pl-pse">{</span>{ <span class="pl-c1"><span class="pl-s">textAlign</span>:</span> <span class="pl-s"><span class="pl-pds">'</span>right<span class="pl-pds">'</span></span> }<span class="pl-pse">}</span>&gt;
          &lt;<span class="pl-ent">span</span>&gt;
            &lt;<span class="pl-ent">Button</span> <span class="pl-e">type</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>primary<span class="pl-pds">"</span></span> <span class="pl-e">htmlType</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>submit<span class="pl-pds">"</span></span>&gt;
              查询
            &lt;/<span class="pl-ent">Button</span>&gt;
            &lt;<span class="pl-ent">Button</span> <span class="pl-e">style</span><span class="pl-k">=</span><span class="pl-pse">{</span>{ <span class="pl-c1"><span class="pl-s">marginLeft</span>:</span> <span class="pl-c1">8</span> }<span class="pl-pse">}</span> <span class="pl-e">onClick</span><span class="pl-k">=</span><span class="pl-pse">{</span>() <span class="pl-k">=&gt;</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">searchForm</span><span class="pl-k">.</span><span class="pl-en">reset</span>()<span class="pl-pse">}</span>&gt;
              重置并提交
            &lt;/<span class="pl-ent">Button</span>&gt;
            &lt;<span class="pl-ent">Button</span> <span class="pl-e">style</span><span class="pl-k">=</span><span class="pl-pse">{</span>{ <span class="pl-c1"><span class="pl-s">marginLeft</span>:</span> <span class="pl-c1">8</span> }<span class="pl-pse">}</span> <span class="pl-e">onClick</span><span class="pl-k">=</span><span class="pl-pse">{</span>() <span class="pl-k">=&gt;</span> <span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">searchForm</span><span class="pl-k">.</span><span class="pl-en">reset</span>(<span class="pl-c1">false</span>)<span class="pl-pse">}</span>&gt;
              只重置
            &lt;/<span class="pl-ent">Button</span>&gt;
          &lt;/<span class="pl-ent">span</span>&gt;
        &lt;/<span class="pl-ent">Col</span>&gt;
      &lt;/<span class="pl-ent">Row</span>&gt;
    &lt;/<span class="pl-ent">Fragment</span>&gt;
  );

  <span class="pl-en"><span class="pl-s">render</span></span>() {
    <span class="pl-k">return</span> (
      &lt;<span class="pl-ent">SearchForm</span>
        <span class="pl-e">root</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-pse">}</span>
        <span class="pl-e">onSearch</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">search</span><span class="pl-pse">}</span>
        <span class="pl-e">render</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">this</span><span class="pl-k">.</span><span class="pl-smi">renderSearchForm</span><span class="pl-pse">}</span>
        <span class="pl-e">searchOnReset</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">false</span><span class="pl-pse">}</span>
      /&gt;
    );
  }
}</pre></div>
</li>
</ul>
<h3>遇到的问题</h3>
<hr>
<p>在实际使用的过程中，弹框表单的子组件中可能会包含 <strong>被 connect 的组件</strong>，光使用 <strong>antd</strong> 的弹框组件包裹就会报错：</p>
<blockquote>
<p>Uncaught Error: Could not find "store" in either the context or props of "Connect(Demo)". Either wrap the root component in a , or explicitly pass "store" as a prop to "Connect(Demo)".</p>
</blockquote>
<p>解决办法就是使用 <strong>redux</strong> 的 <strong>Provider</strong> 组件包裹一下</p>
<div class="highlight highlight-source-js-jsx"><pre><span class="pl-smi">ReactDOM</span><span class="pl-k">.</span><span class="pl-en">render</span>(
  <span class="pl-c"><span class="pl-c">//</span> 使用 Provider 使子组件能从上下文中访问 store</span>
  <span class="pl-c"><span class="pl-c">//</span> 注意 react-redux 版本要和 dva 中引用的版本一致，否则子组件使用 @connect 会出错</span>
  <span class="pl-c"><span class="pl-c">//</span> eslint-disable-next-line no-underscore-dangle</span>
  &lt;<span class="pl-ent">Provider</span> <span class="pl-e">store</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-c1">window</span><span class="pl-k">.</span><span class="pl-smi">g_app</span><span class="pl-k">.</span><span class="pl-smi">_store</span><span class="pl-pse">}</span>&gt;
    &lt;<span class="pl-ent">Com</span> <span class="pl-pse">{</span><span class="pl-k">...</span><span class="pl-smi">props</span><span class="pl-pse">}</span> <span class="pl-e">visible</span> <span class="pl-e">onClose</span><span class="pl-k">=</span><span class="pl-pse">{</span><span class="pl-smi">close</span><span class="pl-pse">}</span> /&gt;
  &lt;/<span class="pl-ent">Provider</span>&gt;,
  <span class="pl-smi">div</span>
);</pre></div>
<p>具体调用位置在上面 <code>PopupForm.open</code> 中，该代码已经按 <strong>dva</strong> 提供的方式进行解决了。</p>
<h3>最后</h3>
<hr>
<p>完整代码已经传到 <a href="https://codesandbox.io/" rel="nofollow">CodeSandbox</a> ，点击查看 <a href="https://codesandbox.io/s/4wmon20n94" rel="nofollow">antd 版</a> 或者 <a href="https://codesandbox.io/s/9zoxv04wzo" rel="nofollow">antd pro 版</a></p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/c7120bf2e4f8">https://www.jianshu.com/p/c7120bf2e4f8</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-23T16:04:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ant Design Pro 使用之 CodeSandbox 模版]]></title>
        <id>24</id>
        <link href="https://anyesu.github.io/blog/articles/24"/>
        <updated>2019-09-23T15:45:27.000Z</updated>
        <summary type="html"><![CDATA[正文 最近在用 Ant Design Pro 做前端框架，试用的时候乍一看各种组件布局挺齐全的，有种站在巨人肩膀上的感觉。不过，开始开发之后就有点懵了，因为太丰富了反而思路受到限制，改起来有点无从下手 ( 比如 权限和菜单 这块内容耦合就挺严重的 ) ，各种代码混在一起对于初入者来说完全分不清哪些是有用的哪些是没用的。所以，经过一番研究决定还是应该换个使用姿势： 单独新建项目从头搭建，而不是在 a]]></summary>
        <content type="html"><![CDATA[<h3>正文</h3>
<hr>
<p>最近在用 <a href="https://pro.ant.design/index-cn" rel="nofollow">Ant Design Pro</a> 做前端框架，试用的时候乍一看各种组件布局挺齐全的，有种站在巨人肩膀上的感觉。不过，开始开发之后就有点懵了，因为太丰富了反而思路受到限制，改起来有点无从下手 ( 比如 <strong>权限和菜单</strong> 这块内容耦合就挺严重的 ) ，各种代码混在一起对于初入者来说完全分不清哪些是有用的哪些是没用的。所以，经过一番研究决定还是应该换个使用姿势：</p>
<ul>
<li>
<p><del>单独新建项目从头搭建，而不是在 <a href="https://github.com/ant-design/ant-design-pro/">antd pro</a> 原有代码的基础上开发。</del></p>
<p>目前的 pro@v4 已经基本上只剩一个框架了，按官方步骤创建即可。</p>
</li>
<li>
<p><strong>antd pro</strong> 和 <a href="https://pro.ant.design/index-cn" rel="nofollow">antd</a> 一样以 <a href="https://www.npmjs.com/package/ant-design-pro" rel="nofollow">组件包</a> 的形式引入 ( <a href="https://www.yuque.com/ant-design/ant-design-pro/lmgc46" rel="nofollow">参考</a> ) ，直接使用其中的业务组件，也方便后续的升级。另外也可以借鉴其现有的 <a href="https://preview.pro.ant.design" rel="nofollow">布局效果</a> ，就不必花太多的精力在过细的样式调整上了。</p>
</li>
<li>
<p>按照 <a href="https://github.com/ant-design/ant-design-pro/issues/3143" data-hovercard-type="issue" data-hovercard-url="/ant-design/ant-design-pro/issues/3143/hovercard">V4 版本</a> 中提出的区块 ( <a href="https://alibaba.github.io/ice/docs/materials/intro-material" rel="nofollow">物料</a> ) 思想，按模块划分页面 ( 每个页面独立开发调试 ) ，结构更加清晰，减小耦合，也方便已有页面的复用和扩展，开发新项目的时候就可以快速剔除无关内容。</p>
</li>
</ul>
<p>按照上面的思路我对原项目做了一个精简，整理出一个新项目的模版，效果可以看 <a href="https://pk76nllkn7.sse.codesandbox.io/" rel="nofollow">这里</a> ，使用 <a href="https://codesandbox.io/s/node" rel="nofollow">node</a> 作为基础模版，这样 <a href="https://codesandbox.io/" rel="nofollow">CodeSandbox</a> 会在后台建立容器来跑代码，就可以和本地开发有一样的体验了。 <strong>CodeSandbox</strong> 上原先也没有 <strong>antd pro</strong> 的模版，现在小伙伴们可以基于这个模版来复现问题了。</p>
<ul>
<li>
<p><strong>模版地址：</strong><a href="https://codesandbox.io/s/pk76nllkn7" rel="nofollow">https://codesandbox.io/s/pk76nllkn7</a></p>
<p><strong>考虑到编译构建和网络因素，初次加载会比较慢，请耐心等待</strong></p>
</li>
</ul>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/ed9fee06a8f3">https://www.jianshu.com/p/ed9fee06a8f3</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-23T15:45:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 VPN 打通内网]]></title>
        <id>22</id>
        <link href="https://anyesu.github.io/blog/articles/22"/>
        <updated>2019-09-22T16:10:42.000Z</updated>
        <summary type="html"><![CDATA[前言 在 上一篇文章 中已经介绍了使用 SSH 隧道 的方式来打通内网环境，好处是极小依赖 ( 只要支持 ssh 即可 ) ，不过使用下来也有几点问题比较明显： 无密码，安全性很差，IP 变动或者换地方了设置防火墙白名单也比较麻烦 浏览器可以通过设置全局的 HTTP 代理来访问，但在其他软件中就需要单独配置比较麻烦，比如我的 SSH 终端工具 要连接几十台服务器，每台服务器的配置都要单独修改想想就]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>在 <a href="https://www.jianshu.com/p/388a93b1e7f7" rel="nofollow">上一篇文章</a> 中已经介绍了使用 <strong>SSH 隧道</strong> 的方式来打通内网环境，好处是极小依赖 ( 只要支持 <strong>ssh</strong> 即可 ) ，不过使用下来也有几点问题比较明显：</p>
<ul>
<li>
<p>无密码，安全性很差，IP 变动或者换地方了设置防火墙白名单也比较麻烦</p>
</li>
<li>
<p>浏览器可以通过设置全局的 HTTP 代理来访问，但在其他软件中就需要单独配置比较麻烦，比如我的 <strong>SSH 终端工具</strong> 要连接几十台服务器，每台服务器的配置都要单独修改想想就头大</p>
</li>
<li>
<p>只支持 <strong>TCP</strong> 及在它之上的协议，不支持 <strong>UDP</strong></p>
</li>
</ul>
<p>使用 <strong>VPN</strong> 就可以很好的解决上面的几个问题</p>
<h3>方案</h3>
<hr>
<ol>
<li>
<p>在 <strong>内网</strong> 搭建 <strong>VPN 服务器</strong></p>
</li>
<li>
<p>将 <strong>VPN 服务</strong> 暴露到 <strong>公网</strong> 中</p>
</li>
<li>
<p>通过 <strong>公网</strong> 连接到 <strong>VPN 网络</strong>，通过 <strong>VPN 网络</strong> 访问 <strong>内网</strong> 资源</p>
</li>
</ol>
<h3>搭建 VPN 服务器</h3>
<hr>
<ul>
<li>
<p>在当前目录下新建 <strong>VPN 配置文件</strong> <code>vpn.env</code> 用于管理 <strong>VPN</strong> 的帐号密码</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 预共享密钥</span>
VPN_IPSEC_PSK=<span class="pl-s"><span class="pl-pds">'</span>vpn<span class="pl-pds">'</span></span>
<span class="pl-c"><span class="pl-c">#</span> 帐号</span>
VPN_USER=<span class="pl-s"><span class="pl-pds">'</span>vpn<span class="pl-pds">'</span></span>
<span class="pl-c"><span class="pl-c">#</span> 密码</span>
VPN_PASSWORD=<span class="pl-s"><span class="pl-pds">'</span>vpn<span class="pl-pds">'</span></span></pre></div>
</li>
<li>
<p>为了方便，采用 <strong>docker</strong> 的方式来搭建</p>
<div class="highlight highlight-source-shell"><pre>docker run --name vpn \
-d --privileged --restart=always \
--env-file <span class="pl-s"><span class="pl-pds">`</span>pwd<span class="pl-pds">`</span></span>/vpn.env \
-p 500:500/udp -p 4500:4500/udp \
-v /lib/modules:/lib/modules:ro hwdsl2/ipsec-vpn-server</pre></div>
</li>
</ul>
<p>先测试下：内网下是否能够连接上 <strong>VPN</strong> ( 选择 <strong>使用预共享密钥的 L2TP/IPsec</strong> )</p>
<h3>暴露 VPN 服务到公网</h3>
<hr>
<p>由于 <strong>VPN 服务器</strong> 搭建在内网环境，外部无法直接访问，所以按 <a href="https://www.jianshu.com/p/388a93b1e7f7" rel="nofollow">上一篇文章</a> 中的方式借助一台公网的服务器做 <strong>跳板机</strong> ，将 <strong>VPN 服务</strong> 的端口暴露在公网中。这里就遇到一个问题：<strong>VPN 服务</strong> 的端口是 <strong>UDP 协议</strong> 的，而 <strong>SSH 隧道</strong> 是不支持 <strong>UDP</strong> 的，有点小尴尬啊。不过好在可以通过 <strong>TCP / UDP</strong> 互相转换的方式来 "<strong>曲线救国</strong>" ，具体原理另外开文讲解 ( TODO ) ，这里就只给最终的操作：</p>
<ul>
<li>
<p>在 <strong>VPN 主机</strong> 上执行</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 将本机 1337 端口 ( TCP ) 接收到的数据转发到本机的 500 端口 ( UDP )</span>
docker run --name vpn500 -p 1337:80 \
-d --restart=always \
alpine/socat tcp-listen:80,fork,reuseaddr udp-connect:172.17.0.1:500

<span class="pl-c"><span class="pl-c">#</span> 将本机 1338 端口 ( TCP ) 接收到的数据转发到本机的 4500 端口 ( UDP )</span>
docker run --name vpn4500 -p 1338:80 \
-d --restart=always \
alpine/socat tcp-listen:80,fork,reuseaddr udp-connect:172.17.0.1:4500

<span class="pl-c"><span class="pl-c">#</span> 将本机 1337 端口通过 ssh 隧道暴露到跳板机的 1337 端口上，123.123.123.123 改为跳板机的公网 ip</span>
ssh -p 22 -Nf -R 0.0.0.0:1337:127.0.0.1:1337 root@123.123.123.123

<span class="pl-c"><span class="pl-c">#</span> 将本机 1338 端口通过 ssh 隧道暴露到跳板机的 1338 端口上</span>
ssh -p 22 -Nf -R 0.0.0.0:1338:127.0.0.1:1338 root@123.123.123.123</pre></div>
</li>
<li>
<p>在 <strong>跳板机</strong> 上执行</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 将本机 500 端口 ( UDP ) 接收到的数据转发到本机的 1337 端口 ( TCP )</span>
docker run --name vpn500 -p 500:80/udp \
-d --restart=always \
alpine/socat udp-listen:80,fork,reuseaddr tcp-connect:172.17.0.1:1337

<span class="pl-c"><span class="pl-c">#</span> 将本机 4500 端口 ( UDP ) 接收到的数据转发到本机的 1338 端口 ( TCP )</span>
docker run --name vpn4500 -p 4500:80/udp \
-d --restart=always \
alpine/socat udp-listen:80,fork,reuseaddr tcp-connect:172.17.0.1:1338</pre></div>
</li>
</ul>
<p>测试下：通过 <strong>跳板机</strong> 的公网 IP 是否能够连接上 <strong>VPN</strong> ( 选择 <strong>使用预共享密钥的 L2TP/IPsec</strong> )</p>
<h3>优化</h3>
<hr>
<p>通过上面的步骤已经初步实现了本文的目的，但是由于使用了蛋疼的 <strong>TCP / UDP</strong> 转换的方式，性能非常差劲，网速最快也只有 <strong>20 kb/s</strong> 左右，远程连个服务器什么的还好说，开网页就算了吧。其实，除了这种蹩脚的转换方式，还可以用 <strong>frp ( <a href="https://github.com/fatedier/frp/blob/master/README_zh.md">v0.24.1</a> )</strong> 做内网穿透：</p>
<ul>
<li>
<p>在 <strong>VPN 主机</strong> 上执行</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 写入 frp 客户端配置</span>
cat <span class="pl-k">&gt;</span> frpc.ini <span class="pl-s"><span class="pl-k">&lt;&lt;</span><span class="pl-k">EOF</span></span>
<span class="pl-s">[common]</span>
<span class="pl-s">server_addr = &lt;跳板机 ip&gt;</span>
<span class="pl-s">server_port = 7000</span>
<span class="pl-s"># 与服务端的 token 一致才能认证通过</span>
<span class="pl-s">token = 123456</span>
<span class="pl-s"></span>
<span class="pl-s">[range:vpn]</span>
<span class="pl-s">type = udp</span>
<span class="pl-s">local_ip = 172.17.0.1</span>
<span class="pl-s">local_port = 500,4500</span>
<span class="pl-s">remote_port = 500,4500</span>
<span class="pl-s"><span class="pl-k">EOF</span></span>

docker run --name frpc \
-d --restart=always \
-v <span class="pl-s"><span class="pl-pds">`</span>pwd<span class="pl-pds">`</span></span>/frpc.ini:/etc/frpc.ini \
leonismoe/frpc</pre></div>
</li>
<li>
<p>在 <strong>跳板机</strong> 上执行</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 写入 frp 服务端配置</span>
cat <span class="pl-k">&gt;</span> frps.ini <span class="pl-s"><span class="pl-k">&lt;&lt;</span><span class="pl-k">EOF</span></span>
<span class="pl-s">[common]</span>
<span class="pl-s">server_port = 7000</span>
<span class="pl-s">token = 123456</span>
<span class="pl-s"></span>
<span class="pl-s">dashboard_port = 7500</span>
<span class="pl-s"># dashboard 用户名密码，默认都为 admin</span>
<span class="pl-s">dashboard_user = admin</span>
<span class="pl-s">dashboard_pwd = admin</span>
<span class="pl-s"><span class="pl-k">EOF</span></span>

<span class="pl-c"><span class="pl-c">#</span> 7000 是 frp 的服务端口</span>
<span class="pl-c"><span class="pl-c">#</span> 400/4500 是 VPN 的端口</span>
<span class="pl-c"><span class="pl-c">#</span> 7500 是 frp 的 web 管理界面端口, 可有可无</span>
docker run --name frps \
-d --restart=always \
-p 7000:7000 -p 7500:7500 -p 500:500/udp -p 4500:4500/udp \
-v <span class="pl-s"><span class="pl-pds">`</span>pwd<span class="pl-pds">`</span></span>/frps.ini:/etc/frps.ini \
leonismoe/frps</pre></div>
</li>
</ul>
<p>连接 <strong>VPN</strong> 后，速度上有了明显的提升但还是很慢，不过上传能跑满跳板机的带宽，具体原因还有待研究。</p>
<p>另外，<strong>frp</strong> 还支持 <a href="https://github.com/fatedier/frp/blob/master/README_zh.md#%E7%82%B9%E5%AF%B9%E7%82%B9%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F">点对点内网穿透</a> ，有空也可以试下。</p>
<h3>使用 SoftEther VPN</h3>
<hr>
<p>出现上面的问题，主要还是因为搭建 <strong>SSH 隧道</strong> 时带来的 "<strong>惯性思维</strong>" ，为什么非得远程转发 <strong>UDP</strong> 端口呢？搜寻了一圈就发现了非常强大的 <a href="https://www.softether.org" rel="nofollow">SoftEther VPN</a> ，它就提供 <strong>TCP</strong> 协议的连接方式，远程转发它的 <strong>TCP</strong> 端口就行了。</p>
<ol>
<li>
<p>在 <strong>VPN 主机</strong> 上先关闭之前搭建的 <strong>VPN 服务</strong></p>
<div class="highlight highlight-source-shell"><pre>docker rm -f vpn</pre></div>
</li>
<li>
<p>在 <strong>VPN 主机</strong> 上搭建  <strong>SoftEther</strong></p>
<div class="highlight highlight-source-shell"><pre>docker run --name=vpn2 \
-d --privileged --restart=always --cap-add NET_ADMIN \
-p 500:500/udp -p 4500:4500/udp -p 1701:1701/tcp \
-p 1194:1194/udp \
-p 5555:5555/tcp \
-e USERS=vpn:vpn -e SPW=vpn123456 -e PSK=vpn \
siomiz/softethervpn
<span class="pl-c"><span class="pl-c">#</span> USERS 格式：username:password;user2:pass2;user3:pass3</span>
<span class="pl-c"><span class="pl-c">#</span> PSK 是预共享密钥，SPW 是管理密钥 ( 用于登录 SoftEther Server 管理器 )</span>

<span class="pl-c"><span class="pl-c">#</span> 将 VPN 主机的服务端口暴露到跳板机上</span>
ssh -p 22 -Nf -R 0.0.0.0:5555:127.0.0.1:5555 root@123.123.123.123</pre></div>
</li>
<li>
<p>下载 <a href="https://www.softether-download.com/cn.aspx?product=softether" rel="nofollow">SoftEther 的客户端</a> ，通过 <strong>客户端</strong> 连接 <strong>VPN</strong> 即可，此时的网速取决于 <strong>跳板机</strong> 的 <strong>公网带宽</strong></p>
</li>
</ol>
<p>当然，也可以配合上面的 <strong>内网穿透</strong> 步骤使用系统自带的 <strong>VPN 客户端</strong> 直连。</p>
<p><strong>所以，最终方案就是：SoftEther VPN + frp NAT</strong></p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/4801adfcd07e">https://www.jianshu.com/p/4801adfcd07e</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-22T16:10:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tomcat 、Jetty 和 Undertow 对比测试]]></title>
        <id>21</id>
        <link href="https://anyesu.github.io/blog/articles/21"/>
        <updated>2019-09-21T17:06:22.000Z</updated>
        <summary type="html"><![CDATA[背景 最近在做压测 , 同事觉得 Tomcat 不行想要切换 web 服务器 , 于是我就去网上搜了一些测评结果 , 不出意外 Tomcat 得到了一致的差评。抱着怀疑的态度 , 我决定对 SpringBoot 内嵌支持的三款 Servlet 容器 ( Tomcat 、Jetty 和 Undertow ) 做一个简单的对比测试 , 测试结果仅供参考 。 测试环境 项目 描述 测试端主机 阿里云EC]]></summary>
        <content type="html"><![CDATA[<h3>背景</h3>
<hr>
<p>最近在做压测 , 同事觉得 <strong>Tomcat</strong> 不行想要切换 <strong>web</strong> 服务器 , 于是我就去网上搜了一些测评结果 , 不出意外 <strong>Tomcat</strong> 得到了一致的差评。抱着怀疑的态度 , 我决定对 <strong>SpringBoot</strong> 内嵌支持的三款 <strong>Servlet 容器</strong> ( <a href="http://tomcat.apache.org/" rel="nofollow">Tomcat</a> 、<a href="http://www.eclipse.org/jetty/" rel="nofollow">Jetty</a> 和 <a href="http://undertow.io/" rel="nofollow">Undertow</a> ) 做一个简单的对比测试 , <strong>测试结果仅供参考</strong> 。</p>
<h3>测试环境</h3>
<hr>
<table role="table">
<thead>
<tr>
<th>项目</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>测试端主机</td>
<td>阿里云ECS(ecs.sn1ne.2xlarge) 8C16G CentOS7.4.1708 <code>Linux Kernel 3.10.0</code></td>
</tr>
<tr>
<td>被测端主机</td>
<td>阿里云ECS(ecs.sn1ne.2xlarge) 8C16G CentOS7.4.1708 <code>Linux Kernel 3.10.0</code></td>
</tr>
<tr>
<td>网络环境</td>
<td>阿里云专有网络 内网带宽: <strong>2 Gbps</strong></td>
</tr>
<tr>
<td>测试工具</td>
<td><strong>wrk</strong></td>
</tr>
<tr>
<td>项目框架</td>
<td><code>SpringBoot 1.5.10.RELEASE</code></td>
</tr>
<tr>
<td>JDK</td>
<td><code>1.8.0_191</code> <code>Java HotSpot(TM) 64-Bit Server VM</code></td>
</tr>
<tr>
<td>测试容器</td>
<td><code>Tomcat</code> <code>Jetty</code> <code>Undertow</code></td>
</tr>
</tbody>
</table>
<h4>说明：</h4>
<ul>
<li>
<p>测试端和被测端分别在两台主机上 , 为了避免放在一台主机上导致互相抢占 <strong>CPU</strong> 而无法得到真实结果。</p>
</li>
<li>
<p>主角是 <strong>Servlet容器</strong> , 所以网络环境不应该是这次测试的瓶颈 ( 系统内核的 <strong>TCP</strong> 参数也要优化 ) 。</p>
</li>
<li>
<p>测试工具用过 <a href="https://github.com/wg/wrk">wrk</a> 、<a href="http://httpd.apache.org/docs/2.4/programs/ab.html" rel="nofollow">ab</a> 、<a href="http://jmeter.apache.org/" rel="nofollow">jmeter</a> , 测试的目的是为了获取被测端的性能 , 但不能因为测试工具的性能瓶颈而埋没了被测端的真实能力 , 因此选用简单高效的 <strong>wrk</strong> ( 下载源码编译安装 ) 。</p>
</li>
</ul>
<h3>测试方法</h3>
<hr>
<p>使用最简单的 <strong>HTTP</strong> 接口 , 不包含任何业务逻辑和数据库操作 , 反映容器的极致性能</p>
<ul>
<li>项目地址：<a href="https://github.com/anyesu/test/tree/master/servlet-test">https://github.com/anyesu/test/tree/master/servlet-test</a></li>
</ul>
<div class="highlight highlight-source-java"><pre><span class="pl-k">@RestController</span>
<span class="pl-k">@RequestMapping</span>(<span class="pl-s"><span class="pl-pds">"</span>/api<span class="pl-pds">"</span></span>)
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">TestController</span> {

    <span class="pl-k">@RequestMapping</span>(<span class="pl-s"><span class="pl-pds">"</span>/test<span class="pl-pds">"</span></span>)
    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">test</span>() {
        <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>This is a test result.<span class="pl-pds">"</span></span>;
    }

}</pre></div>
<p>使用 <strong>wrk</strong> 5000 并发下持续压测 10 分钟 ( 超时时间设为 30s , 避免超时时间过短带来的大量错误 )</p>
<pre><code>./wrk -t 8 -c 5000 -d 10m -T 30s "http://yourhostip:3000/api/test"
</code></pre>
<p><strong>说明：</strong></p>
<ul>
<li>
<p><strong>JVM</strong> 内存设置为 <strong>2G</strong> 大小</p>
</li>
<li>
<p>项目启动后需要预热 ( <strong>JIT</strong> 编译、加线程等等 ) 一下才能达到最优的性能。</p>
</li>
<li>
<p>为了避免性能数据波动造成的影响 , 每种情况测试 <strong>3</strong> 遍后取最优结果。</p>
</li>
<li>
<p>按理说测试时间越长越能反映真实情况，不过试了 <strong>30</strong> 分钟的测试 , 一趟测试下来耗费了一天时间 , 结果和 <strong>10</strong> 分钟的也差不了多少 , 所以还是节省点时间吧。</p>
</li>
</ul>
<h3>测试结果</h3>
<hr>
<h4>Tomcat 8.0.53 NIO 模式</h4>
<ul>
<li>
<p>启动命令:</p>
<div class="highlight highlight-source-shell"><pre>java -Xms2g -Xmx2g -Xmn1g -XX:MaxMetaspaceSize=256m -Xss256k -jar servlet-test-tomcat-8-nio.jar</pre></div>
</li>
<li>
<p>监控项:</p>
<pre><code>wrk 的 CPU 使用率: 161.3% ( 最大 800% )
Server 的 CPU 使用率: 52.4 us, 13.0 sy,  0.0 ni, 16.8 id,  0.0 wa,  0.0 hi, 17.8 si,  0.0 st
Server GC 情况：YGC: 870 YGCT: 5.3 FGC:0
</code></pre>
</li>
<li>
<p>wrk 结果:</p>
<pre><code>Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    86.31ms    7.23ms 778.24ms   88.50%
    Req/Sec     7.25k   420.33    14.55k    72.93%
  34639518 requests in 10.00m, 5.33GB read
  Socket errors: connect 0, read 1253, write 2928, timeout 0
Requests/sec:  57726.28
Transfer/sec:      9.09MB
</code></pre>
</li>
</ul>
<h4>Tomcat 8.5.34 NIO 模式</h4>
<ul>
<li>
<p>启动命令:</p>
<div class="highlight highlight-source-shell"><pre>java -Xms2g -Xmx2g -Xmn1g -XX:MaxMetaspaceSize=256m -Xss256k -jar servlet-test-tomcat-8.5-nio.jar</pre></div>
</li>
<li>
<p>监控项:</p>
<pre><code>wrk 的 CPU 使用率: 132.3% ( 最大 800% )
Server 的 CPU 使用率: 60.2 us, 14.1 sy,  0.0 ni, 19.1 id,  0.0 wa,  0.0 hi,  6.5 si,  0.0 st
Server GC 情况：YGC: 940 YGCT: 5.736 FGC:0
</code></pre>
</li>
<li>
<p>wrk 结果:</p>
<pre><code>Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    83.43ms    9.79ms   1.70s    96.22%
    Req/Sec     7.51k   408.60    14.48k    73.85%
  35852565 requests in 10.00m, 4.55GB read
  Socket errors: connect 0, read 1165, write 2883, timeout 0
Requests/sec:  59745.50
Transfer/sec:      7.76MB
</code></pre>
</li>
</ul>
<h4>Tomcat 8.0.53 APR 模式 ( <a href="https://www.cnblogs.com/xing901022/p/9145914.html" rel="nofollow">服务器上需要安装 apr 类库</a> )</h4>
<ul>
<li>
<p>启动命令:</p>
<div class="highlight highlight-source-shell"><pre>java -Xms2g -Xmx2g -Xmn1g -XX:MaxMetaspaceSize=256m -Xss256k -Djava.library.path=/usr/local/apr/lib -jar servlet-test-tomcat-8-apr.jar</pre></div>
</li>
<li>
<p>监控项:</p>
<pre><code>wrk 的 CPU 使用率: 183.4% ( 最大 800% )
Server 的 CPU 使用率: 69.5 us, 13.7 sy,  0.0 ni,  3.7 id,  0.0 wa,  0.0 hi, 13.1 si,  0.0 st
Server GC 情况：YGC: 1224 YGCT: 6.251 FGC:0
</code></pre>
</li>
<li>
<p>wrk 结果:</p>
<pre><code>Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    61.71ms   71.59ms   7.29s    99.87%
    Req/Sec    10.36k   441.68    18.63k    78.23%
  49480257 requests in 10.00m, 7.61GB read
  Socket errors: connect 0, read 1388, write 814, timeout 0
Requests/sec:  82453.62
Transfer/sec:     12.99MB
</code></pre>
</li>
</ul>
<h4>Jetty 9.4.8.v20171121</h4>
<ul>
<li>
<p>启动命令:</p>
<div class="highlight highlight-source-shell"><pre>java -Xms2g -Xmx2g -Xmn1g -XX:MaxMetaspaceSize=256m -Xss256k -jar servlet-test-jetty.jar</pre></div>
</li>
<li>
<p>监控项:</p>
<pre><code>wrk 的 CPU 使用率: 11.3% ( 最大 800% )
Server 的 CPU 使用率: 98.6 us,  0.5 sy,  0.0 ni,  0.5 id,  0.0 wa,  0.0 hi,  0.4 si,  0.0 st
Server GC 情况：YGC: 640 YGCT: 6.541 FGC:0
</code></pre>
</li>
<li>
<p>wrk 结果:</p>
<pre><code>Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   126.01ms  435.50ms  29.95s    90.64%
    Req/Sec   206.88    127.12     1.03k    70.75%
  978373 requests in 10.00m, 128.76MB read
  Socket errors: connect 0, read 95571, write 7191, timeout 331
Requests/sec:   1630.39
Transfer/sec:    219.72KB
</code></pre>
</li>
</ul>
<h4>Undertow 1.4.22.Final</h4>
<ul>
<li>
<p>启动命令:</p>
<div class="highlight highlight-source-shell"><pre>java -Xms2g -Xmx2g -Xmn1g -XX:MaxMetaspaceSize=256m -Xss256k -jar servlet-test-undertow.jar</pre></div>
</li>
<li>
<p>监控项:</p>
<pre><code>wrk 的 CPU 使用率: 32.6% ( 最大 800% )
Server 的 CPU 使用率: 93.6 us,  2.4 sy,  0.0 ni,  1.5 id,  0.0 wa,  0.0 hi,  2.5 si,  0.0 st
Server GC 情况：YGC: 370 YGCT: 1.684 FGC:0
</code></pre>
</li>
<li>
<p>wrk 结果:</p>
<pre><code>Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   354.95ms  138.95ms   1.93s    75.08%
    Req/Sec     1.77k   199.04     4.19k    72.85%
  8471058 requests in 10.00m, 1.28GB read
  Socket errors: connect 0, read 1601, write 2882, timeout 0
Requests/sec:  14117.10
Transfer/sec:      2.18MB
</code></pre>
</li>
</ul>
<h4>Undertow 1.4.22.Final 配置线程数</h4>
<ul>
<li>
<p>启动命令:</p>
<div class="highlight highlight-source-shell"><pre>java -Xms2g -Xmx2g -Xmn1g -XX:MaxMetaspaceSize=256m -Xss256k -Dserver.undertow.io-threads=16 -Dserver.undertow.worker-threads=256 -jar servlet-test-undertow.jar</pre></div>
</li>
<li>
<p>监控项:</p>
<pre><code>wrk 的 CPU 使用率: 33.3% ( 最大 800% )
Server 的 CPU 使用率: 92.1 us,  2.4 sy,  0.0 ni,  2.3 id,  0.0 wa,  0.0 hi,  3.2 si,  0.0 st
Server GC 情况：YGC: 367 YGCT: 2.23 FGC:0
</code></pre>
</li>
<li>
<p>wrk 结果:</p>
<pre><code>Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   391.49ms  333.83ms   3.23s    60.47%
    Req/Sec     1.76k   235.55     4.51k    69.41%
  8389131 requests in 10.00m, 1.27GB read
  Socket errors: connect 0, read 3987, write 3486, timeout 0
Requests/sec:  13980.36
Transfer/sec:      2.16MB
</code></pre>
</li>
</ul>
<h4>Undertow 2.0.15.Final</h4>
<ul>
<li>
<p>启动命令:</p>
<div class="highlight highlight-source-shell"><pre>java -Xms2g -Xmx2g -Xmn1g -XX:MaxMetaspaceSize=256m -Xss256k -jar servlet-test-undertow2.jar</pre></div>
</li>
<li>
<p>监控项:</p>
<pre><code>wrk 的 CPU 使用率: 31.6% ( 最大 800% )
Server 的 CPU 使用率: 90.0 us,  2.6 sy,  0.0 ni,  4.1 id,  0.0 wa,  0.0 hi,  3.3 si,  0.0 st
Server GC 情况：YGC: 361 YGCT: 2.676 FGC:0
</code></pre>
</li>
<li>
<p>wrk 结果:</p>
<pre><code>Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   368.09ms   17.14ms 942.66ms   97.28%
    Req/Sec     1.70k   164.17     4.01k    76.01%
  8118614 requests in 10.00m, 1.22GB read
  Socket errors: connect 0, read 686, write 1453, timeout 0
Requests/sec:  13530.04
Transfer/sec:      2.09MB
</code></pre>
</li>
</ul>
<h3>测试结果分析</h3>
<hr>
<table role="table">
<thead>
<tr>
<th>Servlet 容器</th>
<th>QPS</th>
<th>QPS / GC 次数</th>
</tr>
</thead>
<tbody>
<tr>
<td>Tomcat 8.0.53 NIO 模式</td>
<td>57726.28</td>
<td>57726.28 / 870 = 66.352</td>
</tr>
<tr>
<td>Tomcat 8.5.34 NIO 模式</td>
<td>59745.50</td>
<td>59745.50 / 940 = 63.559</td>
</tr>
<tr>
<td>Tomcat 8.0.53 APR 模式</td>
<td>82453.62 ( 最优 )</td>
<td>82453.62 / 1224 = 67.364</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Jetty 9.4.8.v20171121</td>
<td>1630.39 ( 最差 )</td>
<td>1630.39 / 640 = 2.547</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Undertow 1.4.22.Final</td>
<td>14117.10</td>
<td>14117.10 / 370 = 38.154</td>
</tr>
<tr>
<td>Undertow 1.4.22.Final 配置线程数</td>
<td>13980.36</td>
<td>13980.36 / 367 = 38.094</td>
</tr>
<tr>
<td>Undertow 2.0.15.Final</td>
<td>13530.04</td>
<td>13530.04 / 361 = 37.479</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>先说结果: <strong>Tomcat APR 模式</strong> "最优" , <strong>Jetty</strong> "最差" , <strong>Undertow</strong> 也没有想象中的碾压 <strong>Tomcat</strong></p>
</li>
<li>
<p><strong>Tomcat NIO 模式</strong> 压力刚上来的时候 <strong>CPU</strong> 会用满 , 稳定后基本会留有 <strong>10%</strong> 以上的空闲</p>
</li>
<li>
<p><strong>Jetty</strong> 采用的默认配置 , 才 <strong>2k</strong> 不到的 <strong>QPS</strong> 确实有点出乎意料的 , 需要配置后做进一步的测试对比</p>
</li>
<li>
<p><strong>Undertow</strong> 提供的配置项很少 , 只有 <strong>线程数</strong> 和 <strong>缓冲大小</strong> , 加大 <strong>线程数</strong> 后也没能提升性能。本次测试中 <strong>Undertow2.0</strong> 版本也没有性能上的提升。</p>
</li>
<li>
<p><strong>Tomcat8.5</strong> 相对于 <strong>Tomcat8.0</strong> 应该有性能上的提升 , 由于系统中安装的 <strong>apr</strong> 库的版本问题没有测试 <strong>Tomcat8.5+APR</strong> 的性能 ( <strong>Tomcat</strong> 版本和 <a href="http://archive.apache.org/dist/tomcat/tomcat-connectors/native/" rel="nofollow">apr</a> 版本要对应 )</p>
</li>
<li>
<p><strong>默认线程数</strong>: <strong>Undertow</strong> 为 <strong>8</strong> ( <strong>CPU</strong> 核心数 ) 个 <strong>IO</strong> 线程 + <strong>64</strong> ( <strong>8</strong> * <strong>IO</strong> 线程数 ) 个 <strong>WORK</strong> 线程, <strong>Tomcat</strong> 和 <strong>Jetty</strong> 均在 <strong>200</strong> 左右。因为都用的 <strong>NIO</strong> , 所以调大线程数效果不大 , 反而带来 <strong>CPU上下文切换</strong> 和 <strong>内存消耗 ( -Xss )</strong> 的问题</p>
</li>
<li>
<p>听人说 <strong>Undertow</strong> 在正常运行中会莫名其妙挂掉 , 具体原因还不清楚</p>
</li>
</ul>
<h3>优化</h3>
<hr>
<ul>
<li>
<p><strong>JVM 参数</strong></p>
<p>曾经我也比较信奉所谓的 <strong>标准参数</strong> , 然而按照上述方法单独对 <strong>Tomcat</strong> 进行对比测试后并没有得到所谓的 <strong>"参数调优"</strong> 的效果, 所以还是 <strong>针对实际运行情况再做调整吧</strong>。<br>
主要几类配置项有:</p>
<ol>
<li>
<p>-server</p>
</li>
<li>
<p>内存 ( -Xms -Xmx -Xmn -Xss )</p>
</li>
<li>
<p><a href="https://blog.csdn.net/chroje/article/details/79573010" rel="nofollow">垃圾回收器组合</a></p>
</li>
<li>
<p>GC 相关参数 ( 打印日志 / DisableExplicitGC /ExplicitGCInvokesConcurrent / 定时 GC )</p>
</li>
</ol>
</li>
<li>
<p><strong>Connector 运行模式</strong></p>
<p><strong>Tomcat Connector</strong> 有 <strong>BIO</strong> 、<strong>NIO</strong> 、<strong>APR</strong> 三种运行模式 ( 可以看下这篇 <a href="http://hongjiang.info/how-tomcat-implements-keep-alive/" rel="nofollow">文章</a> ) , 虽然 <strong>APR</strong> 模式性能最好 ( 不绝对 ) , 但也带来了维护上的成本 , 所以还是那句话 —— <strong>针对实际的业务场景选择</strong></p>
</li>
<li>
<p><strong>项目运行参数</strong></p>
<p><strong>SpringBoot</strong> 中几个容器的可配置项都在 <strong>org.springframework.boot.autoconfigure.web.ServerProperties</strong> 这个类中, 一般默认就行了, 遇到问题再调整 ( <strong>Tomcat</strong> 相关配置可以看 <a href="http://hongjiang.info/index/tomcat/" rel="nofollow">这里</a> )</p>
</li>
</ul>
<h3>结语</h3>
<hr>
<ul>
<li>
<p><strong>本次测试结果和大部分网上的测试正好相反</strong>。</p>
<p>网上的测试：在一台机器上跑 , 用例并发量比较小 , 得到的 <strong>QPS</strong> 也比较低 ( 几百的数值而且比较接近 ) ，也没有说明测试使用的机器配置和容器版本 , 只是简单的把 <strong>Tomcat</strong> 归类为性能最差。这样的测试结论我认为是很不可靠的。</p>
<p>时间有限 , 以上只是部分的测试用例 , 实际可以组合的情况 ( 服务器配置、容器版本、实际业务代码等等 ) 多了去了 , 所以再强调一遍 —— <strong>本次测试结果仅供参考</strong> 。</p>
</li>
<li>
<p><strong>有人可能会奇怪本次测试的意义？</strong></p>
<p>一般服务器上会部署多个应用 , 不会让一个应用把所有 <strong>CPU</strong> 都吃满 , 而且一般线上应用也不会是这么简单的接口 , 瓶颈往往是在一些复杂的业务逻辑和数据库上 , 网上也有提到三种容器使用的业务场景也有所不同。</p>
<p>我想说的是 , 本次测试纯粹是测试容器的性能 , 空跑的结果都摆在这了 , 跑业务的话性能难道能更好？如果 <strong>Jetty</strong> 真的如测试中那么差 , 还会有人用它跑高并发的项目吗？</p>
<p><strong>所以 , 本文只是提供一种测试思路 , 有疑问就多动动手进行论证 , 在没有亲自实践过的情况下都不应该轻易下"绝对"的结论。</strong></p>
</li>
</ul>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/f7cb40a8ce22">https://www.jianshu.com/p/f7cb40a8ce22</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-21T17:06:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 GitLab + Jenkins 实现自动化构建]]></title>
        <id>20</id>
        <link href="https://anyesu.github.io/blog/articles/20"/>
        <updated>2019-09-21T16:26:41.000Z</updated>
        <summary type="html"><![CDATA[背景 在测试环境部署这块, 经历过以下几个阶段: 阶段一 有一台测试服务器把项目放上面测试, 当初也没有什么相关的经验, 每次改完代码本地打包上传到服务器上, 然后一顿命令启动项目, 完成了最原始的部署。 这种方式构建和部署全靠人肉, 项目简单的时候还好说, 项目一多配置一多 ( 比如微服务 ) 中间哪个环节粗心出点错那简直就是灾难。 同时还要专门有人对运维相关的技术比较了解, 不然哪天我不在测试]]></summary>
        <content type="html"><![CDATA[<h3>背景</h3>
<hr>
<p>在测试环境部署这块, 经历过以下几个阶段:</p>
<ul>
<li>
<p>阶段一</p>
<p>有一台测试服务器把项目放上面测试, 当初也没有什么相关的经验, 每次改完代码本地打包上传到服务器上, 然后一顿命令启动项目, 完成了最原始的部署。</p>
<p>这种方式构建和部署全靠人肉, 项目简单的时候还好说, 项目一多配置一多 ( 比如微服务 ) 中间哪个环节粗心出点错那简直就是灾难。</p>
<p>同时还要专门有人对运维相关的技术比较了解, 不然哪天我不在测试工作就完全停滞了。</p>
</li>
<li>
<p>阶段二</p>
<p>既然都是重复工作, 那就整理下步骤写个脚本</p>
<ol>
<li>
<p>从 <strong>SVN</strong> 拉代码</p>
</li>
<li>
<p><strong>Maven</strong> 构建打包</p>
</li>
<li>
<p>重启 <strong>Tomcat</strong></p>
</li>
</ol>
<p>每次执行下脚本就搞定了。看着挺不错的, 不过实际执行时的情况总会复杂许多 ( 服务器帐号权限、测试人员对 <strong>Linux</strong> 的熟悉程度、项目启动依赖复杂等等问题 ) 。</p>
</li>
<li>
<p>阶段三</p>
<p>了解到 <strong>Jenkins</strong> 是个不错的工具, 那就把脚本的内容迁移到 <strong>Jenkins</strong> 上, 不管是开发还是测试只要在 web 界面上点击一下按钮即可完成构建部署, 很 easy。</p>
</li>
<li>
<p>阶段四</p>
<p><strong>容器化</strong>: 使用 <strong>Docker</strong> 来部署项目, 这样就可以干掉原来服务器上散落各地参差不齐的 <strong>Tomcat</strong> ( 不同项目依赖不同 ) , 利用 <strong>Docker Compose</strong> 对项目进行编排, 提供一种规范的构建配置 ( 同时也是一份文档 ) , 大大减小了后期维护和交接的成本。</p>
</li>
<li>
<p>阶段五</p>
<p>上面的阶段已经能解决日常需求了, 但是还有一点问题就是每次提交完代码还要手动去 <strong>Jenkins</strong> 上发布, 能更自动点就更好了 ( 嗯, 就是懒 ) 。</p>
<p>于是就引出了本文的目标 —— 自动持续构建, 不需要人工操作 ( 留人工操作用于处理特殊情况 )</p>
</li>
</ul>
<h3>方案流程</h3>
<hr>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/94507635c4e343e3adee038248cab858c81e24657e556ef7e9fc3d51f818727b/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d663566643533373561626364656238622e706e67"><img src="https://camo.githubusercontent.com/94507635c4e343e3adee038248cab858c81e24657e556ef7e9fc3d51f818727b/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d663566643533373561626364656238622e706e67" alt="流程图" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-f5fd5375abcdeb8b.png" style="max-width:100%;"></a></p>
<ol>
<li>
<p>开发提交代码</p>
</li>
<li>
<p>开发对需要发布的版本打上 <strong>Tag</strong></p>
</li>
<li>
<p>触发 <strong>GitLab</strong> 的 <strong>tag push</strong> 事件, 调用 <strong>Webhook</strong></p>
</li>
<li>
<p><strong>Webhook</strong> 触发 <strong>Jenkins</strong> 的构建任务</p>
</li>
<li>
<p><strong>Jenkins</strong> 构建完项目可以按版本号上传到仓库、部署、通知相关人员等等</p>
</li>
</ol>
<h3>安装 GitLab</h3>
<hr>
<p><a href="https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose" rel="nofollow">GitLab 官方文档</a> 已经介绍的比较详细了, 这里不再赘述, 下面给出最终调整过的 <a href="https://docs.docker.com/compose/compose-file/" rel="nofollow">Docker Compose</a> 配置:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">gitlab</span>:
  <span class="pl-ent">image</span>: <span class="pl-s"><span class="pl-pds">"</span>twang2218/gitlab-ce-zh:11.0.2<span class="pl-pds">"</span></span>
  <span class="pl-ent">restart</span>: <span class="pl-s">always</span>
  <span class="pl-ent">hostname</span>: <span class="pl-s"><span class="pl-pds">'</span>gitlab<span class="pl-pds">'</span></span>
  <span class="pl-ent">ports</span>:
    - <span class="pl-s"><span class="pl-pds">"</span>10022:22<span class="pl-pds">"</span></span>
    - <span class="pl-s"><span class="pl-pds">"</span>10080:10080<span class="pl-pds">"</span></span>
    <span class="pl-c"><span class="pl-c">#</span> postgresql 端口</span>
    - <span class="pl-s"><span class="pl-pds">"</span>5432:5432<span class="pl-pds">"</span></span>
  <span class="pl-ent">volumes</span>:
    - <span class="pl-s">./gitlab/data:/var/opt/gitlab</span>
    - <span class="pl-s">./gitlab/log:/var/log/gitlab</span>
    - <span class="pl-s">./gitlab/config:/etc/gitlab</span>
  <span class="pl-ent">environment</span>:
    <span class="pl-ent">GITLAB_OMNIBUS_CONFIG</span>: <span class="pl-s">|</span>
<span class="pl-s">      # 仓库路径, 填写宿主机的域名或 IP</span>
<span class="pl-s">      external_url 'http://192.168.xxx.xxx:10080'</span>
<span class="pl-s">      # 调整工作进程数减小内存占用，最小为 2</span>
<span class="pl-s">      unicorn['worker_processes'] = 2</span>
<span class="pl-s">      gitlab_rails['time_zone'] = 'Asia/Shanghai'</span>
<span class="pl-s"></span>
<span class="pl-s">      # 邮箱配置</span>
<span class="pl-s">      gitlab_rails['gitlab_email_from'] = '&lt;your_email&gt;'</span>
<span class="pl-s">      gitlab_rails['gitlab_email_display_name'] = '&lt;your_email_name&gt;'</span>
<span class="pl-s">      gitlab_rails['smtp_enable'] = <span class="pl-c1">true</span></span>
<span class="pl-s">      gitlab_rails['smtp_address'] = 'smtp.163.com'</span>
<span class="pl-s">      gitlab_rails['smtp_port'] = 25</span>
<span class="pl-s">      gitlab_rails['smtp_user_name'] = "&lt;your_email_account&gt;"</span>
<span class="pl-s">      gitlab_rails['smtp_password'] = "&lt;your_email_password&gt;"</span>
<span class="pl-s">      gitlab_rails['smtp_domain'] = 'smtp.163.com'</span>
<span class="pl-s">      gitlab_rails['smtp_tls'] = <span class="pl-c1">false</span></span>
<span class="pl-s">      gitlab_rails['smtp_openssl_verify_mode'] = 'none'</span>
<span class="pl-s">      gitlab_rails['smtp_enable_starttls_auto'] = <span class="pl-c1">false</span></span>
<span class="pl-s">      gitlab_rails['smtp_ssl'] = <span class="pl-c1">false</span></span>
<span class="pl-s">      gitlab_rails['smtp_force_ssl'] = <span class="pl-c1">false</span></span>
<span class="pl-s"></span>
<span class="pl-s">      # 数据库配置</span>
<span class="pl-s">      gitlab_rails['db_host'] = '127.0.0.1'</span>
<span class="pl-s">      gitlab_rails['db_port'] = 5432</span>
<span class="pl-s">      gitlab_rails['db_username'] = "gitlab"</span>
<span class="pl-s">      gitlab_rails['db_password'] = "gitlab"</span>
<span class="pl-s">      </span>
<span class="pl-s">      postgresql['listen_address'] = '0.0.0.0'</span>
<span class="pl-s">      postgresql['port'] = 5432</span>
<span class="pl-s">      postgresql['md5_auth_cidr_addresses'] = %w()</span>
<span class="pl-s">      postgresql['trust_auth_cidr_addresses'] = %w(0.0.0.0/0)</span>
<span class="pl-s">      postgresql['sql_user'] = "gitlab"</span>
<span class="pl-s">      postgresql['sql_user_password'] = Digest::MD5.hexdigest "gitlab" &lt;&lt; postgresql['sql_user']</span>
<span class="pl-s"></span>
<span class="pl-s">      # 备份设置-保留7天</span>
<span class="pl-s">      gitlab_rails['backup_keep_time'] = 604800</span>
<span class="pl-s"></span>    <span class="pl-ent">GITLAB_BACKUPS</span>: <span class="pl-s"><span class="pl-pds">"</span>daily<span class="pl-pds">"</span></span>
    <span class="pl-ent">GITLAB_SIGNUP</span>: <span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>
    <span class="pl-ent">GITLAB_ROOT_PASSWORD</span>: <span class="pl-s"><span class="pl-pds">"</span>lb80h&amp;85<span class="pl-pds">"</span></span>
    <span class="pl-ent">GITLAB_GRAVATAR_ENABLED</span>: <span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span></pre></div>
<p>说明：</p>
<ul>
<li>
<p>这里使用 <strong>汉化版</strong> 镜像, 如果不适应可以换回 <strong>官方原版</strong> 镜像 <code>gitlab/gitlab-ce:11.0.2-ce.0</code></p>
</li>
<li>
<p>项目初始配置 + 启动很慢, 需要一段时间, 日志中出现 <strong>Reconfigured</strong> 时表示启动成功</p>
</li>
<li>
<p><strong>192.168.xxx.xxx</strong> 替换为宿主机的 <strong>IP</strong> 地址</p>
</li>
<li>
<p>初始管理员帐号密码: <code>root</code> / <code>lb80h&amp;85</code> ( 自行修改配置文件中的密码 )</p>
</li>
<li>
<p>该配置为 <strong>乞丐版</strong> , 内存占用 2G+ ( <strong>worker_processes</strong> 越多内存占用越大, 默认为 8G )</p>
</li>
<li>
<p><strong>postgresql</strong> 为容器中内置的数据库 ( 帐号: <code>gitlab</code> / <code>gitlab</code> ) , 没必要就不用暴露端口了</p>
</li>
<li>
<p>邮箱填写用于发送找回密码和通知的发件人帐号 ( <a href="https://www.cnblogs.com/wenwei-blog/p/6286944.html" rel="nofollow">收不到邮件?</a> ) , 不想配置就删掉相关配置好了, 不影响正常使用</p>
</li>
</ul>
<h3>安装 Jenkins</h3>
<hr>
<p>为了测试方便, 使用 <strong>Docker</strong> 化的 <strong>Jenkins</strong> , 如果需要调用一些特殊的命令或脚本就不是很方便, 实际使用过程中可以换成普通版的。</p>
<p><a href="https://docs.docker.com/compose/compose-file/" rel="nofollow">Docker Compose</a> 配置如下:</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-ent">version</span>: <span class="pl-s"><span class="pl-pds">'</span>3<span class="pl-pds">'</span></span>
<span class="pl-ent">services</span>:
  <span class="pl-ent">jenkins</span>:
    <span class="pl-ent">image</span>: <span class="pl-s">jenkins/jenkins:2.151</span>
    <span class="pl-ent">container_name</span>: <span class="pl-s">jenkins</span>
    <span class="pl-ent">networks</span>:
    - <span class="pl-s">net</span>
    <span class="pl-ent">user</span>: <span class="pl-s"><span class="pl-pds">"</span>root<span class="pl-pds">"</span></span>
    <span class="pl-ent">restart</span>: <span class="pl-s">always</span>
    <span class="pl-ent">ports</span>:
    - <span class="pl-c1">9000:8080</span>
    <span class="pl-ent">environment</span>:
    - <span class="pl-s">JAVA_OPTS="-Duser.timezone=Asia/Shanghai"</span>
    <span class="pl-ent">volumes</span>:
    - <span class="pl-s">/etc/localtime:/etc/localtime:ro</span>
    - <span class="pl-s">./data:/var/jenkins_home:rw</span>
    - <span class="pl-s">./backup:/var/jenkins_backup:rw</span>
<span class="pl-c"><span class="pl-c">#</span> 网络配置</span>
<span class="pl-ent">networks</span>:
  <span class="pl-ent">net</span>:
    <span class="pl-ent">driver</span>: <span class="pl-s">bridge</span>
    <span class="pl-ent">ipam</span>:
      <span class="pl-ent">driver</span>: <span class="pl-s">default</span>
      <span class="pl-ent">config</span>:
      - <span class="pl-ent">subnet</span>: <span class="pl-s">172.23.0.0/16</span></pre></div>
<p>说明：</p>
<ul>
<li>
<p>初次启动请打印日志, 日志中有管理员帐号的初始密码, 第一次登陆的时候需要用到</p>
</li>
<li>
<p>为了方便, 使用 <strong>root</strong> 帐号启动容器, 如果使用默认帐号启动需要修改本地目录 ( data、backup ) 的权限</p>
</li>
</ul>
<h3>配置 GitLab</h3>
<hr>
<p>注册账号什么的就不赘述了, 建一个测试项目 <strong>test</strong> , 随便 <strong>commit</strong> 几条内容</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6b7ab2d593c7195083527d0be8811a4c9ea18f482ec819c92c9c82b2a07ce146/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d623766623065373032616339316266302e706e67"><img src="https://camo.githubusercontent.com/6b7ab2d593c7195083527d0be8811a4c9ea18f482ec819c92c9c82b2a07ce146/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d623766623065373032616339316266302e706e67" alt="新建测试项目" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-b7fb0e702ac91bf0.png" style="max-width:100%;"></a></p>
<p>按下图步骤创建账号的 <strong>access token</strong> , 用于 <strong>Jenkins</strong> 调用 <strong>GitLab</strong> 的 <strong>API</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/64a408fecaf853452b8058c1490fda62894ef72fa45e376bcfaa149f717ccbf5/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d383965393739383561356132386563392e706e67"><img src="https://camo.githubusercontent.com/64a408fecaf853452b8058c1490fda62894ef72fa45e376bcfaa149f717ccbf5/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d383965393739383561356132386563392e706e67" alt="创建 access token" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-89e97985a5a28ec9.png" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/55cd14df772e9b9808595fd958f9ff69b199ff11ab7109cc13d68754c151117e/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d303636356564396435373133346139382e706e67"><img src="https://camo.githubusercontent.com/55cd14df772e9b9808595fd958f9ff69b199ff11ab7109cc13d68754c151117e/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d303636356564396435373133346139382e706e67" alt="获取 access token" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-0665ed9d57134a98.png" style="max-width:100%;"></a></p>
<p>记下这里生成的 <strong>access token</strong> ( <code>gRCtwVWU8cxwHdxxVZJD</code> ) , 后面要用到。</p>
<h3>配置 Jenkins</h3>
<hr>
<ul>
<li>
<p><strong>安装插件 ( 安装过程可能会失败,多试几次就好了 )</strong></p>
<ul>
<li>
<p><a href="https://wiki.jenkins.io/display/JENKINS/Git+Parameter+Plugin" rel="nofollow">Git Parameter</a> ( 用于参数化构建中动态获取项目分支 )</p>
</li>
<li>
<p><a href="https://wiki.jenkins-ci.org/display/JENKINS/Generic+Webhook+Trigger+Plugin" rel="nofollow">Generic Webhook Trigger</a> ( 用于解析 <strong>Webhook</strong> 传过来的参数 )</p>
</li>
<li>
<p><a href="https://wiki.jenkins-ci.org/display/JENKINS/GitLab+Plugin" rel="nofollow">GitLab</a> ( 用于推送构建结果给 <strong>GitLab</strong> )</p>
</li>
</ul>
</li>
<li>
<p><strong>添加 GitLab 凭据</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/1cb95b44d9b481940e4a6ba8e6d3f8fd549a29863ee7b8d7379d8f7126f5e998/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d663164663139306535633138363439622e706e67"><img src="https://camo.githubusercontent.com/1cb95b44d9b481940e4a6ba8e6d3f8fd549a29863ee7b8d7379d8f7126f5e998/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d663164663139306535633138363439622e706e67" alt="首页 -&gt; 凭据 -&gt; 系统 -&gt; 全局凭据 -&gt; 添加凭据, 把上面 GitLab 中生成的 access token 填进去" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-f1df190e5c18649b.png" style="max-width:100%;"></a></p>
</li>
<li>
<p><strong>配置 GitLab 连接</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/96966bab0f5b4ea8c505658538b25d767d8711915a863645d045bed9c561f0cc/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d333466613137306163663134356137382e706e67"><img src="https://camo.githubusercontent.com/96966bab0f5b4ea8c505658538b25d767d8711915a863645d045bed9c561f0cc/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d333466613137306163663134356137382e706e67" alt="首页 -&gt; 系统管理 -&gt; 系统设置 -&gt; Gitlab 配置项, 填入 GitLab 相关的配置, 后面配置项目时用到" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-34fa170acf145a78.png" style="max-width:100%;"></a></p>
</li>
<li>
<p><strong>新建项目 test</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/205c818135f36df74f0d98c5afe6c86aa193e43e4424f8fe686683a23a9243f7/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d313764316536333637333138613133662e706e67"><img src="https://camo.githubusercontent.com/205c818135f36df74f0d98c5afe6c86aa193e43e4424f8fe686683a23a9243f7/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d313764316536333637333138613133662e706e67" alt="Jenkins项目完整配置" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-17d1e6367318a13f.png" style="max-width:100%;"></a></p>
<ul>
<li>
<p><strong>勾选</strong> 参数化构建过程, 添加 <strong>Git Parameter</strong> 类型的参数 <strong>ref</strong> , 这样构建的时候就可以指定分支进行构建。</p>
</li>
<li>
<p><strong>Source Code Management</strong> 选择 <strong>Git</strong> , 添加项目地址和授权方式 ( <strong>帐号密码</strong> 或者 <strong>ssh key</strong> ) , 分支填写构建参数 <strong>$ref</strong>。</p>
</li>
<li>
<p><strong>Build Triggers</strong> 选择 <strong>Generic Webhook Trigger</strong> 方式用于解析 <strong>GitLab</strong> 推过来的详细参数 ( <a href="http://jsonpath.com" rel="nofollow">jsonpath 在线测试</a> ) 。其他触发方式中: <a href="https://www.cnblogs.com/jwentest/p/8204421.html" rel="nofollow">Trigger builds remotely</a> 是 <strong>Jenkins</strong> 自带的, <strong>Build when a change is pushed to GitLab</strong> 是 <strong>GitLab 插件</strong> 提供的, 都属于简单的触发构建, 无法做复杂的处理。</p>
</li>
<li>
<p>虽然 <strong>Generic Webhook Trigger</strong> 提供了 <strong>Token</strong> 参数进行鉴权, 但为了避免不同项目进行混调 ( 比如 A 项目提交代码却触发了 B 项目的构建) , 还要对请求做下过滤。<strong>Optional filter</strong> 中 <strong>Text</strong> 填写需要校验的内容 ( 可使用变量 ) , <strong>Expression</strong> 使用正则表达式对 <strong>Text</strong> 进行匹配, 匹配成功才允许触发构建。</p>
</li>
<li>
<p><strong>Build</strong> 内容按自己实际的项目类型进行调整, 使用 <strong>Maven 插件</strong> 或 <strong>脚本</strong> 等等。</p>
</li>
<li>
<p><strong>GitLab Connection</strong> 选择上面添加的 <strong>GitLab 连接 ( <code>Jenkins</code> )</strong> , <strong>Post-build Actions</strong> 添加 <strong>Publish build status to GitLab</strong> 动作, 实现构建结束后通知构建结果给 <strong>GitLab</strong>。</p>
</li>
</ul>
</li>
<li>
<p>回到 <strong>GitLab</strong> 的项目页面中, 添加一个 <strong>Webhook</strong> ( http://JENKINS_URL/generic-webhook-trigger/invoke?token=&lt;上面 <strong>Jenkins</strong> 项目配置中的 <strong>token</strong>&gt; ) , 触发器选择 <strong>标签推送事件</strong>。因为日常开发中 <strong>push</strong> 操作比较频繁而且不是每个版本都需要构建, 所以只针对需要构建的版本打上 <strong>Tag</strong> 就好了。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/1d741698a52b2174e25c6520e19705d402a1f39ecf1da1736e3bbc92353f2786/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d393263643666626436613362333233332e706e67"><img src="https://camo.githubusercontent.com/1d741698a52b2174e25c6520e19705d402a1f39ecf1da1736e3bbc92353f2786/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d393263643666626436613362333233332e706e67" alt="gitlab添加 Webhook" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-92cd6fbd6a3b3233.png" style="max-width:100%;"></a></p>
<p>创建完使用 <strong>test 按钮</strong> 先测试下, 可能会出现下面的错误</p>
<blockquote>
<p>Hook execution failed: URL '<a href="http://192.168.xxx.xxx:9000/generic-webhook-trigger/invoke?token=d63ad84eb18cb04d4459ec347a196dce" rel="nofollow">http://192.168.xxx.xxx:9000/generic-webhook-trigger/invoke?token=d63ad84eb18cb04d4459ec347a196dce</a>' is blocked: Requests to the local network are not allowed</p>
</blockquote>
<p><strong>解决办法: <a href="https://blog.csdn.net/xukangkang1hao/article/details/80756085" rel="nofollow">允许 GitLab 本地网络发送 Webhook 请求</a></strong></p>
</li>
</ul>
<h3>测试效果</h3>
<hr>
<p>可以在 <strong>GitLab</strong> 直接添加 <strong>Tag</strong> , 不过我觉得用 <strong>IDEA</strong> 上操作更方便点, 就把代码拉下来在本地操作</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/5620867cafec6d79df194ae82b11aff2b3bbaf911c8b1a9b07faa02f9b717c84/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d326265366338326161663532646433302e706e67"><img src="https://camo.githubusercontent.com/5620867cafec6d79df194ae82b11aff2b3bbaf911c8b1a9b07faa02f9b717c84/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d326265366338326161663532646433302e706e67" alt="针对每个commit添加tag" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-2be6c82aaf52dd30.png" style="max-width:100%;"></a></p>
<p>然后使用快捷键 <strong>Ctrl + Shift + K</strong> 调出 <strong>Push 窗口</strong> , 把 <strong>Tag</strong> 推送到 <strong>GitLab</strong> 中</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6707d8f099a0d100ed5546fcf0d1c5c7fe4bdf38a1d93e50f9bef40b644d1e00/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d393366646636646562313630336338332e706e67"><img src="https://camo.githubusercontent.com/6707d8f099a0d100ed5546fcf0d1c5c7fe4bdf38a1d93e50f9bef40b644d1e00/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d393366646636646562313630336338332e706e67" alt="push tag" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-93fdf6deb1603c83.png" style="max-width:100%;"></a></p>
<p>回到 <strong>GitLab</strong> 页面可以看到触发了 <strong>Webhook</strong> , <strong>View details</strong> 查看请求详情, <strong>Response body</strong> 中 <code>triggered</code> 字段值为 <code>true</code> 则表示成功触发了 <strong>Jenkins</strong> 进行构建</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd03851ec57f7c61c570415a1e0e9a88395a682a2e0e496e8e093f7bcf9b22e5/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613363653934376661336536653366322e706e67"><img src="https://camo.githubusercontent.com/cd03851ec57f7c61c570415a1e0e9a88395a682a2e0e496e8e093f7bcf9b22e5/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613363653934376661336536653366322e706e67" alt="Webhook 触发历史" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-a3ce947fa3e6e3f2.png" style="max-width:100%;"></a></p>
<p>再看下构建结果</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/4aee71eaf802133badb3230f8ce9ae0ddd090653f3486c31b6f485dcdd1ebca3/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613964386230386239373534313264302e706e67"><img src="https://camo.githubusercontent.com/4aee71eaf802133badb3230f8ce9ae0ddd090653f3486c31b6f485dcdd1ebca3/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613964386230386239373534313264302e706e67" alt="gitlab 查看构建结果 — 流水线" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-a9d8b08b975412d0.png" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/7d804a1a81ade0a76d5a07e131e370a260aba4fc050a34f116f4a3046bc5386c/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d313931303835616363643034623837642e706e67"><img src="https://camo.githubusercontent.com/7d804a1a81ade0a76d5a07e131e370a260aba4fc050a34f116f4a3046bc5386c/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d313931303835616363643034623837642e706e67" alt="gitlab 中查看构建结果 — commits" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-191085accd04b87d.png" style="max-width:100%;"></a></p>
<p><strong>注意:</strong> 每添加一个 <strong>Tag</strong> 就会触发一次事件, 不管是不是一起 <strong>push</strong> 的。所以一次 <strong>push</strong> 多个 <strong>Tag</strong> 会触发 <strong>Jenkins</strong> 进行多次构建。不过 <strong>Jenkins</strong> 已经做了处理, 默认串行执行任务 ( 一个任务结束再执行下一个 ) , 而且在构建前有一个 <strong>pending</strong> 状态, 此时被多次触发会进行合并, 并取首次触发的参数, 如下图所示:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/440fd4eaf0ffc34ea0283388a4e8904914a3a44bb56075e93b77c7e13e20d2d6/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d346433616134646366653862336265382e706e67"><img src="https://camo.githubusercontent.com/440fd4eaf0ffc34ea0283388a4e8904914a3a44bb56075e93b77c7e13e20d2d6/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d346433616134646366653862336265382e706e67" alt="同时触发多次事件" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-4d3aa4dcfe8b3be8.png" style="max-width:100%;"></a></p>
<h3>关于 Tag 的几点说明</h3>
<hr>
<ul>
<li>
<p>推送 <strong>Tag</strong> 到远端的时候, 远端已存在 ( 同名 ) 的 <strong>Tag</strong> 不会被添加到远端</p>
</li>
<li>
<p>拉取远端的 <strong>Tag</strong> 时, 本地已存在 ( 同名 ) 的 <strong>Tag</strong> 不会添加到本地</p>
</li>
<li>
<p>拉取远端的 <strong>Tag</strong> 时, 本地不会删除远端已删除的 <strong>Tag</strong> , 需要同步远端的 <strong>Tag</strong> 可以先删除本地所有 <strong>Tag</strong> 再 <strong>pull</strong></p>
</li>
<li>
<p>删除 <strong>Tag</strong> 也会推送事件, 要做好过滤 ( 上面配置中已使用 <strong>commitsId</strong> 字段进行过滤 )</p>
</li>
</ul>
<h3>未完待续</h3>
<hr>
<p><strong>通过上面的步骤已经初步实现了想要的效果, 还有几个点后续可以再考虑下：</strong></p>
<ul>
<li>
<p>上文只包含自动构建的内容, 对于项目的部署可以考虑几种方式: 手动选择指定的版本进行发布、构建任务结束后直接触发部署任务、定时部署最新版本 ( 根据实际需求调整 )。</p>
</li>
<li>
<p>测试发版的频率会比较高, 会生成大量的 <strong>Tag</strong> , 可以约定 <strong>Tag</strong> 的格式, 比如 <code>test 0.0.1</code> 表示触发测试环境的项目构建, <code>online 1.0.0</code> 表示触发正式版本构建, 隔离之后可以方便后续的维护和清理。</p>
</li>
<li>
<p>构建部分可以整合 <strong>Docker</strong> , 把构建结果打包到 <strong>Docker</strong> 镜像中 ( 代码版本库的 <strong>Tag</strong> 正好可以作为镜像的 <strong>Tag</strong> ) , 再上传到 <strong>Docker</strong> 镜像仓库 ( <a href="https://docs.docker.com/registry/" rel="nofollow">私服</a> 或者第三方仓库 ) 中, 后续部署就可以直接从镜像仓库拉取镜像直接运行了。</p>
</li>
<li>
<p>集成自动化测试 , 比如 <a href="https://www.yiibai.com/jenkins/jenkins_continuous_deployment.html" rel="nofollow">这个</a></p>
</li>
<li>
<p>尝试配置 <strong>GitLab</strong> 自带的 <a href="https://gitlab.com/help/ci/quick_start/README.md" rel="nofollow">CI / CD</a></p>
</li>
</ul>
<h3>总结</h3>
<hr>
<p>以上就是对曾经踩过的一些坑进行的整合, 也没什么好总结的。总之, 合理地利用现有工具来解放双手, 就能有更多时间做其他想做的事!</p>
<p>时间有限一些基础的步骤就不细讲直接一笔带过了, 方案上可能有些细节方面也没考虑全, 欢迎评论留言。</p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/7e8037c63d63">https://www.jianshu.com/p/7e8037c63d63</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-21T16:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 SSH TUNNEL 打通公司和家里的网络]]></title>
        <id>19</id>
        <link href="https://anyesu.github.io/blog/articles/19"/>
        <updated>2019-09-21T12:38:53.000Z</updated>
        <summary type="html"><![CDATA[前言 平时经常遇到下面的情况： 工作没做完，想回家继续做。带电脑回家？ 碰到以前做过的功能，想从家里的电脑捞一点代码。没独立 IP 怎么访问？ 服务器只允许公司网络访问，在外面要登服务器。找领导设置安全组权限 ( 或者防火墙 ) ？ 在外面想访问公司局域网中的某个服务，比如 Gitlab ？ 公司网络不能逛淘宝？ 想去墙外的世界看一看？ 一般情况下的对应方法： 远程连接 ( 比如 Windows ]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>平时经常遇到下面的情况：</p>
<ol>
<li>工作没做完，想回家继续做。带电脑回家？</li>
<li>碰到以前做过的功能，想从家里的电脑捞一点代码。没独立 <strong>IP</strong> 怎么访问？</li>
<li>服务器只允许公司网络访问，在外面要登服务器。找领导设置安全组权限 ( 或者防火墙 ) ？</li>
<li>在外面想访问公司局域网中的某个服务，比如 <strong>Gitlab</strong> ？</li>
<li>公司网络不能逛淘宝？</li>
<li>想去墙外的世界看一看？</li>
</ol>
<p>一般情况下的对应方法：</p>
<ol>
<li>远程连接 ( 比如 <strong>Windows</strong> 自带的 )</li>
<li><strong>NAT</strong> 内网穿透 ( 比如花生壳，几年前用过免费版的，不太稳定，<strong>Linux</strong> 下安装也不太顺畅 )</li>
<li>一般需要正当理由</li>
<li>公司有固定公网 <strong>IP</strong> 的话，路由器设置端口转发，不过路由器权限呢？</li>
<li>代理服务器</li>
<li><strong>VPN</strong> ( 作用和代理服务器差不多，但原理不一样 )</li>
</ol>
<p>本文的目的就是使用 <strong>SSH TUNNEL</strong> 这项技术解决上面的问题，也就是打通所谓的 "公司内网" 和 "家庭内网"。</p>
<h3>SSH TUNNEL 简介</h3>
<hr>
<p>经常远程连接 <strong>Linux</strong> 服务器的小伙伴，对于 <strong>ssh</strong> 这个命令应该不陌生吧。它还可以不执行远程指令只建立一条和远程服务器之间的连接，也就是形成了一条通道，在这条通道上我们就可以做一些文章了。<br>
先看下 <strong>ssh</strong> 命令的参数介绍 ( 需要了解更多请通过命令 <a href="https://linux.die.net/man/1/ssh" rel="nofollow"><code>man ssh</code></a> 查看 )</p>
<div class="highlight highlight-source-shell"><pre>-1: 强制使用ssh协议版本1；
-2: 强制使用ssh协议版本2；
-4: 强制使用IPv4地址；
-6: 强制使用IPv6地址；
-A: 开启认证代理连接转发功能；
-a: 关闭认证代理连接转发功能；
-b: 使用本机指定地址作为对应连接的源IP地址；
-C: 请求压缩所有数据；
-F: 指定ssh指令的配置文件；
-f: 后台执行ssh指令；
-g: 允许远程主机连接主机的转发端口；
-i: 指定身份文件；
-l: 指定连接远程服务器登录用户名；
-N: 不执行远程指令；
-o: 指定ssh客户端配置选项来覆盖配置文件中的配置,比如: -o <span class="pl-s"><span class="pl-pds">"</span>StrictHostKeyChecking no<span class="pl-pds">"</span></span> 可以去除检查主机的提示；
-p: 指定远程服务器上的ssh端口(默认为22)；
-q: 静默模式；
-X: 开启X11转发功能；
-x: 关闭X11转发功能；
-y: 开启信任X11转发功能。

-D: 监听本地的指定端口，本机将作为 SOCKS5 服务器使用
-L: 本地监听指定端口，该端口收到的请求会通过远程服务器转发到另一台机器的指定端口上
-R: 远程服务器上监听指定端口，该端口收到的请求会通过本地转发到另一台机器的指定端口上</pre></div>
<p>关键的就是最后的三个参数，对应 <strong>SSH 隧道</strong> 的三种端口转发模式: 本地转发 ( <strong>-L Local</strong> )，远程转发 ( <strong>-R Remote</strong> ) 和动态转发 ( <strong>-D Dynamic</strong> )</p>
<h4>本地转发</h4>
<p><strong>本地监听指定端口，该端口收到的请求会通过远程服务器转发到另一台机器的指定端口上</strong></p>
<ul>
<li>
<p>语法：</p>
<div class="highlight highlight-source-shell"><pre>ssh [-p ssh_port] -L [bind_address:]port:host:hostport user@remote_host

解释:
    port: 本地监听的端口
    bind_address: 监听端口使用的本地地址 ( 如: 192.168.1.2,127.0.0.1,0.0.0.0 ), 不设置时默认为回环地址 ( 127.0.0.1 )
    host: 转发的目标 IP
    hostport: 转发的目标端口
注意:
    host:hostport 是远程主机 user@remote_host:ssh_port 所能访问到的地址 ( 包括 user@remote_host 自己 )，本地主机不一定能访问该地址</pre></div>
</li>
<li>
<p>示例：</p>
<div class="highlight highlight-source-shell"><pre>ssh -p 23 -Nf -L 0.0.0.0:3000:123.123.123.124:3001 root@123.123.123.123

说明:
    1. 通过 23 端口 ssh 远程服务器 123.123.123.123，使用帐号 root 登录
    2. 本地监听端口 0.0.0.0:3000
    3. 123.123.123.124 和 123.123.123.123 在一个局域网下，而本地不能直接访问 123.123.123.124
    4. 123.123.123.124 主机通过 3001 端口开放服务
    5. 调用链路: 本地访问 --<span class="pl-k">&gt;</span> 127.0.0.1:3000 -- ssh 隧道 --<span class="pl-k">&gt;</span> 123.123.123.123 -- 转发 --<span class="pl-k">&gt;</span> 123.123.123.124:3001</pre></div>
<p>上面示例中相当于将远程主机 <strong>123.123.123.124</strong> 的 <strong>3001</strong> 端口映射为本地的 <strong>3000</strong> 端口，这样就可以通过局域网访问被限制的公网服务了。</p>
</li>
</ul>
<h4>远程转发</h4>
<p><strong>远程服务器上监听指定端口，该端口收到的请求会通过本地转发到另一台机器的指定端口上</strong></p>
<ul>
<li>
<p>语法：</p>
<div class="highlight highlight-source-shell"><pre>ssh [-p ssh_port] -R [bind_address:]port:host:hostport user@remote_host

解释:
    语法和 -L 一样，只不过监听侧和目标侧的网络对换而已
    port: 在远程主机 user@remote_host 上监听的端口
    bind_address: 远程主机 user@remote_host  监听端口使用的地址 ( 如: remote_host, 127.0.0.1, 0.0.0.0 )。和 -L 有点区别，指定 IP 需要在远程主机上修改 /etc/ssh/sshd_config 中的配置: GatewayPorts。
      <span class="pl-s"><span class="pl-pds">"</span>yes<span class="pl-pds">"</span></span> 表示 强制为 0.0.0.0<span class="pl-k">;</span>
      <span class="pl-s"><span class="pl-pds">"</span>no<span class="pl-pds">"</span></span> 表示 强制为回环地址 ( 127.0.0.1 )<span class="pl-k">;</span> ( 默认 )
      <span class="pl-s"><span class="pl-pds">"</span>clientspecified<span class="pl-pds">"</span></span> 表示 由客户端决定<span class="pl-k">;</span>
    host: 转发的目标 IP
    hostport: 转发的目标端口
注意:
    host:hostport 是本地主机所能访问到的地址 ( 包括本机 )，远程主机 user@remote_host:ssh_port 不一定能访问该地址</pre></div>
</li>
<li>
<p>示例：</p>
<div class="highlight highlight-source-shell"><pre>ssh -p 23 -Nf -R 172.17.0.1:3000:192.168.1.100:3001 root@123.123.123.123

说明:
    1. 通过 23 端口 ssh 远程服务器 123.123.123.123，使用帐号 root 登录
    2. 123.123.123.123 监听端口 172.17.0.1:3000 ( 我的远程服务器运行着 docker 所以有一个虚拟网络 172.17.0.0 )
    3. 192.168.1.100 和 本地主机 在一个局域网下，而 123.123.123.123 ( 外网 ) 不能直接访问 192.168.1.100 ( 内网 )
    4. 192.168.1.100 主机通过 3001 端口开放服务
    5. 调用链路: 远程服务器中访问 --<span class="pl-k">&gt;</span> 172.17.0.1:3000 -- ssh 隧道 --<span class="pl-k">&gt;</span> 本地 -- 转发 --<span class="pl-k">&gt;</span> 192.168.1.100:3001</pre></div>
<p>上面示例中相当于将局域网主机 <strong>192.168.1.100</strong> 的 <strong>3001</strong> 端口映射为远程服务器 <strong>123.123.123.123</strong> 的 <strong>3000</strong> 端口，这样就可以通过公网来访问局域网中的服务了。</p>
</li>
</ul>
<h4>动态转发</h4>
<p><strong>监听本地的指定端口，本机将作为 SOCKS5 服务器使用</strong></p>
<ul>
<li>
<p>语法：</p>
<div class="highlight highlight-source-shell"><pre>ssh [-p ssh_port] -D [bind_address:]port user@remote_host

解释:
    port: 本地监听的端口
    bind_address: 监听端口使用的本地地址 ( 如: 192.168.1.2, 127.0.0.1, 0.0.0.0 ), 不设置时默认为回环地址 ( 127.0.0.1 )
注意:
    启动 socks5 代理
代理测试示例:
    curl --socks5 bind_address:port baidu.com</pre></div>
</li>
<li>
<p>示例：</p>
<div class="highlight highlight-source-shell"><pre>ssh -p 23 -Nf -D 127.0.0.1:3000 root@123.123.123.123

说明:
    1. 通过 23 端口 ssh 远程服务器 123.123.123.123，使用帐号 root 登录
    2. 本地监听端口 127.0.0.1:3000
    3. 调用链路: 本地局域网中访问任意 http 服务 -- 使用代理 --<span class="pl-k">&gt;</span> 172.17.0.1:3000 -- ssh 隧道 --<span class="pl-k">&gt;</span> 123.123.123.123 -- 转发 --<span class="pl-k">&gt;</span> 目标 http 服务</pre></div>
<p>上面示例中相当于开启了一个 <strong>代理服务器</strong> ，比起 <strong>本地转发</strong> 需要指定具体端口来说更加方便。</p>
</li>
</ul>
<h3>正文</h3>
<hr>
<p>上面已经介绍了 <strong>SSH TUNNEL</strong> 的使用方式，接下来就开始干正事了，先上两张网络拓扑图。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/77788339eca2b34c0d82e67c5174b25231f791371e1b42ce014d318a7960960d/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d313361303332383537623533303133622e6a7067"><img src="https://camo.githubusercontent.com/77788339eca2b34c0d82e67c5174b25231f791371e1b42ce014d318a7960960d/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d313361303332383537623533303133622e6a7067" alt="SSH TUNNEL 最终效果" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-13a032857b53013b.jpg" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ca98c34cd0c9e7f5da478ee61472b1f5b61944d7d343da1a5e0b8aac96b83da9/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613033656662366137653162626636302e6a7067"><img src="https://camo.githubusercontent.com/ca98c34cd0c9e7f5da478ee61472b1f5b61944d7d343da1a5e0b8aac96b83da9/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613033656662366137653162626636302e6a7067" alt="原先未配置的网络" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-a03efb6a7e1bbf60.jpg" style="max-width:100%;"></a></p>
<p>对比两张图把少的线连上就好了，是不是很 easy ?</p>
<ul>
<li>
<p><strong>原先环境：</strong><br>
三个独立的网络: <strong>公司内网</strong>、<strong>家里内网</strong>、<strong>阿里云专有网络</strong>，其中可以通过 <strong>公司网络</strong> 访问 <strong>阿里云</strong> 上的服务器而 <strong>家里网络</strong> 则不行。</p>
</li>
<li>
<p><strong>目标：</strong></p>
<ol>
<li>使 <strong>家里网络</strong> 的主机能访问 <strong>公司内局域网</strong> 中的主机</li>
<li>使 <strong>家里网络</strong> 的主机能访问 <strong>公司阿里云</strong> 上的服务器</li>
</ol>
</li>
<li>
<p><strong>预备工作:</strong></p>
<ol>
<li>
<p>有一台公网的服务器作为 <strong>跳板机</strong> ，公司和家里都能访问到它</p>
<p>( 没有服务器？阿里云腾讯云学生机弄台玩玩 )</p>
</li>
<li>
<p>因为 <strong>ssh</strong> 命令不能添加密码作为参数，只能手动输入，而且每次连接都要重新输入也不是很方便，这里采用 <strong>公钥方式</strong> 登录就可以免输密码了</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 创建 ssh 密钥对</span>
ssh-keygen -t rsa -b 4096 -C <span class="pl-s"><span class="pl-pds">"</span>备注1<span class="pl-pds">"</span></span>
  
<span class="pl-c"><span class="pl-c">#</span> 远程服务器上的 ~/.ssh/authorized_keys 权限要是 600</span>
<span class="pl-c"><span class="pl-c">#</span> 追加本机公钥到远程服务器</span>
cat <span class="pl-k">~</span>/.ssh/id_rsa.pub <span class="pl-k">|</span> ssh -p 23 root@123.123.123.123 <span class="pl-s"><span class="pl-pds">"</span>cat - &gt;&gt; ~/.ssh/authorized_keys<span class="pl-pds">"</span></span>
  
<span class="pl-c"><span class="pl-c">#</span> 或者直接复制本机公钥到远程服务器 ( 会覆盖掉远程服务器已有的其他公钥 )</span>
scp -P 23 -p <span class="pl-k">~</span>/.ssh/id_rsa.pub root@123.123.123.123:<span class="pl-k">~</span>/.ssh/authorized_keys</pre></div>
</li>
</ol>
</li>
<li>
<p><strong>步骤：</strong></p>
<ol>
<li>
<p>将 <strong>公司主机A</strong> 的端口 <strong>22</strong> 映射到 <strong>跳板机J</strong> 的端口 <strong>9999</strong> 上, 在 <strong>公司主机A</strong> 按照下面的命令配置 ( <strong>跳板机J</strong> 需要按上文中的方式将 <strong>GatewayPorts</strong> 设为 <code>true</code> )</p>
<div class="highlight highlight-source-shell"><pre>ssh -p 23 -Nf -R 9999:127.0.0.1:22 root@123.123.123.123</pre></div>
<p>当然也可以通过 <strong>docker</strong> 运行 <strong>autossh</strong> 来使这个隧道可以自动重连</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-c"><span class="pl-c">#</span> 暴露本地 ssh 端口到远端服务器端口</span>
<span class="pl-ent">ssh-to-expose-ssh-server</span>:
  <span class="pl-ent">image</span>: <span class="pl-s">jnovack/autossh</span>
  <span class="pl-ent">container_name</span>: <span class="pl-s">autossh-ssh-to-expose-ssh-server</span>
  <span class="pl-c"><span class="pl-c">#</span> 使用宿主机的网络</span>
  <span class="pl-ent">network_mode</span>: <span class="pl-s">host</span>
  <span class="pl-ent">environment</span>:
    - <span class="pl-s">SSH_HOSTUSER=root</span>
    - <span class="pl-s">SSH_HOSTNAME=123.123.123.123</span>
    - <span class="pl-s">SSH_HOSTPORT=23</span>
    - <span class="pl-s">SSH_TUNNEL_REMOTE=9999</span>
    - <span class="pl-s">SSH_TUNNEL_HOST=127.0.0.1</span>
    - <span class="pl-s">SSH_TUNNEL_LOCAL=22</span>
  <span class="pl-ent">restart</span>: <span class="pl-s">always</span>
  <span class="pl-ent">volumes</span>:
    - <span class="pl-s">~/.ssh/id_rsa:/id_rsa  </span></pre></div>
<p>这样在 <strong>跳板机J</strong> 上就可以通过 <code>ssh -p 9999 root@127.0.0.1</code> 远程连接到 <strong>公司主机A</strong> 了</p>
</li>
<li>
<p>在 <strong>跳板机J</strong> 上设置动态转发使其作为 <strong>代理服务器</strong> , 将接收到的请求再转发到 <strong>公司主机A</strong></p>
<p>在 <strong>跳板机J</strong>上执行下面的命令</p>
<div class="highlight highlight-source-shell"><pre>ssh -p 9999 -Nf -D 0.0.0.0:1080 root@127.0.0.1</pre></div>
<p>同样的，要把 <strong>跳板机J</strong> 的 <strong>公钥</strong> 复制到 <strong>公司主机A</strong> 上实现免密登录</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 创建 ssh 密钥对</span>
ssh-keygen -t rsa -b 4096 -C <span class="pl-s"><span class="pl-pds">"</span>备注2<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> 追加本机公钥到远程服务器</span>
cat <span class="pl-k">~</span>/.ssh/id_rsa.pub <span class="pl-k">|</span> ssh -p 9999 root@127.0.0.1 <span class="pl-s"><span class="pl-pds">"</span>cat - &gt;&gt; ~/.ssh/authorized_keys<span class="pl-pds">"</span></span></pre></div>
<p>当然也可以使用 <strong>docker</strong> 启动 <strong>autossh</strong></p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-c"><span class="pl-c">#</span> 使用 SSH TUNNEL 创建 SOCKS5 代理</span>
<span class="pl-ent">ssh-tunnel-socks5-server</span>:
  <span class="pl-ent">image</span>: <span class="pl-s">jnovack/autossh</span>
  <span class="pl-ent">container_name</span>: <span class="pl-s">ssh-tunnel-socks5-server</span>
  <span class="pl-ent">entrypoint</span>:
    <span class="pl-s">autossh</span>
     <span class="pl-s">-M 0</span>
     <span class="pl-s">-N</span>
     <span class="pl-s">-o ServerAliveInterval=5</span>
     <span class="pl-s">-o ServerAliveCountMax=1</span>
     <span class="pl-s">-o "ExitOnForwardFailure yes"</span>
     <span class="pl-s">-o "StrictHostKeyChecking no"</span>
     <span class="pl-s">-t -t</span>
     <span class="pl-s">-i /id_rsa</span>
     <span class="pl-s">-D 0.0.0.0:1080</span>
     <span class="pl-s">-p 9999</span>
     <span class="pl-c"><span class="pl-c">#</span> 使用宿主机的IP</span>
     <span class="pl-s">root@172.17.0.1</span>
  <span class="pl-ent">ports</span>:
    - <span class="pl-s"><span class="pl-pds">"</span>1081:1080<span class="pl-pds">"</span></span>
  <span class="pl-ent">restart</span>: <span class="pl-s">always</span>
  <span class="pl-ent">volumes</span>:
    - <span class="pl-s">~/.ssh/id_rsa:/id_rsa</span></pre></div>
</li>
</ol>
<p>这样 <strong>家里主机F</strong> 就可以通过设置代理 <strong>跳板机J</strong> 连接上 <strong>阿里云</strong> 上的服务器了。</p>
<p>原理: <strong>公司主机A</strong> 和 <strong>跳板机J</strong> 联合组成 <strong>代理层</strong> 。调用链路为: <strong>家里主机F</strong> -- 使用代理 --&gt; <strong>跳板机J</strong> -- ssh 隧道 --&gt; <strong>公司主机A</strong> -- 转发 --&gt; <strong>阿里云</strong> 服务器。</p>
<p><strong>注</strong> : 组成 <strong>代理层</strong> 还有另一种方式: <strong>公司主机A</strong> 开代理服务同时把端口远程暴露到 <strong>跳板机J</strong> 上, 通过这种方式就可以配置代理服务的密码了, 具体配置参照 <a href="https://github.com/anyesu/SSH-Tunnel/blob/master/client-side/docker-compose-proxy.yml">这里</a> 。</p>
</li>
</ul>
<p><strong>就这么两步配置已经打通"公司网络"和"家里网络"了。不过，貌似实现的效果是单向的诶 ( 只能家里连公司，公司还不能连家里, 如下图所示 )</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/03697390cab60bce1ac873b7e580353b39ce017029aa3933c86566ad23a1fa8b/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d313562656231613831636534376565312e6a7067"><img src="https://camo.githubusercontent.com/03697390cab60bce1ac873b7e580353b39ce017029aa3933c86566ad23a1fa8b/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d313562656231613831636534376565312e6a7067" alt="SSH TUNNEL 单向配置效果" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-15beb1a81ce47ee1.jpg" style="max-width:100%;"></a></p>
<p>解决办法: <strong>家里主机F</strong> 按 <strong>公司主机A</strong> 的步骤再配一遍就好啦。</p>
<h3>拓展</h3>
<hr>
<ul>
<li>
<p><strong>使用代理访问受限制的网站 ( 比如公司内网的项目 ) ：</strong></p>
<ol>
<li>
<p>由于代理服务器使用的是 <strong>SOCKS5</strong> 协议，<strong>Chrome</strong> 上安装 <strong>SwitchyOmega</strong> 插件配置代理服务器地址，即可通过代理服务器访问受限制的服务了。</p>
</li>
<li>
<p>将 <strong>SOCKS5</strong> 协议转为 <strong>HTTP</strong> 协议，然后通过系统自带的方式 ( <strong>Win</strong> 下设置 <strong>IE</strong> 的 <strong>Internet 属性</strong> ，移动设备设置 <strong>WIFI 的 HTTP 代理</strong> ) 来设置全局代理，<strong>docker-compose</strong> 配置如下</p>
<div class="highlight highlight-source-yaml"><pre><span class="pl-c"><span class="pl-c">#</span> 使用 gost 代理 SOCKS5 端口</span>
<span class="pl-ent">gost-server</span>:
  <span class="pl-ent">image</span>: <span class="pl-s">ginuerzh/gost</span>
  <span class="pl-ent">command</span>: <span class="pl-s">-L=:8080 -F=socks5://ssh-to-local-proxy:1080</span>
  <span class="pl-ent">ports</span>:
    - <span class="pl-s"><span class="pl-pds">"</span>1082:8080<span class="pl-pds">"</span></span>
<span class="pl-ent">restart</span>: <span class="pl-s">always</span>

<span class="pl-c"><span class="pl-c">#</span> 使用 privoxy 代理 SOCKS5 端口</span>
<span class="pl-ent">privoxy</span>:
  <span class="pl-ent">image</span>: <span class="pl-s">rdsubhas/tor-privoxy-alpine</span>
  <span class="pl-ent">entrypoint</span>: <span class="pl-s">sh -c 'echo "listen-address 0.0.0.0:8118" &gt; /etc/service/privoxy/config &amp;&amp; echo "forward-socks5 / ssh-to-local-proxy:1080 ." &gt;&gt; /etc/service/privoxy/config &amp;&amp; privoxy --no-daemon /etc/service/privoxy/config'</span>
  <span class="pl-ent">ports</span>:
  - <span class="pl-s"><span class="pl-pds">"</span>1083:8118<span class="pl-pds">"</span></span>
  <span class="pl-ent">restart</span>: <span class="pl-s">always</span></pre></div>
<p>这里给出两种转换方式 : <a href="https://github.com/ginuerzh/gost">gost</a> 和 <a href="https://blog.csdn.net/dounine/article/details/53028747" rel="nofollow">privoxy</a> , 选择其中一种方式即可。<strong>privoxy</strong> 找不到纯净的镜像, 都是捆绑 <strong>tor</strong> 的, 就挑一个最精简的来做修改吧。</p>
</li>
<li>
<p>其实还可以在 <strong>公司主机A</strong> 搭建 <strong>SS 服务器</strong> , 然后就可以通过 <strong>SS 客户端</strong> 来连接代理。具体的本文就不细说了，搭建示例可以看 <a href="https://github.com/anyesu/SSH-Tunnel/tree/master/client-side">这里</a> 对应的 <strong>compose</strong> 文件。</p>
</li>
</ol>
</li>
<li>
<p><strong>终端工具中使用代理来连接云服务器</strong><br>
这里的例子使用 <strong>WinSCP</strong> , 其他工具应该也差不多: 新建站点 -&gt; 编辑 -&gt; 高级 -&gt; 连接</p>
</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/fc2c573896aaffa1fa3a11e2bc1b64eb0abfce7e5952e14917b1947a0540cfec/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d623630353338663166333964633033362e706e67"><img src="https://camo.githubusercontent.com/fc2c573896aaffa1fa3a11e2bc1b64eb0abfce7e5952e14917b1947a0540cfec/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d623630353338663166333964633033362e706e67" alt="WinSCP" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-b60538f1f39dc036.png" style="max-width:100%;"></a></p>
<ol>
<li><strong>ssh 隧道方式</strong> : 使用 <strong>跳板机J</strong> 的 <strong>9999</strong> 端口加 <strong>公司主机A</strong> 的帐号、密码、端口。</li>
</ol>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/749f9530bb85a1b642e7bb70f5e27c442a1f5c2bc59fde35d67d587623154bc0/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d323231336635386435363937343764392e706e67"><img src="https://camo.githubusercontent.com/749f9530bb85a1b642e7bb70f5e27c442a1f5c2bc59fde35d67d587623154bc0/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d323231336635386435363937343764392e706e67" alt="WinSCP-ssh隧道方式" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-2213f58d569747d9.png" style="max-width:100%;"></a></p>
<ol start="2">
<li><strong>代理方式</strong> : 可以选择 <strong>SOCKS5</strong> 协议或者 <strong>HTTP</strong> 协议，和上面的配置一致即可。</li>
</ol>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/8c8799b36adc3b346a568b41f621b1066bc98a6253f16fc4791e0b8eeb4cc147/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d626236383764666461643562386330392e706e67"><img src="https://camo.githubusercontent.com/8c8799b36adc3b346a568b41f621b1066bc98a6253f16fc4791e0b8eeb4cc147/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d626236383764666461643562386330392e706e67" alt="WinSCP-代理方式" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-bb687dfdad5b8c09.png" style="max-width:100%;"></a></p>
<h3>其他问题</h3>
<hr>
<ol>
<li>SSH 连接可能会中断 ( 临时的网络拥塞、SSH 超时、中继主机重启等等 )，所以可以借助 <strong>autossh</strong> 实现自动重连来保证可靠的服务。</li>
<li>SSH 连接有 <strong>超时断开</strong> 的机制，<strong>WinSCP</strong> 有时会不断提示 <strong>断开重连</strong> ，有两种方式来维持连接：
<ol>
<li>设置 -&gt; 面板 -&gt; 远程 -&gt; 修改刷新面板间隔为 30s 或者更短</li>
<li>session 设置 -&gt; 高级 -&gt; 连接 -&gt; keepalives -&gt; 执行哑命令 ( 空 SSH 包是没效果的 )</li>
</ol>
</li>
<li><strong>Win10 1803</strong> 已经默认集成了 <strong>SSH 工具</strong> ，可以直接使用上面的命令。当然也可以借助终端工具来建立 <strong>SSH 隧道</strong> ，比如在 <a href="https://blog.csdn.net/u010520552/article/details/80823953" rel="nofollow"><code>MobaXterm</code></a> 上可以使用图形界面进行设置，比较直观。</li>
<li>文中的方法使用 <strong>两级代理三次转发 ( 如果在 docker 中运行那就是四次转发 )</strong> 实现不同网络的访问，中间代理层的 <strong>带宽</strong> 就限制了整体的访问速度，需要注意下。</li>
<li><strong>跳板机</strong> 提供的 <strong>SOCKS5</strong> 代理服务没有密码，如果被别人知道了 <strong>IP</strong> 和端口容易被恶意攻击，所以一定要做好安全措施 ( 比如: <strong>安全组</strong> 或 <strong>防火墙</strong> 限制 <strong>跳板机</strong> 的入网 <strong>IP</strong> 为自己指定的 <strong>IP</strong> ) 。</li>
<li>你公司其他同事也想连你家里的电脑？总不能把 <strong>跳板机</strong> 暴露给他吧，太不安全了，你本地再开一层代理，让他用你的电脑作为代理好了。</li>
</ol>
<h3>仓库</h3>
<hr>
<p>基于 <strong>docker-compose</strong> 运行的完整配置已经上传至 <a href="https://github.com/anyesu/SSH-Tunnel">GitHub</a> 。</p>
<h3>参考文章</h3>
<hr>
<ul>
<li><a href="https://www.cnblogs.com/fbwfbi/p/3702896.html" rel="nofollow">SSH隧道技术----端口转发，socket代理</a></li>
<li><a href="https://linux.cn/article-8945-1.html" rel="nofollow">通过 SSH 实现 TCP / IP 隧道（端口转发）：使用 OpenSSH 可能的 8 种场景</a></li>
<li><a href="https://www.cnblogs.com/wangkongming/p/4124945.html" rel="nofollow">winScp如何通过隧道代理进行远程连接</a></li>
<li><a href="https://github.com/caojx-git/learn/blob/master/notes/linux/ssh%20tunnel%20%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F_2.md">ssh tunnel 三种模式</a></li>
<li><a href="https://www.ssh.com/ssh/tunneling/" rel="nofollow">SSH Tunnel | SSH.COM</a></li>
<li><a href="https://www.ssh.com/ssh/tunneling/example" rel="nofollow">SSH port forwarding - Example, command, server config | SSH.COM</a></li>
</ul>
<h3>吐槽</h3>
<hr>
<p>发布文章还会莫名其妙被锁定，也是醉了。好像是出现 <strong>SS 服务</strong> 的全称就会被封，要了解更多相关内容的自己去 <code>GitHub</code> 搜索 <a href="https://github.com/search"><code>SS/SS-windows</code></a> ( SS 替换为全称 ) 。</p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/388a93b1e7f7">https://www.jianshu.com/p/388a93b1e7f7</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-09-21T12:38:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[记一次 win10 下的内存泄漏分析]]></title>
        <id>18</id>
        <link href="https://anyesu.github.io/blog/articles/18"/>
        <updated>2019-07-27T10:53:39.000Z</updated>
        <summary type="html"><![CDATA[前言 在上回 SVN 项目迁移到 Git 的过程中遇到了内存泄漏的问题，本文就这个问题做一次分析和记录。 第一回合 之前对迁移过程做了大量测试，觉得都没问题了，就把项目带回家准备利用周末的时间来迁移，下周其他同事就可以正常提交代码而不用耽误太多时间了。 当然，回家后不会立即开始迁移，先做点正事。迁移的时候电脑应该专心点，免得出现什么未知问题，所以睡觉前开始挂机，醒来估计差不多就好了。嗯，想法很美好]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>在上回 <a href="https://www.jianshu.com/p/5dcf658851f7" rel="nofollow">SVN 项目迁移到 Git</a> 的过程中遇到了内存泄漏的问题，本文就这个问题做一次分析和记录。</p>
<h3>第一回合</h3>
<hr>
<p>之前对迁移过程做了大量测试，觉得都没问题了，就把项目带回家准备利用周末的时间来迁移，下周其他同事就可以正常提交代码而不用耽误太多时间了。</p>
<p>当然，回家后不会立即开始迁移，先做点正事。迁移的时候电脑应该专心点，免得出现什么未知问题，所以睡觉前开始挂机，醒来估计差不多就好了。嗯，想法很美好。</p>
<p>第二天起来，准备收割胜利的果实，结果发现电脑死机了 ( 鼠标虽然还能动，但是点啥都没反应，键盘也毫无响应 ) ，无奈之下只好按电源强制关机了。</p>
<h3>第二回合</h3>
<hr>
<p>想起来挂机的时候同时开了两个任务 ( <code>git subtree</code> 和 <code>git filter-branch</code> )，会不会是这两个任务冲突了？那就一个一个执行吧，重新开始挂机，出门去。</p>
<p>晚上回来之后，电脑 "<strong>不负所托</strong>" 又死机了。</p>
<h3>第三回合</h3>
<hr>
<p>前两次死机的时候我都不在现场，如果我盯着它，干活应该能认真点？强制关机，再次开启任务，打开任务管理器，我倒要看看是什么原因导致的。</p>
<p>开始之后，<strong>CPU</strong> 开始飙升，查看进程发现竟然不是 <strong>Git</strong> 而是 <strong>电脑管家的实时防护服务</strong> ，喧宾夺主了吧。想关掉这个服务，试了各种方法都关不掉，最后干脆直接卸载。</p>
<p>卸载完 <strong>电脑管家</strong> ，重新开始任务。结果 <strong>CPU</strong> 还是飙升，这回是 <strong>win10</strong> 自带的 <strong>Windows Defender</strong> ，同理禁用掉。( 后来发现，这两个软件应该是对 <strong>Git</strong> 产生的大量文件进行扫描，虽然会占用一些 <strong>CPU</strong> ，但是并没有太大影响，所以不必禁用 )</p>
<p>重新开始，<strong>CPU</strong> 正常了，接下来就是慢慢等待了。半小时,一小时... 一切还算正常，不过内存占用有点上升。按照任务已完成的进度和增长的内存，粗粗算了一下，发现内存根本坚持不到任务结束的那一刻。果然，几个小时之后，内存就满了，磁盘利用率开始飙升，然而任务还有一大半没完成，而且速度越来越慢，不过电脑还能正常使用。继续等待，一个小时后，不出意外，终于死机了。</p>
<h3>问题分析</h3>
<hr>
<p>通过上面的试验可以确认，死机的原因是 <strong>内存泄漏</strong> 了，但是什么原因导致 <strong>内存泄漏</strong> 还无法得知。</p>
<p>下面给出本次迁移使用的机器配置</p>
<table role="table">
<thead>
<tr>
<th>机器</th>
<th>系统</th>
<th>配置</th>
<th>测试结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>公司的闲置笔记本 ( A )</td>
<td>win10 1703</td>
<td>i5 8G</td>
<td>正常执行迁移任务，不存在内存泄漏</td>
</tr>
<tr>
<td>公司的工作笔记本 ( B )</td>
<td>win10 1803</td>
<td>i5 8G</td>
<td>内存泄漏</td>
</tr>
<tr>
<td>家里的笔记本 ( C )</td>
<td>win10 1709</td>
<td>i5 8G</td>
<td>内存泄漏</td>
</tr>
</tbody>
</table>
<p>既然有一台电脑是正常的，那就可以排除操作系统的问题了，对比下闲置电脑和我日常使用的电脑有哪些差异 ( 系统配置，安装的第三方软件等等 ) 。</p>
<ol>
<li>
<p>首先注意到电脑 A 的虚拟内存配置和其他两台电脑不太一样，那就调成一样或者关掉虚拟内存试试。结果内存还是会泄漏，不过内存用满了之后任务就因为内存不足自动结束了，也就不会死机了。到这一步可得知死机的原因是 <strong>物理内存耗尽后，大量使用磁盘虚拟出来的内存</strong> ，但是还没从根源上找到内存泄漏的原因。</p>
</li>
<li>
<p>对比任务管理器中的运行的服务，一个个关掉后测试，有点费劲费时 ( 这真是个笨方法，后来想到重启进入 <strong>安全模式</strong> 测一遍就好了 ) 。忽然注意到，前面提到的 <strong>电脑管家的实时防护服务</strong> 和 <strong>Windows Defender</strong> 会占用较多的 <strong>CPU</strong> ，那么和它们类似的 <strong>扫描类/底层拦截类</strong> 的软件也很有嫌疑。这回把目标瞄准 <strong>ADSafe</strong> 这个广告拦截软件，禁用服务，再次开启迁移任务。等待了一个小时，内存竟然没有增长，看来 <strong>真凶</strong> 就是它了。</p>
</li>
</ol>
<h3>问题复现</h3>
<hr>
<p>先上截图，看下开启 <strong>ADSafe</strong> 时的资源使用情况</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/e4ea3b85e3bc63a72b8f577e53f5f34f706c6119d2d32a61722c19bd317e10c6/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d306463393933663464376330663266372e706e67"><img src="https://camo.githubusercontent.com/e4ea3b85e3bc63a72b8f577e53f5f34f706c6119d2d32a61722c19bd317e10c6/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d306463393933663464376330663266372e706e67" alt="开机后刚开始执行任务" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-0dc993f4d7c0f2f7.png" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/1d75b09a111bcca1bd76c51502f3bb96746d9a1fe1817be769c96e2311d81015/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d326235393666346633386535336464632e706e67"><img src="https://camo.githubusercontent.com/1d75b09a111bcca1bd76c51502f3bb96746d9a1fe1817be769c96e2311d81015/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d326235393666346633386535336464632e706e67" alt="任务运行半小时后" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-2b596f4f38e53ddc.png" style="max-width:100%;"></a></p>
<p>对比前面两张图看下半小时的数据差异：</p>
<ol>
<li>资源管理器中 <strong>使用中</strong> 增长 <strong>2.1 G</strong>，<strong>已提交</strong> 增长 <strong>2.9 G</strong></li>
<li>资源监视器中 <strong>可用</strong> 的内存几乎都转为 <strong>正在使用</strong></li>
<li><strong>RAMMap</strong> 中 <strong>进程私有</strong> 增长 <strong>100 M</strong>，<strong>映射文件</strong> 增长 <strong>1 G</strong>，<strong>页表</strong> 增长 <strong>1.2 G</strong></li>
</ol>
<p>可以发现进程并没有泄露内存，<strong>映射文件</strong> 占用的内存不用太在意，唯一异常的地方在于 <strong>页表</strong> 这一项。</p>
<p>再上一张 <strong>RAMMap</strong> 中进程标签页下的截图</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/87a17312962510436d4d15e9c34513db0de6876e2a63f56f031a8578f7cc502d/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613838316331663130383664663732342e706e67"><img src="https://camo.githubusercontent.com/87a17312962510436d4d15e9c34513db0de6876e2a63f56f031a8578f7cc502d/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f313833363533342d613838316331663130383664663732342e706e67" alt="RAMMap 中进程标签页" data-canonical-src="https://upload-images.jianshu.io/upload_images/1836534-a881c1f1086df724.png" style="max-width:100%;"></a></p>
<p>可以看到大量的进程，<strong>PID</strong> 由最初的 <strong>1 W+</strong> 增长到了 <strong>18 W+</strong> ，而且这些进程大部分在任务管理器是不存在的 ( 即进程已结束 ) 。粗粗统计了下，大约有 <strong>46000</strong> 个进程 ( <code>sh.exe/git.exe/cat.exe</code> ) ，每个占用 <strong>28 KB</strong> ，合计大约有 <strong>1.22 G</strong> ，正好和上面的 <strong>页表</strong> 内存增长量相吻合，所以应该是这部分内存无法回收利用导致的内存泄漏 ( 这估计是系统的 <strong>bug</strong> ，进程结束应该释放页表占用的内存才对 ) 。<a href="https://social.technet.microsoft.com/Forums/msonline/en-US/69879cec-902c-424a-b391-4e9d7aea5385/windows2008r2-sp1?forum=WinServerPreviewZHCN#176e3b01-610b-4b54-8faf-efecb4854a39" rel="nofollow">类似情况</a></p>
<p>关掉 <strong>ADSafe</strong> 后再次试验，<code>sh.exe/git.exe/cat.exe</code> 进程数虽然也增加了几十个，但是和前面的 <strong>4 W+</strong> 比起来完全不是一个数量级。</p>
<h3>结论</h3>
<hr>
<p>通过上面测试，可以定位到内存泄漏的根源: <strong>ADSafe</strong> 和 <strong>Git</strong> 有所冲突，导致 <strong>Git</strong> 不断创建新的进程。至于是什么冲突那就无法得知了，和 <strong>ADSafe</strong> 说拜拜就好了。</p>
<h3>拓展知识</h3>
<hr>
<h5>1. 文中用到的内存分析工具: <code>RAMMap</code> 、<code>VMMap</code> 、<code>AIDA64 Extreme</code></h5>
<h5>2. 关于任务管理器中的内存指标:</h5>
<blockquote>
<p><strong>使用中</strong> : 进程使用的内存大小，内存使用率就是用这个值计算的，实际上这个值并没有太大意义。<br>
<strong>已提交 ( 已用 )</strong> : 所有程序真正占用的内存，当这个值接近或者超过物理内存大小的时候，电脑基本已经开始变卡了，因为这时候已经开始使用磁盘所虚拟出来的内存，想想内存和磁盘的读写速度就知道了。<br>
<strong>已提交 ( 总 )</strong> : 也就是 <strong>虚拟内存</strong>，等于 <strong>物理内存</strong> + <strong>系统盘下 pagefile.sys 文件的大小</strong></p>
<p>关于 <strong>使用中</strong> 和 <strong>已提交</strong> 的区别，我的理解: 一个进程向操作系统申请了 <strong>1 G</strong> 的内存，那么这些内存就都归这个进程使用，虽然它现在只使用了 <strong>200 M</strong>，但剩下 <strong>800 M+</strong> 应该为这个进程保留，而不能拿去给别的进程使用，这个例子中 <strong>已提交</strong> 就是 <strong>1 G</strong> ，<strong>使用中</strong> 是 <strong>200 M</strong>，两者之差可以反映出程序的内存利用率。</p>
</blockquote>
<ul>
<li><a href="https://www.zhihu.com/question/43714216/answer/96359711" rel="nofollow">Windows 8或者Windows10的任务管理器中，内存已提交的两个数字都是什么意思?</a></li>
<li><a href="https://www.zhihu.com/question/19828627/answer/133877436" rel="nofollow">Win 7 “已修改”内存占了几 G ，怎么才能让它自动释放？</a></li>
<li><a href="http://shashanzhao.com/archives/832.html" rel="nofollow">windows任务管理器中的工作设置内存,内存专用工作集,提交大小详解</a></li>
</ul>
<h5>3. 是否应该禁用 "虚拟内存" ( pagefile.sys )？</h5>
<p>个人不建议禁用。比如我平时工作时，开一个 <strong>IDEA</strong> 再把工作项目都启动，基本上 <strong>8 G</strong> 的内存都用完了，这时如果我再开个 <strong>Chrome</strong> 就要用到 <strong>虚拟内存</strong> 了，内存再挤一点用一点。但是如果我禁用了 <strong>虚拟内存</strong> ，就会提示 <strong>内存不足</strong> 导致程序崩溃，或者需要关闭 <strong>其他使用中的程序</strong> 腾出内存才能打开新的程序。<strong>虚拟内存</strong> 的意义在于：<strong>物理内存</strong> 不足的时候使用磁盘来代替内存，虽然会卡一点，但是能满足使用所需 ( 就是要开这么多程序 ) 。同样的，<strong>内存不足</strong> 根本解决办法应该是 <strong>加内存并且少开程序</strong> 而不是一味的加大 <strong>虚拟内存</strong> 。</p>
<h5>4. 关于 RAMMap 中的指标</h5>
<p>按照我的经验，<strong>剩余可用内存</strong> 基本上等于 <strong>映射文件 ( 备用 )</strong> + <strong>未使用 ( 归零 + 可用 )</strong> 。如果开启了 <strong>Superfetch</strong> 服务，系统会把一些常用的文件读取到内存 ( <strong>映射文件</strong> ) 中，这样程序中用到这些文件的时候就能更快的读取，这部分内存在 <strong>内存不足</strong> 的时候是可以拿来给其他进程使用。</p>
<ul>
<li><a href="https://www.cnblogs.com/tudoux/p/4634888.html" rel="nofollow">内存查看工具RAMMAP说明</a></li>
<li><a href="http://www.cnblogs.com/georgepei/archive/2012/03/07/2383548.html" rel="nofollow">内存详解</a></li>
</ul>
<h5>5. 关于页表</h5>
<p>对于页表我也不了解，页表应该就是一个目录结构，保存 <strong>内存地址映射关系</strong>，通过它程序能把 <strong>逻辑地址</strong> 转为 <strong>实际的物理地址</strong> 。</p>
<ul>
<li><a href="https://www.zhihu.com/question/50796850" rel="nofollow">怎样通俗的理解操作系统中内存管理分页和分段？</a></li>
<li><a href="https://blog.csdn.net/chluknight/article/details/6689323" rel="nofollow">内存分页大小对性能的提升原理</a></li>
<li><a href="http://www.mamicode.com/info-detail-1289630.html" rel="nofollow">操作系统内存管理之 分页与虚存（页表、页框、内存）</a></li>
<li><a href="https://blog.csdn.net/iawes/article/details/50915975" rel="nofollow">页表到底占用多少空间？一些疑惑和思考</a></li>
</ul>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/7510e57aeaff">https://www.jianshu.com/p/7510e57aeaff</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-07-27T10:53:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[SVN 项目迁移到 Git]]></title>
        <id>17</id>
        <link href="https://anyesu.github.io/blog/articles/17"/>
        <updated>2019-04-27T18:24:30.000Z</updated>
        <summary type="html"><![CDATA[前言 最近刚把公司项目从 SVN 迁移到了 Git 上，在这里做个记录。 数据迁移 # 检出空项目proj svn co --depth=empty --username=user svn://url proj # 进入proj目录 cd proj # 获取user列表 echo '(no author) = no_author <no_author@no_author>' > ../users.]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
<hr>
<p>最近刚把公司项目从 <strong>SVN</strong> 迁移到了 <strong>Git</strong> 上，在这里做个记录。</p>
<h3>数据迁移</h3>
<hr>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 检出空项目proj</span>
svn co --depth=empty --username=user svn://url proj

<span class="pl-c"><span class="pl-c">#</span> 进入proj目录</span>
<span class="pl-c1">cd</span> proj

<span class="pl-c"><span class="pl-c">#</span> 获取user列表</span>
<span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">'</span>(no author) = no_author &lt;no_author@no_author&gt;<span class="pl-pds">'</span></span> <span class="pl-k">&gt;</span> ../users.txt
svn log ^/ --xml <span class="pl-k">|</span> grep -P <span class="pl-s"><span class="pl-pds">"</span>^&lt;author<span class="pl-pds">"</span></span> <span class="pl-k">|</span> sort -u <span class="pl-k">|</span> perl -pe <span class="pl-s"><span class="pl-pds">'</span>s/&lt;author&gt;(.*?)&lt;\/author&gt;/$1 = $1 &lt;$1\@email.com&gt;/<span class="pl-pds">'</span></span> <span class="pl-k">&gt;&gt;</span> ../users.txt

<span class="pl-c"><span class="pl-c">#</span> 对users.txt进行编辑 替换用户名和邮箱内容</span>

<span class="pl-c1">cd</span> ../ <span class="pl-k">&amp;&amp;</span> rm -rf proj

<span class="pl-c"><span class="pl-c">#</span> 检出svn r1版本到最新版本的数据</span>
git svn clone -r1:HEAD svn://url --username=user --no-metadata --authors-file=users.txt proj</pre></div>
<p>执行上面的步骤就可以将 <strong>SVN</strong> 项目导出到本地 <strong>Git</strong> 仓库了。不过，一般项目比较大导出时间会比较长，可以中断 <code>git svn clone</code> 操作，采用下面的命令分段迁移，避免长时间运行把电脑弄卡或者死机：</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 进入proj目录</span>
<span class="pl-c1">cd</span> proj

<span class="pl-c"><span class="pl-c">#</span> 更新远程分支 git-svn </span>
git svn fetch

<span class="pl-c"><span class="pl-c">#</span> 合并远程分支 git-svn 到 master 分支</span>
git merge git-svn

<span class="pl-c"><span class="pl-c">#</span> 如果迁移过程中svn地址有变动，可以修改 .git/config 文件中对应的url</span>
</pre></div>
<p>这里说一个迁移的细节，可以提早进行 <code>git svn clone</code> 操作，在下班的时候 <code>git svn fetch</code> 快速更新到最新版本然后停掉 <strong>SVN</strong> 服务器。</p>
<h3>多模块项目拆分</h3>
<hr>
<p>我们的项目是一个 <strong>maven</strong> 多模块项目，原先在 <strong>SVN</strong> 下可以给不同的人开放不同子模块的权限，而 <strong>Git</strong> 无法做到目录级权限控制，所以能想到的解决办法就是拆拆拆。不过，我们项目的子模块比较多 ( 20 多个 )，全拆感觉会要命，就简单拆成前端和后端两个仓库吧。</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 1. 将子模块 [module1] 拆分为新的分支 module1</span>
git subtree split -P module1 -b module1

<span class="pl-c"><span class="pl-c">#</span> 2. 清理 master 分支中包含子模块 [module1] 的内容</span>
git filter-branch -f --index-filter <span class="pl-s"><span class="pl-pds">"</span>git rm -rf --cached --ignore-unmatch module1<span class="pl-pds">"</span></span> --prune-empty master

<span class="pl-c"><span class="pl-c">#</span> 3. 将子模块推送到新仓库的master分支</span>
git push http://gitlab/module1.git module1:master</pre></div>
<p>需要深入使用 <strong>subtree</strong> 可以参考下面的步骤，不过个人认为 <strong>subtree</strong> 的引用在日常开发中不是很方便，还不如工作空间下引入多个项目。</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 4. 父模块引入新的仓库作为子模块</span>
git subtree add --prefix=module1 http://gitlab/module1.git master

<span class="pl-c"><span class="pl-c">#</span> 5. 父模块中 pull 子模块的数据</span>
git subtree pull --prefix=module1 http://gitlab/module1.git master

<span class="pl-c"><span class="pl-c">#</span> 6. 父模块向子模块 push</span>
git subtree push --prefix=module1 http://gitlab/module1.git master</pre></div>
<h3>遇到的问题</h3>
<hr>
<ul>
<li>
<p><strong>耗时</strong><br>
<code>git svn clone</code> , <code>git subtree split</code> , <code>git filter-branch</code> 这三个步骤非常的耗时间，需要合理安排时间, 中途要经常备份。我们的项目有 <strong>3w+</strong> 的 <strong>commits</strong> ，在 <strong>i5 8g</strong> 的 <strong>win10</strong> 上耗时分别为 <strong>30 h</strong>, <strong>2 h</strong>, <strong>10 h</strong>，迁移后项目大小 <strong>300 M</strong> 。中途遇到过 <strong>蓝屏重启后索引错乱需要重头再来</strong>、<strong>内存泄漏导致死机</strong> ( <a href="https://www.jianshu.com/p/7510e57aeaff" rel="nofollow">单独开篇讲</a> )、<strong>SVN 服务器经常断开连接</strong> 等等问题。</p>
</li>
<li>
<p><strong>空目录</strong><br>
迁移后，原先的空目录会被删除，如果需要保持原有目录结构，可以在空目录下添加占位文件并提交到 <strong>SVN</strong> 上，之后再导入 <strong>Git</strong> 。参考 <a href="https://blog.csdn.net/fengchao2016/article/details/52769151" rel="nofollow">git 提交空文件夹</a> 。</p>
</li>
<li>
<p><strong>换行符的问题</strong><br>
在 <strong>SVN</strong> 上这个不算什么大问题，迁移到了 <strong>Git</strong> 上之后就成了大问题，因为有 <strong>autocrlf</strong> 这个配置项。一般人安装 <strong>Git</strong> 的时候要么选择默认设置，要么被网上的文章误导一顿操作结果越设置越乱。解决方法：</p>
</li>
</ul>
<blockquote>
<p>源码在仓库中统一用 LF 格式保存<br>
在 Mac 上设置 autocrlf = input ( 检出的时候不转换，提交的时候自动转成 LF )<br>
在 Windows 上设置 autocrlf = true ( 检出的时候自动转成 CRLF , 提交的时候自动转成 LF )</p>
</blockquote>
<p>我们的项目比较可怕，是 <strong>CRLF</strong> 文件和 <strong>LF</strong> 文件混合的，可以采用下面的命令批量替换，然后提交到 <strong>SVN</strong> 上。</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c"><span class="pl-c">#</span> 修改svn项目的换行符(linux下或者进入git-bash执行)</span>
find <span class="pl-c1">.</span> -type f -print -o -path ./.svn -prune <span class="pl-k">|</span> xargs dos2unix -k</pre></div>
<p>对了，迁移完最好使用 <strong>Beyond Compare 4</strong> 这样的工具对比下。</p>
<ul>
<li><strong>其他问题</strong>
<ul>
<li>迁移用的 <strong>SVN</strong> 帐号最好有所有目录的权限</li>
<li><strong>users.txt</strong> 中加一行 <code>(no author) = no_author &lt;no_author@no_author&gt;</code></li>
<li>最好用 <strong>Linux</strong> 服务器迁移，耗时能从以 <strong>小时</strong> 为单位提升到以 <strong>分钟</strong> 为单位，而且可以同时进行多个项目的迁移。</li>
</ul>
</li>
</ul>
<h3>参考</h3>
<hr>
<ul>
<li><strong><a href="https://blog.csdn.net/xueshanhaizi/article/details/54929365" rel="nofollow">SVN 迁移到 git</a></strong></li>
<li><strong><a href="https://segmentfault.com/a/1190000002548731" rel="nofollow">Git 仓库拆拆拆</a></strong></li>
<li><strong><a href="https://typecodes.com/mix/gitsubtree1.html" rel="nofollow">Git 多仓库作子目录的双向同步：一次 Git Subtree 的实践</a></strong></li>
<li><strong><a href="https://blog.csdn.net/cjf_iceking/article/details/47836201" rel="nofollow">Windows 文件换行符转 Linux 换行符</a></strong></li>
</ul>
<hr>
<h3>结语</h3>
<hr>
<p>整个迁移步骤就上面简单的几步就好了，剩下的就是把本地仓库 <strong>push</strong> 到远程仓库 ( 如 <strong>gitlab</strong> ) 中即可，至于其他的坑各位自行体验吧。</p>
<hr>
<h4>转载请注明出处：<a rel="nofollow" href="https://www.jianshu.com/p/5dcf658851f7">https://www.jianshu.com/p/5dcf658851f7</a></h4>]]></content>
        <author>
            <name>anyesu</name>
            <uri>https://github.com/anyesu</uri>
        </author>
        <published>2019-04-27T18:24:30.000Z</published>
    </entry>
</feed>